
examples/c/sapi/statecharts/tp1/ej3/out/ej3.elf:     file format elf32-littlearm
examples/c/sapi/statecharts/tp1/ej3/out/ej3.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a001389

Program Header:
0x70000001 off    0x00012b1c vaddr 0x1a002b1c paddr 0x1a002b1c align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010048 vaddr 0x10000048 paddr 0x10000048 align 2**16
         filesz 0x00000000 memsz 0x00000098 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00002b24 memsz 0x00002b24 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a002b24 align 2**16
         filesz 0x00000048 memsz 0x00000048 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b18  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  10000000  1a002b24  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020048  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020048  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020048  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
  6 .bss          00000098  10000048  10000048  00010048  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020048  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020048  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020048  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
 11 .init_array   00000004  1a002b18  1a002b18  00012b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a002b1c  1a002b1c  00012b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020048  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020048  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020048  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020048  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
 18 .noinit       00000000  100000e0  100000e0  00020048  2**2
                  CONTENTS
 19 .debug_info   0001f787  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 0000409e  00000000  00000000  0003f7cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00009bec  00000000  00000000  0004386d  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00001050  00000000  00000000  0004d459  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00001090  00000000  00000000  0004e4a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000c90a  00000000  00000000  0004f539  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   000112fe  00000000  00000000  0005be43  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0002be49  00000000  00000000  0006d141  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  00098f8a  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  00098ff2  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00002900  00000000  00000000  00099024  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000048 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a002b18 l    d  .init_array	00000000 .init_array
1a002b1c l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100000e0 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 Ej3.c
1a000300 l     F .text	00000022 clearInEvents
1a000322 l     F .text	00000006 check_TECX_DEBOUNCE_tr0_tr0
1a000328 l     F .text	00000004 check_TECX_NO_OPRIMIDO_tr0_tr0
1a00032c l     F .text	00000004 check_TECX_OPRIMIDO_tr0_tr0
1a000330 l     F .text	00000004 check_TECX_VALIDACION_tr0_tr0
1a000334 l     F .text	00000004 check_TECX_VALIDACION_tr1_tr1
1a000338 l     F .text	00000020 check_main_region_ESPERA_tr0_tr0
1a000358 l     F .text	00000020 check_main_region_ESPERA_tr1_tr1
1a000378 l     F .text	00000016 check_main_region_ESPERA_tr2_tr2
1a00038e l     F .text	00000016 check_main_region_ESPERA_tr3_tr3
1a0003a4 l     F .text	00000016 check_forma_TRIANGULAR_tr0_tr0
1a0003ba l     F .text	00000016 check_forma_TRIANGULAR_tr1_tr1
1a0003d0 l     F .text	00000016 check_forma_TRIANGULAR_tr2_tr2
1a0003e6 l     F .text	00000016 check_forma_CUADRADA_tr0_tr0
1a0003fc l     F .text	00000016 check_forma_CUADRADA_tr1_tr1
1a000412 l     F .text	00000016 check_forma_CUADRADA_tr2_tr2
1a000428 l     F .text	00000016 check_forma_SENOIDAL_tr0_tr0
1a00043e l     F .text	00000016 check_forma_SENOIDAL_tr1_tr1
1a000454 l     F .text	00000016 check_forma_SENOIDAL_tr2_tr2
1a00046a l     F .text	00000016 check_forma_SELECCION_FORMA_tr0_tr0
1a000480 l     F .text	00000016 check_forma_SELECCION_FORMA_tr1_tr1
1a000496 l     F .text	00000006 check_forma_FORMA_SELECCIONADA_tr0_tr0
1a00049c l     F .text	00000004 check_magnitud_FRECUENCIA_tr0_tr0
1a0004a0 l     F .text	00000004 check_magnitud_TENSION_tr0_tr0
1a0004a4 l     F .text	00000004 check_magnitud_WAIT_SELECCION_MAGNITUD_tr0_tr0
1a0004a8 l     F .text	00000004 check_magnitud_SELECC_MAGNITUD_tr0_tr0
1a0004ac l     F .text	00000004 check_magnitud_SELECC_MAGNITUD_tr1_tr1
1a0004b0 l     F .text	00000004 check_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START_tr0_tr0
1a0004b4 l     F .text	00000004 check_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START_tr1_tr1
1a0004b8 l     F .text	00000004 check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_tr0_tr0
1a0004bc l     F .text	00000004 check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_tr1_tr1
1a0004c0 l     F .text	00000004 check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_tr2_tr2
1a0004c4 l     F .text	00000004 check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_tr0_tr0
1a0004c8 l     F .text	00000004 check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_tr1_tr1
1a0004cc l     F .text	00000004 check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_tr2_tr2
1a0004d0 l     F .text	00000006 check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA_tr0_tr0
1a0004d6 l     F .text	00000004 check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START_tr0_tr0
1a0004da l     F .text	00000004 check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START_tr1_tr1
1a0004de l     F .text	00000004 check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_tr0_tr0
1a0004e2 l     F .text	00000004 check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_tr1_tr1
1a0004e6 l     F .text	00000004 check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_tr2_tr2
1a0004ea l     F .text	00000004 check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_tr0_tr0
1a0004ee l     F .text	00000004 check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_tr1_tr1
1a0004f2 l     F .text	00000004 check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_tr2_tr2
1a0004f6 l     F .text	00000006 check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA_tr0_tr0
1a0004fc l     F .text	0000000a enact_TECX_OPRIMIDO
1a000506 l     F .text	00000008 enact_forma_SELECCION_FORMA
1a00050e l     F .text	00000008 enact_magnitud_WAIT_SELECCION_MAGNITUD
1a000516 l     F .text	00000006 enact_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START
1a00051c l     F .text	00000006 enact_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START
1a000522 l     F .text	0000000a enseq_TECX_NO_OPRIMIDO_default
1a00052c l     F .text	00000012 enseq_TECX_OPRIMIDO_default
1a00053e l     F .text	0000000a enseq_TECX_VALIDACION_default
1a000548 l     F .text	0000000a enseq_main_region_ESPERA_default
1a000552 l     F .text	00000012 enseq_forma_SELECCION_FORMA_default
1a000564 l     F .text	00000012 enseq_magnitud_WAIT_SELECCION_MAGNITUD_default
1a000576 l     F .text	0000000a enseq_magnitud_SELECC_MAGNITUD_default
1a000580 l     F .text	00000012 enseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START_default
1a000592 l     F .text	00000012 enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START_default
1a0005a4 l     F .text	00000008 exseq_TECX_NO_OPRIMIDO
1a0005ac l     F .text	00000008 exseq_TECX_OPRIMIDO
1a0005b4 l     F .text	00000010 effect_TECX_OPRIMIDO_tr0
1a0005c4 l     F .text	00000008 exseq_TECX_VALIDACION
1a0005cc l     F .text	00000010 effect_TECX_VALIDACION_tr0
1a0005dc l     F .text	00000010 effect_TECX_VALIDACION_tr1
1a0005ec l     F .text	0000000a exseq_main_region_ESPERA
1a0005f6 l     F .text	00000018 effect_main_region_ESPERA_tr0
1a00060e l     F .text	00000018 effect_main_region_ESPERA_tr1
1a000626 l     F .text	00000014 effect_main_region_ESPERA_tr2
1a00063a l     F .text	00000014 effect_main_region_ESPERA_tr3
1a00064e l     F .text	0000000a exseq_forma_SELECCION_FORMA
1a000658 l     F .text	0000000a exseq_magnitud_WAIT_SELECCION_MAGNITUD
1a000662 l     F .text	00000010 effect_magnitud_WAIT_SELECCION_MAGNITUD_tr0
1a000672 l     F .text	0000000a exseq_magnitud_SELECC_MAGNITUD
1a00067c l     F .text	0000000a exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START
1a000686 l     F .text	0000000a exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP
1a000690 l     F .text	0000000a exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN
1a00069a l     F .text	0000000a exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START
1a0006a4 l     F .text	0000000a exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP
1a0006ae l     F .text	0000000a exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN
1a0006b8 l     F .text	00000014 react_TECX_OPRIMIDO
1a0006cc l     F .text	00000024 react_TECX_VALIDACION
1a0006f0 l     F .text	00000042 react_main_region_ESPERA
1a000732 l     F .text	00000014 react_magnitud_WAIT_SELECCION_MAGNITUD
1a000746 l     F .text	00000008 react_TECX__entry_Default
1a00074e l     F .text	00000008 enseq_TECX_default
1a000756 l     F .text	00000008 react_main_region__entry_Default
1a00075e l     F .text	00000008 enseq_main_region_default
1a000766 l     F .text	00000008 react_forma__entry_Default
1a00076e l     F .text	00000008 enseq_forma_default
1a000776 l     F .text	00000008 react_magnitud__entry_Default
1a00077e l     F .text	00000008 enseq_magnitud_default
1a000786 l     F .text	00000008 react_magnitud_ELEGIR_AMPLITUD_FREC_r1__entry_Default
1a00078e l     F .text	00000008 enseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_default
1a000796 l     F .text	00000008 enseq_magnitud_ELEGIR_AMPLITUD_FREC_default
1a00079e l     F .text	00000008 react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1__entry_Default
1a0007a6 l     F .text	00000008 enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_default
1a0007ae l     F .text	00000008 enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_default
1a0007b6 l     F .text	0000000c exact_TECX_DEBOUNCE
1a0007c2 l     F .text	0000000e exseq_TECX_DEBOUNCE
1a0007d0 l     F .text	00000010 effect_TECX_DEBOUNCE_tr0
1a0007e0 l     F .text	00000014 react_TECX_DEBOUNCE
1a0007f4 l     F .text	0000000c exact_forma_FORMA_SELECCIONADA
1a000800 l     F .text	00000010 exseq_forma_FORMA_SELECCIONADA
1a000810 l     F .text	00000010 effect_forma_FORMA_SELECCIONADA_tr0
1a000820 l     F .text	00000014 react_forma_FORMA_SELECCIONADA
1a000834 l     F .text	0000000c exact_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA
1a000840 l     F .text	00000010 exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA
1a000850 l     F .text	0000002a exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1
1a00087a l     F .text	00000008 exseq_magnitud_ELEGIR_AMPLITUD_FREC
1a000882 l     F .text	00000010 effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA_tr0
1a000892 l     F .text	00000014 react_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA
1a0008a6 l     F .text	0000000c exact_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA
1a0008b2 l     F .text	00000010 exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA
1a0008c2 l     F .text	0000002a exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1
1a0008ec l     F .text	00000008 exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE
1a0008f4 l     F .text	00000010 effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA_tr0
1a000904 l     F .text	00000014 react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA
1a000918 l     F .text	00000010 enact_TECX_DEBOUNCE
1a000928 l     F .text	00000012 enseq_TECX_DEBOUNCE_default
1a00093a l     F .text	00000010 effect_TECX_NO_OPRIMIDO_tr0
1a00094a l     F .text	00000014 react_TECX_NO_OPRIMIDO
1a00095e l     F .text	00000010 enact_forma_FORMA_SELECCIONADA
1a00096e l     F .text	00000012 enseq_forma_FORMA_SELECCIONADA_default
1a000980 l     F .text	0000000c exact_forma_TRIANGULAR
1a00098c l     F .text	00000010 exseq_forma_TRIANGULAR
1a00099c l     F .text	00000010 effect_forma_TRIANGULAR_tr2
1a0009ac l     F .text	0000000c exact_forma_CUADRADA
1a0009b8 l     F .text	00000010 exseq_forma_CUADRADA
1a0009c8 l     F .text	00000010 effect_forma_CUADRADA_tr2
1a0009d8 l     F .text	0000000c exact_forma_SENOIDAL
1a0009e4 l     F .text	00000010 exseq_forma_SENOIDAL
1a0009f4 l     F .text	00000010 effect_forma_SENOIDAL_tr2
1a000a04 l     F .text	0000000c exact_magnitud_FRECUENCIA
1a000a10 l     F .text	00000010 exseq_magnitud_FRECUENCIA
1a000a20 l     F .text	00000010 effect_magnitud_FRECUENCIA_tr0
1a000a30 l     F .text	00000014 react_magnitud_FRECUENCIA
1a000a44 l     F .text	0000000c exact_magnitud_TENSION
1a000a50 l     F .text	00000010 exseq_magnitud_TENSION
1a000a60 l     F .text	00000010 effect_magnitud_TENSION_tr0
1a000a70 l     F .text	00000014 react_magnitud_TENSION
1a000a84 l     F .text	0000000c enact_magnitud_TENSION
1a000a90 l     F .text	00000012 enseq_magnitud_TENSION_default
1a000aa2 l     F .text	00000010 effect_magnitud_SELECC_MAGNITUD_tr0
1a000ab2 l     F .text	0000000c enact_magnitud_FRECUENCIA
1a000abe l     F .text	00000012 enseq_magnitud_FRECUENCIA_default
1a000ad0 l     F .text	00000010 effect_magnitud_SELECC_MAGNITUD_tr1
1a000ae0 l     F .text	00000024 react_magnitud_SELECC_MAGNITUD
1a000b04 l     F .text	0000001c enact_forma_CUADRADA
1a000b20 l     F .text	00000012 enseq_forma_CUADRADA_default
1a000b32 l     F .text	00000010 effect_forma_TRIANGULAR_tr0
1a000b42 l     F .text	00000010 effect_forma_SENOIDAL_tr1
1a000b52 l     F .text	00000010 effect_forma_SELECCION_FORMA_tr1
1a000b64 l     F .text	0000001c enact_forma_SENOIDAL
1a000b80 l     F .text	00000012 enseq_forma_SENOIDAL_default
1a000b92 l     F .text	00000010 effect_forma_TRIANGULAR_tr1
1a000ba2 l     F .text	00000032 react_forma_TRIANGULAR
1a000bd4 l     F .text	00000010 effect_forma_CUADRADA_tr0
1a000be4 l     F .text	0000001c enact_forma_TRIANGULAR
1a000c00 l     F .text	00000012 enseq_forma_TRIANGULAR_default
1a000c12 l     F .text	00000010 effect_forma_CUADRADA_tr1
1a000c22 l     F .text	00000032 react_forma_CUADRADA
1a000c54 l     F .text	00000010 effect_forma_SENOIDAL_tr0
1a000c64 l     F .text	00000032 react_forma_SENOIDAL
1a000c96 l     F .text	00000010 effect_forma_SELECCION_FORMA_tr0
1a000ca6 l     F .text	00000024 react_forma_SELECCION_FORMA
1a000cca l     F .text	0000000a enact_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP
1a000cd4 l     F .text	00000012 enseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_default
1a000ce6 l     F .text	00000010 effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START_tr0
1a000cf6 l     F .text	00000010 effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_tr1
1a000d06 l     F .text	00000010 effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_tr1
1a000d16 l     F .text	0000000a enact_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP
1a000d20 l     F .text	00000012 enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_default
1a000d32 l     F .text	00000010 effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START_tr0
1a000d42 l     F .text	00000010 effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_tr1
1a000d52 l     F .text	00000010 effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_tr1
1a000d62 l     F .text	0000000a enact_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN
1a000d6c l     F .text	00000012 enseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_default
1a000d7e l     F .text	00000010 effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START_tr1
1a000d8e l     F .text	00000024 react_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START
1a000db2 l     F .text	00000010 effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_tr0
1a000dc2 l     F .text	00000010 effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_tr0
1a000dd2 l     F .text	0000000a enact_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN
1a000ddc l     F .text	00000012 enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_default
1a000dee l     F .text	00000010 effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START_tr1
1a000dfe l     F .text	00000024 react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START
1a000e22 l     F .text	00000010 effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_tr0
1a000e32 l     F .text	00000010 effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_tr0
1a000e42 l     F .text	0000001a enact_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA
1a000e5c l     F .text	00000012 enseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA_default
1a000e6e l     F .text	00000010 effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_tr2
1a000e7e l     F .text	00000032 react_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP
1a000eb0 l     F .text	00000010 effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_tr2
1a000ec0 l     F .text	00000032 react_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN
1a000ef2 l     F .text	0000001a enact_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA
1a000f0c l     F .text	00000012 enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA_default
1a000f1e l     F .text	00000010 effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_tr2
1a000f2e l     F .text	00000032 react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP
1a000f60 l     F .text	00000010 effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_tr2
1a000f70 l     F .text	00000032 react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN
00000000 l    df *ABS*	00000000 main.c
1000004c l     O .bss	0000002c statechart
00000000 l    df *ABS*	00000000 TimerTicks.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0028b8 l     O .text	00000004 InitClkStates
1a0028bc l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 board.c
1a0014c4 l     F .text	00000044 Board_LED_Init
1a001508 l     F .text	00000040 Board_TEC_Init
1a001548 l     F .text	00000040 Board_GPIO_Init
1a001588 l     F .text	00000030 Board_ADC_Init
1a0015b8 l     F .text	00000038 Board_SPI_Init
1a0015f0 l     F .text	00000024 Board_I2C_Init
1a002934 l     O .text	00000008 GpioButtons
1a00293c l     O .text	0000000c GpioLeds
1a002948 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a001670 l     F .text	00000014 Chip_SSP_GetClockIndex
1a001684 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a0017a4 l     F .text	00000014 Chip_ADC_GetClockIndex
1a0017b8 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a002960 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0019d8 l     F .text	000000a0 pll_calc_divs
1a001a78 l     F .text	0000010c pll_get_frac
1a001b84 l     F .text	0000004c Chip_Clock_FindBaseClock
1a001df8 l     F .text	00000022 Chip_Clock_GetDivRate
10000078 l     O .bss	00000008 audio_usb_pll_freq
1a0029b4 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a001f64 l     F .text	0000002c Chip_UART_GetIndex
1a002a20 l     O .text	00000008 UART_BClock
1a002a28 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000038 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a002114 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_tick.c
10000080 l     O .bss	00000004 callBackFuncParams
10000088 l     O .bss	00000008 tickCounter
10000090 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10000094 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 
1a002b1c l       .init_array	00000000 __init_array_end
1a002b18 l       .bss_RAM5	00000000 __preinit_array_end
1a002b18 l       .init_array	00000000 __init_array_start
1a002b18 l       .bss_RAM5	00000000 __preinit_array_start
1a001c1c g     F .text	0000001c Chip_Clock_GetDividerSource
10000048 g     O .bss	00000001 SysTick_Time_Flag
1a001182 g     F .text	00000002 ej3Iface_opAmplitudUp
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a001668 g     F .text	00000008 __stdio_init
1a001186 g     F .text	00000002 ej3Iface_opSetAmplitudFrec
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a00185e g     F .text	0000000c Chip_ADC_SetResolution
1a00247c g     F .text	0000002c SysTick_Handler
1a001386  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a002b24 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a001136 g     F .text	00000008 ej3Iface_raise_evTECXOprimido
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
53ff6506 g       *ABS*	00000000 __valid_user_code_checksum
1a002b24 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a000fe8 g     F .text	0000013c ej3_runCycle
1a001342 g     F .text	00000044 UpdateTimers
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a001e9a g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0012f0 g     F .text	0000002e IsPendEvent
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a00131e g     F .text	00000024 MarkAsAttEvent
1a002538 g     F .text	00000000 .hidden __aeabi_uldivmod
100000e0 g       .noinit	00000000 _noinit
1a001180 g     F .text	00000002 ej3Iface_opSetForma
100000d8 g     O .bss	00000004 SystemCoreClock
1a001f90 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a001f18 g     F .text	0000004c Chip_Clock_GetRate
1a001144 g     F .text	0000000c myTickHook
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a00144c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a001184 g     F .text	00000002 ej3Iface_opAmplitudDown
1a002568 g     F .text	000002d0 .hidden __udivmoddi4
1a002930 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a002b1c g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a00283c g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a001638 g     F .text	00000030 Board_Init
1a001412  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a0001ba  w    F .text	00000002 RTC_IRQHandler
100000e0 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a001388 g     F .text	00000088 Reset_Handler
1a002400 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a001768 g     F .text	00000038 Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a001bd0 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018a g     F .text	0000001e data_init
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a000fcc g     F .text	0000001c ej3_enter
1a001744 g     F .text	00000024 Chip_I2C_Init
1a00128a g     F .text	00000032 SetNewTimerTick
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a001d8c g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a002a30 g     O .text	000000e6 gpioPinsInit
1a00169c g     F .text	00000012 Chip_SSP_SetClockRate
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a001e74 g     F .text	00000026 Chip_Clock_GetBaseClock
10000048 g       .bss	00000000 _bss
1a00182c g     F .text	00000032 Chip_ADC_SetSampleRate
1a001124 g     F .text	00000012 ej3_raiseTimeEvent
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a0016ae g     F .text	0000003e Chip_SSP_SetBitRate
1a0017a0 g     F .text	00000002 Chip_GPIO_Init
1a00295c g     O .text	00000004 OscRateIn
100000e0 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a001188 g     F .text	00000002 ej3Iface_opSetAmplitudVoltage
1a002148 g     F .text	000001ac gpioInit
1a002838  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0024a8 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a001c38 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a002884 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a0011c4 g     F .text	000000a4 main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a0012bc g     F .text	00000034 UnsetTimerTick
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000fa2 g     F .text	0000002a ej3_init
1a000182  w    F .text	00000002 SVC_Handler
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a001ea8 g     F .text	0000003c Chip_Clock_EnableOpts
1a00116c g     F .text	00000014 ej3_unsetTimer
1a001c54 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a001d0c g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0020c0 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0022f4 g     F .text	0000006a gpioWrite
1a001410  w    F .text	00000002 _fini
1a0017ec g     F .text	00000040 Chip_ADC_Init
100000dc g     O .bss	00000004 g_pUsbApi
1a001414 g     F .text	00000038 Board_SetupMuxing
1a00119a g     F .text	0000002a Buttons_GetStatus_
1a001fe4 g     F .text	000000dc Chip_UART_SetBaudFDR
10000040 g     O .data	00000008 tickRateMS
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
10000098 g     O .bss	00000040 ticks
1b000000 g       .text	00000000 __core_m0app_START__
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a001268 g     F .text	00000022 InitTimerTicks
10000000 g       .data	00000000 _data
1a00118a g     F .text	00000010 ej3Iface_opLED
1a0023c8 g     F .text	00000020 tickCallbackSet
100000e0 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a0016ec g     F .text	00000038 Chip_SSP_Init
1a001150 g     F .text	0000001c ej3_setTimer
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a001614 g     F .text	00000024 Board_Debug_Init
10000048 g       .data	00000000 _edata
1a001724 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a00186c g     F .text	00000158 Chip_SetupCoreClock
1a00113e g     F .text	00000006 ej3Iface_raise_evTECXNoOprimido
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a0019c4 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a002838  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a001ee4 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a00235e g     F .text	00000068 gpioRead
1a0024c4 g     F .text	00000074 boardInit
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a0023e8 g     F .text	00000018 tickPowerSet
1a001e1c g     F .text	00000058 Chip_Clock_SetBaseClock
1a0020f8 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a0014b8 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 89 13 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 06 65 ff 53     }............e.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	7d 24 00 1a                                         }$..

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	a9 24 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     .$..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a002b24 	.word	0x1a002b24
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000048 	.word	0x00000048
1a000120:	1a002b24 	.word	0x1a002b24
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a002b24 	.word	0x1a002b24
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a002b24 	.word	0x1a002b24
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a002b24 	.word	0x1a002b24
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000048 	.word	0x10000048
1a000154:	00000098 	.word	0x00000098
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
#endif

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <clearInEvents>:
	return result;
}

static void clearInEvents(Ej3* handle)
{
	handle->iface.evTECXOprimido_raised = bool_false;
1a000300:	2300      	movs	r3, #0
1a000302:	7203      	strb	r3, [r0, #8]
	handle->iface.evTECXNoOprimido_raised = bool_false;
1a000304:	7403      	strb	r3, [r0, #16]
	handle->internal.siTECXOK_raised = bool_false;
1a000306:	7503      	strb	r3, [r0, #20]
	handle->internal.siMagnitud_raised = bool_false;
1a000308:	7543      	strb	r3, [r0, #21]
	handle->internal.siForma_raised = bool_false;
1a00030a:	7583      	strb	r3, [r0, #22]
	handle->internal.siUp_raised = bool_false;
1a00030c:	75c3      	strb	r3, [r0, #23]
	handle->internal.siDown_raised = bool_false;
1a00030e:	7603      	strb	r3, [r0, #24]
	handle->timeEvents.ej3_TECX_DEBOUNCE_tev0_raised = bool_false;
1a000310:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	handle->timeEvents.ej3_forma_FORMA_SELECCIONADA_tev0_raised = bool_false;
1a000314:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	handle->timeEvents.ej3_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA_tev0_raised = bool_false;
1a000318:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
	handle->timeEvents.ej3_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA_tev0_raised = bool_false;
1a00031c:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
}
1a000320:	4770      	bx	lr

1a000322 <check_TECX_DEBOUNCE_tr0_tr0>:
/* implementations of all internal functions */

static sc_boolean check_TECX_DEBOUNCE_tr0_tr0(const Ej3* handle)
{
	return handle->timeEvents.ej3_TECX_DEBOUNCE_tev0_raised;
}
1a000322:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
1a000326:	4770      	bx	lr

1a000328 <check_TECX_NO_OPRIMIDO_tr0_tr0>:

static sc_boolean check_TECX_NO_OPRIMIDO_tr0_tr0(const Ej3* handle)
{
	return handle->iface.evTECXOprimido_raised;
}
1a000328:	7a00      	ldrb	r0, [r0, #8]
1a00032a:	4770      	bx	lr

1a00032c <check_TECX_OPRIMIDO_tr0_tr0>:

static sc_boolean check_TECX_OPRIMIDO_tr0_tr0(const Ej3* handle)
{
	return handle->iface.evTECXNoOprimido_raised;
}
1a00032c:	7c00      	ldrb	r0, [r0, #16]
1a00032e:	4770      	bx	lr

1a000330 <check_TECX_VALIDACION_tr0_tr0>:

static sc_boolean check_TECX_VALIDACION_tr0_tr0(const Ej3* handle)
{
	return handle->iface.evTECXNoOprimido_raised;
}
1a000330:	7c00      	ldrb	r0, [r0, #16]
1a000332:	4770      	bx	lr

1a000334 <check_TECX_VALIDACION_tr1_tr1>:

static sc_boolean check_TECX_VALIDACION_tr1_tr1(const Ej3* handle)
{
	return handle->iface.evTECXOprimido_raised;
}
1a000334:	7a00      	ldrb	r0, [r0, #8]
1a000336:	4770      	bx	lr

1a000338 <check_main_region_ESPERA_tr0_tr0>:

static sc_boolean check_main_region_ESPERA_tr0_tr0(const Ej3* handle)
{
	return ((handle->internal.siTECXOK_raised) && (handle->internal.viTecla == EJ3_EJ3IFACE_TEC2 && handle->internal.viSetForma == bool_false)) ? bool_true : bool_false;
1a000338:	7d03      	ldrb	r3, [r0, #20]
1a00033a:	b14b      	cbz	r3, 1a000350 <check_main_region_ESPERA_tr0_tr0+0x18>
1a00033c:	69c3      	ldr	r3, [r0, #28]
1a00033e:	2b02      	cmp	r3, #2
1a000340:	d001      	beq.n	1a000346 <check_main_region_ESPERA_tr0_tr0+0xe>
1a000342:	2000      	movs	r0, #0
1a000344:	4770      	bx	lr
1a000346:	f890 3020 	ldrb.w	r3, [r0, #32]
1a00034a:	b11b      	cbz	r3, 1a000354 <check_main_region_ESPERA_tr0_tr0+0x1c>
1a00034c:	2000      	movs	r0, #0
1a00034e:	4770      	bx	lr
1a000350:	2000      	movs	r0, #0
1a000352:	4770      	bx	lr
1a000354:	2001      	movs	r0, #1
}
1a000356:	4770      	bx	lr

1a000358 <check_main_region_ESPERA_tr1_tr1>:

static sc_boolean check_main_region_ESPERA_tr1_tr1(const Ej3* handle)
{
	return ((handle->internal.siTECXOK_raised) && (handle->internal.viTecla == EJ3_EJ3IFACE_TEC1 && handle->internal.viSetMagnitud == bool_false)) ? bool_true : bool_false;
1a000358:	7d03      	ldrb	r3, [r0, #20]
1a00035a:	b14b      	cbz	r3, 1a000370 <check_main_region_ESPERA_tr1_tr1+0x18>
1a00035c:	69c3      	ldr	r3, [r0, #28]
1a00035e:	2b01      	cmp	r3, #1
1a000360:	d001      	beq.n	1a000366 <check_main_region_ESPERA_tr1_tr1+0xe>
1a000362:	2000      	movs	r0, #0
1a000364:	4770      	bx	lr
1a000366:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
1a00036a:	b11b      	cbz	r3, 1a000374 <check_main_region_ESPERA_tr1_tr1+0x1c>
1a00036c:	2000      	movs	r0, #0
1a00036e:	4770      	bx	lr
1a000370:	2000      	movs	r0, #0
1a000372:	4770      	bx	lr
1a000374:	2001      	movs	r0, #1
}
1a000376:	4770      	bx	lr

1a000378 <check_main_region_ESPERA_tr2_tr2>:

static sc_boolean check_main_region_ESPERA_tr2_tr2(const Ej3* handle)
{
	return ((handle->internal.siTECXOK_raised) && (handle->internal.viTecla == EJ3_EJ3IFACE_TEC3)) ? bool_true : bool_false;
1a000378:	7d03      	ldrb	r3, [r0, #20]
1a00037a:	b123      	cbz	r3, 1a000386 <check_main_region_ESPERA_tr2_tr2+0xe>
1a00037c:	69c3      	ldr	r3, [r0, #28]
1a00037e:	2b04      	cmp	r3, #4
1a000380:	d003      	beq.n	1a00038a <check_main_region_ESPERA_tr2_tr2+0x12>
1a000382:	2000      	movs	r0, #0
1a000384:	4770      	bx	lr
1a000386:	2000      	movs	r0, #0
1a000388:	4770      	bx	lr
1a00038a:	2001      	movs	r0, #1
}
1a00038c:	4770      	bx	lr

1a00038e <check_main_region_ESPERA_tr3_tr3>:

static sc_boolean check_main_region_ESPERA_tr3_tr3(const Ej3* handle)
{
	return ((handle->internal.siTECXOK_raised) && (handle->internal.viTecla == EJ3_EJ3IFACE_TEC4)) ? bool_true : bool_false;
1a00038e:	7d03      	ldrb	r3, [r0, #20]
1a000390:	b123      	cbz	r3, 1a00039c <check_main_region_ESPERA_tr3_tr3+0xe>
1a000392:	69c3      	ldr	r3, [r0, #28]
1a000394:	2b08      	cmp	r3, #8
1a000396:	d003      	beq.n	1a0003a0 <check_main_region_ESPERA_tr3_tr3+0x12>
1a000398:	2000      	movs	r0, #0
1a00039a:	4770      	bx	lr
1a00039c:	2000      	movs	r0, #0
1a00039e:	4770      	bx	lr
1a0003a0:	2001      	movs	r0, #1
}
1a0003a2:	4770      	bx	lr

1a0003a4 <check_forma_TRIANGULAR_tr0_tr0>:

static sc_boolean check_forma_TRIANGULAR_tr0_tr0(const Ej3* handle)
{
	return ((handle->internal.siUp_raised) && (handle->internal.viSetForma == bool_true)) ? bool_true : bool_false;
1a0003a4:	7dc3      	ldrb	r3, [r0, #23]
1a0003a6:	b123      	cbz	r3, 1a0003b2 <check_forma_TRIANGULAR_tr0_tr0+0xe>
1a0003a8:	f890 3020 	ldrb.w	r3, [r0, #32]
1a0003ac:	b91b      	cbnz	r3, 1a0003b6 <check_forma_TRIANGULAR_tr0_tr0+0x12>
1a0003ae:	2000      	movs	r0, #0
1a0003b0:	4770      	bx	lr
1a0003b2:	2000      	movs	r0, #0
1a0003b4:	4770      	bx	lr
1a0003b6:	2001      	movs	r0, #1
}
1a0003b8:	4770      	bx	lr

1a0003ba <check_forma_TRIANGULAR_tr1_tr1>:

static sc_boolean check_forma_TRIANGULAR_tr1_tr1(const Ej3* handle)
{
	return ((handle->internal.siDown_raised) && (handle->internal.viSetForma == bool_true)) ? bool_true : bool_false;
1a0003ba:	7e03      	ldrb	r3, [r0, #24]
1a0003bc:	b123      	cbz	r3, 1a0003c8 <check_forma_TRIANGULAR_tr1_tr1+0xe>
1a0003be:	f890 3020 	ldrb.w	r3, [r0, #32]
1a0003c2:	b91b      	cbnz	r3, 1a0003cc <check_forma_TRIANGULAR_tr1_tr1+0x12>
1a0003c4:	2000      	movs	r0, #0
1a0003c6:	4770      	bx	lr
1a0003c8:	2000      	movs	r0, #0
1a0003ca:	4770      	bx	lr
1a0003cc:	2001      	movs	r0, #1
}
1a0003ce:	4770      	bx	lr

1a0003d0 <check_forma_TRIANGULAR_tr2_tr2>:

static sc_boolean check_forma_TRIANGULAR_tr2_tr2(const Ej3* handle)
{
	return ((handle->internal.siForma_raised) && (handle->internal.viSetForma == bool_true)) ? bool_true : bool_false;
1a0003d0:	7d83      	ldrb	r3, [r0, #22]
1a0003d2:	b123      	cbz	r3, 1a0003de <check_forma_TRIANGULAR_tr2_tr2+0xe>
1a0003d4:	f890 3020 	ldrb.w	r3, [r0, #32]
1a0003d8:	b91b      	cbnz	r3, 1a0003e2 <check_forma_TRIANGULAR_tr2_tr2+0x12>
1a0003da:	2000      	movs	r0, #0
1a0003dc:	4770      	bx	lr
1a0003de:	2000      	movs	r0, #0
1a0003e0:	4770      	bx	lr
1a0003e2:	2001      	movs	r0, #1
}
1a0003e4:	4770      	bx	lr

1a0003e6 <check_forma_CUADRADA_tr0_tr0>:

static sc_boolean check_forma_CUADRADA_tr0_tr0(const Ej3* handle)
{
	return ((handle->internal.siUp_raised) && (handle->internal.viSetForma == bool_true)) ? bool_true : bool_false;
1a0003e6:	7dc3      	ldrb	r3, [r0, #23]
1a0003e8:	b123      	cbz	r3, 1a0003f4 <check_forma_CUADRADA_tr0_tr0+0xe>
1a0003ea:	f890 3020 	ldrb.w	r3, [r0, #32]
1a0003ee:	b91b      	cbnz	r3, 1a0003f8 <check_forma_CUADRADA_tr0_tr0+0x12>
1a0003f0:	2000      	movs	r0, #0
1a0003f2:	4770      	bx	lr
1a0003f4:	2000      	movs	r0, #0
1a0003f6:	4770      	bx	lr
1a0003f8:	2001      	movs	r0, #1
}
1a0003fa:	4770      	bx	lr

1a0003fc <check_forma_CUADRADA_tr1_tr1>:

static sc_boolean check_forma_CUADRADA_tr1_tr1(const Ej3* handle)
{
	return ((handle->internal.siDown_raised) && (handle->internal.viSetForma == bool_true)) ? bool_true : bool_false;
1a0003fc:	7e03      	ldrb	r3, [r0, #24]
1a0003fe:	b123      	cbz	r3, 1a00040a <check_forma_CUADRADA_tr1_tr1+0xe>
1a000400:	f890 3020 	ldrb.w	r3, [r0, #32]
1a000404:	b91b      	cbnz	r3, 1a00040e <check_forma_CUADRADA_tr1_tr1+0x12>
1a000406:	2000      	movs	r0, #0
1a000408:	4770      	bx	lr
1a00040a:	2000      	movs	r0, #0
1a00040c:	4770      	bx	lr
1a00040e:	2001      	movs	r0, #1
}
1a000410:	4770      	bx	lr

1a000412 <check_forma_CUADRADA_tr2_tr2>:

static sc_boolean check_forma_CUADRADA_tr2_tr2(const Ej3* handle)
{
	return ((handle->internal.siForma_raised) && (handle->internal.viSetForma == bool_true)) ? bool_true : bool_false;
1a000412:	7d83      	ldrb	r3, [r0, #22]
1a000414:	b123      	cbz	r3, 1a000420 <check_forma_CUADRADA_tr2_tr2+0xe>
1a000416:	f890 3020 	ldrb.w	r3, [r0, #32]
1a00041a:	b91b      	cbnz	r3, 1a000424 <check_forma_CUADRADA_tr2_tr2+0x12>
1a00041c:	2000      	movs	r0, #0
1a00041e:	4770      	bx	lr
1a000420:	2000      	movs	r0, #0
1a000422:	4770      	bx	lr
1a000424:	2001      	movs	r0, #1
}
1a000426:	4770      	bx	lr

1a000428 <check_forma_SENOIDAL_tr0_tr0>:

static sc_boolean check_forma_SENOIDAL_tr0_tr0(const Ej3* handle)
{
	return ((handle->internal.siUp_raised) && (handle->internal.viSetForma == bool_true)) ? bool_true : bool_false;
1a000428:	7dc3      	ldrb	r3, [r0, #23]
1a00042a:	b123      	cbz	r3, 1a000436 <check_forma_SENOIDAL_tr0_tr0+0xe>
1a00042c:	f890 3020 	ldrb.w	r3, [r0, #32]
1a000430:	b91b      	cbnz	r3, 1a00043a <check_forma_SENOIDAL_tr0_tr0+0x12>
1a000432:	2000      	movs	r0, #0
1a000434:	4770      	bx	lr
1a000436:	2000      	movs	r0, #0
1a000438:	4770      	bx	lr
1a00043a:	2001      	movs	r0, #1
}
1a00043c:	4770      	bx	lr

1a00043e <check_forma_SENOIDAL_tr1_tr1>:

static sc_boolean check_forma_SENOIDAL_tr1_tr1(const Ej3* handle)
{
	return ((handle->internal.siDown_raised) && (handle->internal.viSetForma == bool_true)) ? bool_true : bool_false;
1a00043e:	7e03      	ldrb	r3, [r0, #24]
1a000440:	b123      	cbz	r3, 1a00044c <check_forma_SENOIDAL_tr1_tr1+0xe>
1a000442:	f890 3020 	ldrb.w	r3, [r0, #32]
1a000446:	b91b      	cbnz	r3, 1a000450 <check_forma_SENOIDAL_tr1_tr1+0x12>
1a000448:	2000      	movs	r0, #0
1a00044a:	4770      	bx	lr
1a00044c:	2000      	movs	r0, #0
1a00044e:	4770      	bx	lr
1a000450:	2001      	movs	r0, #1
}
1a000452:	4770      	bx	lr

1a000454 <check_forma_SENOIDAL_tr2_tr2>:

static sc_boolean check_forma_SENOIDAL_tr2_tr2(const Ej3* handle)
{
	return ((handle->internal.siForma_raised) && (handle->internal.viSetForma == bool_true)) ? bool_true : bool_false;
1a000454:	7d83      	ldrb	r3, [r0, #22]
1a000456:	b123      	cbz	r3, 1a000462 <check_forma_SENOIDAL_tr2_tr2+0xe>
1a000458:	f890 3020 	ldrb.w	r3, [r0, #32]
1a00045c:	b91b      	cbnz	r3, 1a000466 <check_forma_SENOIDAL_tr2_tr2+0x12>
1a00045e:	2000      	movs	r0, #0
1a000460:	4770      	bx	lr
1a000462:	2000      	movs	r0, #0
1a000464:	4770      	bx	lr
1a000466:	2001      	movs	r0, #1
}
1a000468:	4770      	bx	lr

1a00046a <check_forma_SELECCION_FORMA_tr0_tr0>:

static sc_boolean check_forma_SELECCION_FORMA_tr0_tr0(const Ej3* handle)
{
	return ((handle->internal.siDown_raised) && (handle->internal.viSetForma == bool_true)) ? bool_true : bool_false;
1a00046a:	7e03      	ldrb	r3, [r0, #24]
1a00046c:	b123      	cbz	r3, 1a000478 <check_forma_SELECCION_FORMA_tr0_tr0+0xe>
1a00046e:	f890 3020 	ldrb.w	r3, [r0, #32]
1a000472:	b91b      	cbnz	r3, 1a00047c <check_forma_SELECCION_FORMA_tr0_tr0+0x12>
1a000474:	2000      	movs	r0, #0
1a000476:	4770      	bx	lr
1a000478:	2000      	movs	r0, #0
1a00047a:	4770      	bx	lr
1a00047c:	2001      	movs	r0, #1
}
1a00047e:	4770      	bx	lr

1a000480 <check_forma_SELECCION_FORMA_tr1_tr1>:

static sc_boolean check_forma_SELECCION_FORMA_tr1_tr1(const Ej3* handle)
{
	return ((handle->internal.siUp_raised) && (handle->internal.viSetForma == bool_true)) ? bool_true : bool_false;
1a000480:	7dc3      	ldrb	r3, [r0, #23]
1a000482:	b123      	cbz	r3, 1a00048e <check_forma_SELECCION_FORMA_tr1_tr1+0xe>
1a000484:	f890 3020 	ldrb.w	r3, [r0, #32]
1a000488:	b91b      	cbnz	r3, 1a000492 <check_forma_SELECCION_FORMA_tr1_tr1+0x12>
1a00048a:	2000      	movs	r0, #0
1a00048c:	4770      	bx	lr
1a00048e:	2000      	movs	r0, #0
1a000490:	4770      	bx	lr
1a000492:	2001      	movs	r0, #1
}
1a000494:	4770      	bx	lr

1a000496 <check_forma_FORMA_SELECCIONADA_tr0_tr0>:

static sc_boolean check_forma_FORMA_SELECCIONADA_tr0_tr0(const Ej3* handle)
{
	return handle->timeEvents.ej3_forma_FORMA_SELECCIONADA_tev0_raised;
}
1a000496:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
1a00049a:	4770      	bx	lr

1a00049c <check_magnitud_FRECUENCIA_tr0_tr0>:

static sc_boolean check_magnitud_FRECUENCIA_tr0_tr0(const Ej3* handle)
{
	return handle->internal.siMagnitud_raised;
}
1a00049c:	7d40      	ldrb	r0, [r0, #21]
1a00049e:	4770      	bx	lr

1a0004a0 <check_magnitud_TENSION_tr0_tr0>:

static sc_boolean check_magnitud_TENSION_tr0_tr0(const Ej3* handle)
{
	return handle->internal.siMagnitud_raised;
}
1a0004a0:	7d40      	ldrb	r0, [r0, #21]
1a0004a2:	4770      	bx	lr

1a0004a4 <check_magnitud_WAIT_SELECCION_MAGNITUD_tr0_tr0>:

static sc_boolean check_magnitud_WAIT_SELECCION_MAGNITUD_tr0_tr0(const Ej3* handle)
{
	return handle->internal.siMagnitud_raised;
}
1a0004a4:	7d40      	ldrb	r0, [r0, #21]
1a0004a6:	4770      	bx	lr

1a0004a8 <check_magnitud_SELECC_MAGNITUD_tr0_tr0>:

static sc_boolean check_magnitud_SELECC_MAGNITUD_tr0_tr0(const Ej3* handle)
{
	return handle->internal.siDown_raised;
}
1a0004a8:	7e00      	ldrb	r0, [r0, #24]
1a0004aa:	4770      	bx	lr

1a0004ac <check_magnitud_SELECC_MAGNITUD_tr1_tr1>:

static sc_boolean check_magnitud_SELECC_MAGNITUD_tr1_tr1(const Ej3* handle)
{
	return handle->internal.siUp_raised;
}
1a0004ac:	7dc0      	ldrb	r0, [r0, #23]
1a0004ae:	4770      	bx	lr

1a0004b0 <check_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START_tr0_tr0>:

static sc_boolean check_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START_tr0_tr0(const Ej3* handle)
{
	return handle->internal.siUp_raised;
}
1a0004b0:	7dc0      	ldrb	r0, [r0, #23]
1a0004b2:	4770      	bx	lr

1a0004b4 <check_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START_tr1_tr1>:

static sc_boolean check_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START_tr1_tr1(const Ej3* handle)
{
	return handle->internal.siDown_raised;
}
1a0004b4:	7e00      	ldrb	r0, [r0, #24]
1a0004b6:	4770      	bx	lr

1a0004b8 <check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_tr0_tr0>:

static sc_boolean check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_tr0_tr0(const Ej3* handle)
{
	return handle->internal.siDown_raised;
}
1a0004b8:	7e00      	ldrb	r0, [r0, #24]
1a0004ba:	4770      	bx	lr

1a0004bc <check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_tr1_tr1>:

static sc_boolean check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_tr1_tr1(const Ej3* handle)
{
	return handle->internal.siUp_raised;
}
1a0004bc:	7dc0      	ldrb	r0, [r0, #23]
1a0004be:	4770      	bx	lr

1a0004c0 <check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_tr2_tr2>:

static sc_boolean check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_tr2_tr2(const Ej3* handle)
{
	return handle->internal.siMagnitud_raised;
}
1a0004c0:	7d40      	ldrb	r0, [r0, #21]
1a0004c2:	4770      	bx	lr

1a0004c4 <check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_tr0_tr0>:

static sc_boolean check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_tr0_tr0(const Ej3* handle)
{
	return handle->internal.siDown_raised;
}
1a0004c4:	7e00      	ldrb	r0, [r0, #24]
1a0004c6:	4770      	bx	lr

1a0004c8 <check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_tr1_tr1>:

static sc_boolean check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_tr1_tr1(const Ej3* handle)
{
	return handle->internal.siUp_raised;
}
1a0004c8:	7dc0      	ldrb	r0, [r0, #23]
1a0004ca:	4770      	bx	lr

1a0004cc <check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_tr2_tr2>:

static sc_boolean check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_tr2_tr2(const Ej3* handle)
{
	return handle->internal.siMagnitud_raised;
}
1a0004cc:	7d40      	ldrb	r0, [r0, #21]
1a0004ce:	4770      	bx	lr

1a0004d0 <check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA_tr0_tr0>:

static sc_boolean check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA_tr0_tr0(const Ej3* handle)
{
	return handle->timeEvents.ej3_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA_tev0_raised;
}
1a0004d0:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
1a0004d4:	4770      	bx	lr

1a0004d6 <check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START_tr0_tr0>:

static sc_boolean check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START_tr0_tr0(const Ej3* handle)
{
	return handle->internal.siUp_raised;
}
1a0004d6:	7dc0      	ldrb	r0, [r0, #23]
1a0004d8:	4770      	bx	lr

1a0004da <check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START_tr1_tr1>:

static sc_boolean check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START_tr1_tr1(const Ej3* handle)
{
	return handle->internal.siDown_raised;
}
1a0004da:	7e00      	ldrb	r0, [r0, #24]
1a0004dc:	4770      	bx	lr

1a0004de <check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_tr0_tr0>:

static sc_boolean check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_tr0_tr0(const Ej3* handle)
{
	return handle->internal.siDown_raised;
}
1a0004de:	7e00      	ldrb	r0, [r0, #24]
1a0004e0:	4770      	bx	lr

1a0004e2 <check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_tr1_tr1>:

static sc_boolean check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_tr1_tr1(const Ej3* handle)
{
	return handle->internal.siUp_raised;
}
1a0004e2:	7dc0      	ldrb	r0, [r0, #23]
1a0004e4:	4770      	bx	lr

1a0004e6 <check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_tr2_tr2>:

static sc_boolean check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_tr2_tr2(const Ej3* handle)
{
	return handle->internal.siMagnitud_raised;
}
1a0004e6:	7d40      	ldrb	r0, [r0, #21]
1a0004e8:	4770      	bx	lr

1a0004ea <check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_tr0_tr0>:

static sc_boolean check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_tr0_tr0(const Ej3* handle)
{
	return handle->internal.siDown_raised;
}
1a0004ea:	7e00      	ldrb	r0, [r0, #24]
1a0004ec:	4770      	bx	lr

1a0004ee <check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_tr1_tr1>:

static sc_boolean check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_tr1_tr1(const Ej3* handle)
{
	return handle->internal.siUp_raised;
}
1a0004ee:	7dc0      	ldrb	r0, [r0, #23]
1a0004f0:	4770      	bx	lr

1a0004f2 <check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_tr2_tr2>:

static sc_boolean check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_tr2_tr2(const Ej3* handle)
{
	return handle->internal.siMagnitud_raised;
}
1a0004f2:	7d40      	ldrb	r0, [r0, #21]
1a0004f4:	4770      	bx	lr

1a0004f6 <check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA_tr0_tr0>:

static sc_boolean check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA_tr0_tr0(const Ej3* handle)
{
	return handle->timeEvents.ej3_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA_tev0_raised;
}
1a0004f6:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
1a0004fa:	4770      	bx	lr

1a0004fc <enact_TECX_OPRIMIDO>:

/* Entry action for state 'OPRIMIDO'. */
static void enact_TECX_OPRIMIDO(Ej3* handle)
{
	/* Entry action for state 'OPRIMIDO'. */
	handle->internal.siTECXOK_raised = bool_true;
1a0004fc:	2301      	movs	r3, #1
1a0004fe:	7503      	strb	r3, [r0, #20]
	handle->internal.viTecla = handle->iface.evTECXOprimido_value;
1a000500:	68c3      	ldr	r3, [r0, #12]
1a000502:	61c3      	str	r3, [r0, #28]
}
1a000504:	4770      	bx	lr

1a000506 <enact_forma_SELECCION_FORMA>:

/* Entry action for state 'SELECCION_FORMA'. */
static void enact_forma_SELECCION_FORMA(Ej3* handle)
{
	/* Entry action for state 'SELECCION_FORMA'. */
	handle->internal.viSetForma = bool_false;
1a000506:	2300      	movs	r3, #0
1a000508:	f880 3020 	strb.w	r3, [r0, #32]
}
1a00050c:	4770      	bx	lr

1a00050e <enact_magnitud_WAIT_SELECCION_MAGNITUD>:

/* Entry action for state 'WAIT_SELECCION_MAGNITUD'. */
static void enact_magnitud_WAIT_SELECCION_MAGNITUD(Ej3* handle)
{
	/* Entry action for state 'WAIT_SELECCION_MAGNITUD'. */
	handle->internal.viSetMagnitud = bool_false;
1a00050e:	2300      	movs	r3, #0
1a000510:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
}
1a000514:	4770      	bx	lr

1a000516 <enact_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START>:

/* Entry action for state 'MAGNITUD_START'. */
static void enact_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START(Ej3* handle)
{
	/* Entry action for state 'MAGNITUD_START'. */
	handle->internal.viSetMagnitudValue = 0;
1a000516:	2300      	movs	r3, #0
1a000518:	6243      	str	r3, [r0, #36]	; 0x24
}
1a00051a:	4770      	bx	lr

1a00051c <enact_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START>:

/* Entry action for state 'MAGNITUD_START'. */
static void enact_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START(Ej3* handle)
{
	/* Entry action for state 'MAGNITUD_START'. */
	handle->internal.viSetMagnitudValue = 0;
1a00051c:	2300      	movs	r3, #0
1a00051e:	6243      	str	r3, [r0, #36]	; 0x24
}
1a000520:	4770      	bx	lr

1a000522 <enseq_TECX_NO_OPRIMIDO_default>:

/* 'default' enter sequence for state NO_OPRIMIDO */
static void enseq_TECX_NO_OPRIMIDO_default(Ej3* handle)
{
	/* 'default' enter sequence for state NO_OPRIMIDO */
	handle->stateConfVector[0] = Ej3_TECX_NO_OPRIMIDO;
1a000522:	2302      	movs	r3, #2
1a000524:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a000526:	2300      	movs	r3, #0
1a000528:	6043      	str	r3, [r0, #4]
}
1a00052a:	4770      	bx	lr

1a00052c <enseq_TECX_OPRIMIDO_default>:

/* 'default' enter sequence for state OPRIMIDO */
static void enseq_TECX_OPRIMIDO_default(Ej3* handle)
{
1a00052c:	b510      	push	{r4, lr}
1a00052e:	4604      	mov	r4, r0
	/* 'default' enter sequence for state OPRIMIDO */
	enact_TECX_OPRIMIDO(handle);
1a000530:	f7ff ffe4 	bl	1a0004fc <enact_TECX_OPRIMIDO>
	handle->stateConfVector[0] = Ej3_TECX_OPRIMIDO;
1a000534:	2303      	movs	r3, #3
1a000536:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
1a000538:	2300      	movs	r3, #0
1a00053a:	6063      	str	r3, [r4, #4]
}
1a00053c:	bd10      	pop	{r4, pc}

1a00053e <enseq_TECX_VALIDACION_default>:

/* 'default' enter sequence for state VALIDACION */
static void enseq_TECX_VALIDACION_default(Ej3* handle)
{
	/* 'default' enter sequence for state VALIDACION */
	handle->stateConfVector[0] = Ej3_TECX_VALIDACION;
1a00053e:	2304      	movs	r3, #4
1a000540:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a000542:	2300      	movs	r3, #0
1a000544:	6043      	str	r3, [r0, #4]
}
1a000546:	4770      	bx	lr

1a000548 <enseq_main_region_ESPERA_default>:

/* 'default' enter sequence for state ESPERA */
static void enseq_main_region_ESPERA_default(Ej3* handle)
{
	/* 'default' enter sequence for state ESPERA */
	handle->stateConfVector[1] = Ej3_main_region_ESPERA;
1a000548:	2305      	movs	r3, #5
1a00054a:	7043      	strb	r3, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a00054c:	2301      	movs	r3, #1
1a00054e:	6043      	str	r3, [r0, #4]
}
1a000550:	4770      	bx	lr

1a000552 <enseq_forma_SELECCION_FORMA_default>:
	handle->stateConfVectorPosition = 2;
}

/* 'default' enter sequence for state SELECCION_FORMA */
static void enseq_forma_SELECCION_FORMA_default(Ej3* handle)
{
1a000552:	b510      	push	{r4, lr}
1a000554:	4604      	mov	r4, r0
	/* 'default' enter sequence for state SELECCION_FORMA */
	enact_forma_SELECCION_FORMA(handle);
1a000556:	f7ff ffd6 	bl	1a000506 <enact_forma_SELECCION_FORMA>
	handle->stateConfVector[2] = Ej3_forma_SELECCION_FORMA;
1a00055a:	2309      	movs	r3, #9
1a00055c:	70a3      	strb	r3, [r4, #2]
	handle->stateConfVectorPosition = 2;
1a00055e:	2302      	movs	r3, #2
1a000560:	6063      	str	r3, [r4, #4]
}
1a000562:	bd10      	pop	{r4, pc}

1a000564 <enseq_magnitud_WAIT_SELECCION_MAGNITUD_default>:
	handle->stateConfVectorPosition = 3;
}

/* 'default' enter sequence for state WAIT_SELECCION_MAGNITUD */
static void enseq_magnitud_WAIT_SELECCION_MAGNITUD_default(Ej3* handle)
{
1a000564:	b510      	push	{r4, lr}
1a000566:	4604      	mov	r4, r0
	/* 'default' enter sequence for state WAIT_SELECCION_MAGNITUD */
	enact_magnitud_WAIT_SELECCION_MAGNITUD(handle);
1a000568:	f7ff ffd1 	bl	1a00050e <enact_magnitud_WAIT_SELECCION_MAGNITUD>
	handle->stateConfVector[3] = Ej3_magnitud_WAIT_SELECCION_MAGNITUD;
1a00056c:	230d      	movs	r3, #13
1a00056e:	70e3      	strb	r3, [r4, #3]
	handle->stateConfVectorPosition = 3;
1a000570:	2303      	movs	r3, #3
1a000572:	6063      	str	r3, [r4, #4]
}
1a000574:	bd10      	pop	{r4, pc}

1a000576 <enseq_magnitud_SELECC_MAGNITUD_default>:

/* 'default' enter sequence for state SELECC_MAGNITUD */
static void enseq_magnitud_SELECC_MAGNITUD_default(Ej3* handle)
{
	/* 'default' enter sequence for state SELECC_MAGNITUD */
	handle->stateConfVector[3] = Ej3_magnitud_SELECC_MAGNITUD;
1a000576:	230e      	movs	r3, #14
1a000578:	70c3      	strb	r3, [r0, #3]
	handle->stateConfVectorPosition = 3;
1a00057a:	2303      	movs	r3, #3
1a00057c:	6043      	str	r3, [r0, #4]
}
1a00057e:	4770      	bx	lr

1a000580 <enseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START_default>:
	enseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_default(handle);
}

/* 'default' enter sequence for state MAGNITUD_START */
static void enseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START_default(Ej3* handle)
{
1a000580:	b510      	push	{r4, lr}
1a000582:	4604      	mov	r4, r0
	/* 'default' enter sequence for state MAGNITUD_START */
	enact_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START(handle);
1a000584:	f7ff ffc7 	bl	1a000516 <enact_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START>
	handle->stateConfVector[3] = Ej3_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START;
1a000588:	2310      	movs	r3, #16
1a00058a:	70e3      	strb	r3, [r4, #3]
	handle->stateConfVectorPosition = 3;
1a00058c:	2303      	movs	r3, #3
1a00058e:	6063      	str	r3, [r4, #4]
}
1a000590:	bd10      	pop	{r4, pc}

1a000592 <enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START_default>:
	enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_default(handle);
}

/* 'default' enter sequence for state MAGNITUD_START */
static void enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START_default(Ej3* handle)
{
1a000592:	b510      	push	{r4, lr}
1a000594:	4604      	mov	r4, r0
	/* 'default' enter sequence for state MAGNITUD_START */
	enact_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START(handle);
1a000596:	f7ff ffc1 	bl	1a00051c <enact_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START>
	handle->stateConfVector[3] = Ej3_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START;
1a00059a:	2315      	movs	r3, #21
1a00059c:	70e3      	strb	r3, [r4, #3]
	handle->stateConfVectorPosition = 3;
1a00059e:	2303      	movs	r3, #3
1a0005a0:	6063      	str	r3, [r4, #4]
}
1a0005a2:	bd10      	pop	{r4, pc}

1a0005a4 <exseq_TECX_NO_OPRIMIDO>:

/* Default exit sequence for state NO_OPRIMIDO */
static void exseq_TECX_NO_OPRIMIDO(Ej3* handle)
{
	/* Default exit sequence for state NO_OPRIMIDO */
	handle->stateConfVector[0] = Ej3_last_state;
1a0005a4:	2300      	movs	r3, #0
1a0005a6:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a0005a8:	6043      	str	r3, [r0, #4]
}
1a0005aa:	4770      	bx	lr

1a0005ac <exseq_TECX_OPRIMIDO>:

/* Default exit sequence for state OPRIMIDO */
static void exseq_TECX_OPRIMIDO(Ej3* handle)
{
	/* Default exit sequence for state OPRIMIDO */
	handle->stateConfVector[0] = Ej3_last_state;
1a0005ac:	2300      	movs	r3, #0
1a0005ae:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a0005b0:	6043      	str	r3, [r0, #4]
}
1a0005b2:	4770      	bx	lr

1a0005b4 <effect_TECX_OPRIMIDO_tr0>:
{
1a0005b4:	b510      	push	{r4, lr}
1a0005b6:	4604      	mov	r4, r0
	exseq_TECX_OPRIMIDO(handle);
1a0005b8:	f7ff fff8 	bl	1a0005ac <exseq_TECX_OPRIMIDO>
	enseq_TECX_NO_OPRIMIDO_default(handle);
1a0005bc:	4620      	mov	r0, r4
1a0005be:	f7ff ffb0 	bl	1a000522 <enseq_TECX_NO_OPRIMIDO_default>
}
1a0005c2:	bd10      	pop	{r4, pc}

1a0005c4 <exseq_TECX_VALIDACION>:

/* Default exit sequence for state VALIDACION */
static void exseq_TECX_VALIDACION(Ej3* handle)
{
	/* Default exit sequence for state VALIDACION */
	handle->stateConfVector[0] = Ej3_last_state;
1a0005c4:	2300      	movs	r3, #0
1a0005c6:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a0005c8:	6043      	str	r3, [r0, #4]
}
1a0005ca:	4770      	bx	lr

1a0005cc <effect_TECX_VALIDACION_tr0>:
{
1a0005cc:	b510      	push	{r4, lr}
1a0005ce:	4604      	mov	r4, r0
	exseq_TECX_VALIDACION(handle);
1a0005d0:	f7ff fff8 	bl	1a0005c4 <exseq_TECX_VALIDACION>
	enseq_TECX_NO_OPRIMIDO_default(handle);
1a0005d4:	4620      	mov	r0, r4
1a0005d6:	f7ff ffa4 	bl	1a000522 <enseq_TECX_NO_OPRIMIDO_default>
}
1a0005da:	bd10      	pop	{r4, pc}

1a0005dc <effect_TECX_VALIDACION_tr1>:
{
1a0005dc:	b510      	push	{r4, lr}
1a0005de:	4604      	mov	r4, r0
	exseq_TECX_VALIDACION(handle);
1a0005e0:	f7ff fff0 	bl	1a0005c4 <exseq_TECX_VALIDACION>
	enseq_TECX_OPRIMIDO_default(handle);
1a0005e4:	4620      	mov	r0, r4
1a0005e6:	f7ff ffa1 	bl	1a00052c <enseq_TECX_OPRIMIDO_default>
}
1a0005ea:	bd10      	pop	{r4, pc}

1a0005ec <exseq_main_region_ESPERA>:

/* Default exit sequence for state ESPERA */
static void exseq_main_region_ESPERA(Ej3* handle)
{
	/* Default exit sequence for state ESPERA */
	handle->stateConfVector[1] = Ej3_last_state;
1a0005ec:	2300      	movs	r3, #0
1a0005ee:	7043      	strb	r3, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a0005f0:	2301      	movs	r3, #1
1a0005f2:	6043      	str	r3, [r0, #4]
}
1a0005f4:	4770      	bx	lr

1a0005f6 <effect_main_region_ESPERA_tr0>:
{
1a0005f6:	b510      	push	{r4, lr}
1a0005f8:	4604      	mov	r4, r0
	exseq_main_region_ESPERA(handle);
1a0005fa:	f7ff fff7 	bl	1a0005ec <exseq_main_region_ESPERA>
	handle->internal.siMagnitud_raised = bool_true;
1a0005fe:	2301      	movs	r3, #1
1a000600:	7563      	strb	r3, [r4, #21]
	handle->internal.viSetMagnitud = bool_true;
1a000602:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	enseq_main_region_ESPERA_default(handle);
1a000606:	4620      	mov	r0, r4
1a000608:	f7ff ff9e 	bl	1a000548 <enseq_main_region_ESPERA_default>
}
1a00060c:	bd10      	pop	{r4, pc}

1a00060e <effect_main_region_ESPERA_tr1>:
{
1a00060e:	b510      	push	{r4, lr}
1a000610:	4604      	mov	r4, r0
	exseq_main_region_ESPERA(handle);
1a000612:	f7ff ffeb 	bl	1a0005ec <exseq_main_region_ESPERA>
	handle->internal.siForma_raised = bool_true;
1a000616:	2301      	movs	r3, #1
1a000618:	75a3      	strb	r3, [r4, #22]
	handle->internal.viSetForma = bool_true;
1a00061a:	f884 3020 	strb.w	r3, [r4, #32]
	enseq_main_region_ESPERA_default(handle);
1a00061e:	4620      	mov	r0, r4
1a000620:	f7ff ff92 	bl	1a000548 <enseq_main_region_ESPERA_default>
}
1a000624:	bd10      	pop	{r4, pc}

1a000626 <effect_main_region_ESPERA_tr2>:
{
1a000626:	b510      	push	{r4, lr}
1a000628:	4604      	mov	r4, r0
	exseq_main_region_ESPERA(handle);
1a00062a:	f7ff ffdf 	bl	1a0005ec <exseq_main_region_ESPERA>
	handle->internal.siUp_raised = bool_true;
1a00062e:	2301      	movs	r3, #1
1a000630:	75e3      	strb	r3, [r4, #23]
	enseq_main_region_ESPERA_default(handle);
1a000632:	4620      	mov	r0, r4
1a000634:	f7ff ff88 	bl	1a000548 <enseq_main_region_ESPERA_default>
}
1a000638:	bd10      	pop	{r4, pc}

1a00063a <effect_main_region_ESPERA_tr3>:
{
1a00063a:	b510      	push	{r4, lr}
1a00063c:	4604      	mov	r4, r0
	exseq_main_region_ESPERA(handle);
1a00063e:	f7ff ffd5 	bl	1a0005ec <exseq_main_region_ESPERA>
	handle->internal.siDown_raised = bool_true;
1a000642:	2301      	movs	r3, #1
1a000644:	7623      	strb	r3, [r4, #24]
	enseq_main_region_ESPERA_default(handle);
1a000646:	4620      	mov	r0, r4
1a000648:	f7ff ff7e 	bl	1a000548 <enseq_main_region_ESPERA_default>
}
1a00064c:	bd10      	pop	{r4, pc}

1a00064e <exseq_forma_SELECCION_FORMA>:

/* Default exit sequence for state SELECCION_FORMA */
static void exseq_forma_SELECCION_FORMA(Ej3* handle)
{
	/* Default exit sequence for state SELECCION_FORMA */
	handle->stateConfVector[2] = Ej3_last_state;
1a00064e:	2300      	movs	r3, #0
1a000650:	7083      	strb	r3, [r0, #2]
	handle->stateConfVectorPosition = 2;
1a000652:	2302      	movs	r3, #2
1a000654:	6043      	str	r3, [r0, #4]
}
1a000656:	4770      	bx	lr

1a000658 <exseq_magnitud_WAIT_SELECCION_MAGNITUD>:

/* Default exit sequence for state WAIT_SELECCION_MAGNITUD */
static void exseq_magnitud_WAIT_SELECCION_MAGNITUD(Ej3* handle)
{
	/* Default exit sequence for state WAIT_SELECCION_MAGNITUD */
	handle->stateConfVector[3] = Ej3_last_state;
1a000658:	2300      	movs	r3, #0
1a00065a:	70c3      	strb	r3, [r0, #3]
	handle->stateConfVectorPosition = 3;
1a00065c:	2303      	movs	r3, #3
1a00065e:	6043      	str	r3, [r0, #4]
}
1a000660:	4770      	bx	lr

1a000662 <effect_magnitud_WAIT_SELECCION_MAGNITUD_tr0>:
{
1a000662:	b510      	push	{r4, lr}
1a000664:	4604      	mov	r4, r0
	exseq_magnitud_WAIT_SELECCION_MAGNITUD(handle);
1a000666:	f7ff fff7 	bl	1a000658 <exseq_magnitud_WAIT_SELECCION_MAGNITUD>
	enseq_magnitud_SELECC_MAGNITUD_default(handle);
1a00066a:	4620      	mov	r0, r4
1a00066c:	f7ff ff83 	bl	1a000576 <enseq_magnitud_SELECC_MAGNITUD_default>
}
1a000670:	bd10      	pop	{r4, pc}

1a000672 <exseq_magnitud_SELECC_MAGNITUD>:

/* Default exit sequence for state SELECC_MAGNITUD */
static void exseq_magnitud_SELECC_MAGNITUD(Ej3* handle)
{
	/* Default exit sequence for state SELECC_MAGNITUD */
	handle->stateConfVector[3] = Ej3_last_state;
1a000672:	2300      	movs	r3, #0
1a000674:	70c3      	strb	r3, [r0, #3]
	handle->stateConfVectorPosition = 3;
1a000676:	2303      	movs	r3, #3
1a000678:	6043      	str	r3, [r0, #4]
}
1a00067a:	4770      	bx	lr

1a00067c <exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START>:

/* Default exit sequence for state MAGNITUD_START */
static void exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START(Ej3* handle)
{
	/* Default exit sequence for state MAGNITUD_START */
	handle->stateConfVector[3] = Ej3_last_state;
1a00067c:	2300      	movs	r3, #0
1a00067e:	70c3      	strb	r3, [r0, #3]
	handle->stateConfVectorPosition = 3;
1a000680:	2303      	movs	r3, #3
1a000682:	6043      	str	r3, [r0, #4]
}
1a000684:	4770      	bx	lr

1a000686 <exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP>:

/* Default exit sequence for state AMPLI_UP */
static void exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP(Ej3* handle)
{
	/* Default exit sequence for state AMPLI_UP */
	handle->stateConfVector[3] = Ej3_last_state;
1a000686:	2300      	movs	r3, #0
1a000688:	70c3      	strb	r3, [r0, #3]
	handle->stateConfVectorPosition = 3;
1a00068a:	2303      	movs	r3, #3
1a00068c:	6043      	str	r3, [r0, #4]
}
1a00068e:	4770      	bx	lr

1a000690 <exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN>:

/* Default exit sequence for state AMPLI_DOWN */
static void exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN(Ej3* handle)
{
	/* Default exit sequence for state AMPLI_DOWN */
	handle->stateConfVector[3] = Ej3_last_state;
1a000690:	2300      	movs	r3, #0
1a000692:	70c3      	strb	r3, [r0, #3]
	handle->stateConfVectorPosition = 3;
1a000694:	2303      	movs	r3, #3
1a000696:	6043      	str	r3, [r0, #4]
}
1a000698:	4770      	bx	lr

1a00069a <exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START>:

/* Default exit sequence for state MAGNITUD_START */
static void exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START(Ej3* handle)
{
	/* Default exit sequence for state MAGNITUD_START */
	handle->stateConfVector[3] = Ej3_last_state;
1a00069a:	2300      	movs	r3, #0
1a00069c:	70c3      	strb	r3, [r0, #3]
	handle->stateConfVectorPosition = 3;
1a00069e:	2303      	movs	r3, #3
1a0006a0:	6043      	str	r3, [r0, #4]
}
1a0006a2:	4770      	bx	lr

1a0006a4 <exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP>:

/* Default exit sequence for state AMPLI_UP */
static void exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP(Ej3* handle)
{
	/* Default exit sequence for state AMPLI_UP */
	handle->stateConfVector[3] = Ej3_last_state;
1a0006a4:	2300      	movs	r3, #0
1a0006a6:	70c3      	strb	r3, [r0, #3]
	handle->stateConfVectorPosition = 3;
1a0006a8:	2303      	movs	r3, #3
1a0006aa:	6043      	str	r3, [r0, #4]
}
1a0006ac:	4770      	bx	lr

1a0006ae <exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN>:

/* Default exit sequence for state AMPLI_DOWN */
static void exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN(Ej3* handle)
{
	/* Default exit sequence for state AMPLI_DOWN */
	handle->stateConfVector[3] = Ej3_last_state;
1a0006ae:	2300      	movs	r3, #0
1a0006b0:	70c3      	strb	r3, [r0, #3]
	handle->stateConfVectorPosition = 3;
1a0006b2:	2303      	movs	r3, #3
1a0006b4:	6043      	str	r3, [r0, #4]
}
1a0006b6:	4770      	bx	lr

1a0006b8 <react_TECX_OPRIMIDO>:
	} 
}

/* The reactions of state OPRIMIDO. */
static void react_TECX_OPRIMIDO(Ej3* handle)
{
1a0006b8:	b510      	push	{r4, lr}
1a0006ba:	4604      	mov	r4, r0
	/* The reactions of state OPRIMIDO. */
	if (check_TECX_OPRIMIDO_tr0_tr0(handle) == bool_true)
1a0006bc:	f7ff fe36 	bl	1a00032c <check_TECX_OPRIMIDO_tr0_tr0>
1a0006c0:	b900      	cbnz	r0, 1a0006c4 <react_TECX_OPRIMIDO+0xc>
	{ 
		effect_TECX_OPRIMIDO_tr0(handle);
	} 
}
1a0006c2:	bd10      	pop	{r4, pc}
		effect_TECX_OPRIMIDO_tr0(handle);
1a0006c4:	4620      	mov	r0, r4
1a0006c6:	f7ff ff75 	bl	1a0005b4 <effect_TECX_OPRIMIDO_tr0>
}
1a0006ca:	e7fa      	b.n	1a0006c2 <react_TECX_OPRIMIDO+0xa>

1a0006cc <react_TECX_VALIDACION>:

/* The reactions of state VALIDACION. */
static void react_TECX_VALIDACION(Ej3* handle)
{
1a0006cc:	b510      	push	{r4, lr}
1a0006ce:	4604      	mov	r4, r0
	/* The reactions of state VALIDACION. */
	if (check_TECX_VALIDACION_tr0_tr0(handle) == bool_true)
1a0006d0:	f7ff fe2e 	bl	1a000330 <check_TECX_VALIDACION_tr0_tr0>
1a0006d4:	b920      	cbnz	r0, 1a0006e0 <react_TECX_VALIDACION+0x14>
	{ 
		effect_TECX_VALIDACION_tr0(handle);
	}  else
	{
		if (check_TECX_VALIDACION_tr1_tr1(handle) == bool_true)
1a0006d6:	4620      	mov	r0, r4
1a0006d8:	f7ff fe2c 	bl	1a000334 <check_TECX_VALIDACION_tr1_tr1>
1a0006dc:	b920      	cbnz	r0, 1a0006e8 <react_TECX_VALIDACION+0x1c>
		{ 
			effect_TECX_VALIDACION_tr1(handle);
		} 
	}
}
1a0006de:	bd10      	pop	{r4, pc}
		effect_TECX_VALIDACION_tr0(handle);
1a0006e0:	4620      	mov	r0, r4
1a0006e2:	f7ff ff73 	bl	1a0005cc <effect_TECX_VALIDACION_tr0>
1a0006e6:	e7fa      	b.n	1a0006de <react_TECX_VALIDACION+0x12>
			effect_TECX_VALIDACION_tr1(handle);
1a0006e8:	4620      	mov	r0, r4
1a0006ea:	f7ff ff77 	bl	1a0005dc <effect_TECX_VALIDACION_tr1>
}
1a0006ee:	e7f6      	b.n	1a0006de <react_TECX_VALIDACION+0x12>

1a0006f0 <react_main_region_ESPERA>:

/* The reactions of state ESPERA. */
static void react_main_region_ESPERA(Ej3* handle)
{
1a0006f0:	b510      	push	{r4, lr}
1a0006f2:	4604      	mov	r4, r0
	/* The reactions of state ESPERA. */
	if (check_main_region_ESPERA_tr0_tr0(handle) == bool_true)
1a0006f4:	f7ff fe20 	bl	1a000338 <check_main_region_ESPERA_tr0_tr0>
1a0006f8:	b978      	cbnz	r0, 1a00071a <react_main_region_ESPERA+0x2a>
	{ 
		effect_main_region_ESPERA_tr0(handle);
	}  else
	{
		if (check_main_region_ESPERA_tr1_tr1(handle) == bool_true)
1a0006fa:	4620      	mov	r0, r4
1a0006fc:	f7ff fe2c 	bl	1a000358 <check_main_region_ESPERA_tr1_tr1>
1a000700:	b978      	cbnz	r0, 1a000722 <react_main_region_ESPERA+0x32>
		{ 
			effect_main_region_ESPERA_tr1(handle);
		}  else
		{
			if (check_main_region_ESPERA_tr2_tr2(handle) == bool_true)
1a000702:	4620      	mov	r0, r4
1a000704:	f7ff fe38 	bl	1a000378 <check_main_region_ESPERA_tr2_tr2>
1a000708:	b978      	cbnz	r0, 1a00072a <react_main_region_ESPERA+0x3a>
			{ 
				effect_main_region_ESPERA_tr2(handle);
			}  else
			{
				if (check_main_region_ESPERA_tr3_tr3(handle) == bool_true)
1a00070a:	4620      	mov	r0, r4
1a00070c:	f7ff fe3f 	bl	1a00038e <check_main_region_ESPERA_tr3_tr3>
1a000710:	b130      	cbz	r0, 1a000720 <react_main_region_ESPERA+0x30>
				{ 
					effect_main_region_ESPERA_tr3(handle);
1a000712:	4620      	mov	r0, r4
1a000714:	f7ff ff91 	bl	1a00063a <effect_main_region_ESPERA_tr3>
				} 
			}
		}
	}
}
1a000718:	e002      	b.n	1a000720 <react_main_region_ESPERA+0x30>
		effect_main_region_ESPERA_tr0(handle);
1a00071a:	4620      	mov	r0, r4
1a00071c:	f7ff ff6b 	bl	1a0005f6 <effect_main_region_ESPERA_tr0>
}
1a000720:	bd10      	pop	{r4, pc}
			effect_main_region_ESPERA_tr1(handle);
1a000722:	4620      	mov	r0, r4
1a000724:	f7ff ff73 	bl	1a00060e <effect_main_region_ESPERA_tr1>
1a000728:	e7fa      	b.n	1a000720 <react_main_region_ESPERA+0x30>
				effect_main_region_ESPERA_tr2(handle);
1a00072a:	4620      	mov	r0, r4
1a00072c:	f7ff ff7b 	bl	1a000626 <effect_main_region_ESPERA_tr2>
1a000730:	e7f6      	b.n	1a000720 <react_main_region_ESPERA+0x30>

1a000732 <react_magnitud_WAIT_SELECCION_MAGNITUD>:
	} 
}

/* The reactions of state WAIT_SELECCION_MAGNITUD. */
static void react_magnitud_WAIT_SELECCION_MAGNITUD(Ej3* handle)
{
1a000732:	b510      	push	{r4, lr}
1a000734:	4604      	mov	r4, r0
	/* The reactions of state WAIT_SELECCION_MAGNITUD. */
	if (check_magnitud_WAIT_SELECCION_MAGNITUD_tr0_tr0(handle) == bool_true)
1a000736:	f7ff feb5 	bl	1a0004a4 <check_magnitud_WAIT_SELECCION_MAGNITUD_tr0_tr0>
1a00073a:	b900      	cbnz	r0, 1a00073e <react_magnitud_WAIT_SELECCION_MAGNITUD+0xc>
	{ 
		effect_magnitud_WAIT_SELECCION_MAGNITUD_tr0(handle);
	} 
}
1a00073c:	bd10      	pop	{r4, pc}
		effect_magnitud_WAIT_SELECCION_MAGNITUD_tr0(handle);
1a00073e:	4620      	mov	r0, r4
1a000740:	f7ff ff8f 	bl	1a000662 <effect_magnitud_WAIT_SELECCION_MAGNITUD_tr0>
}
1a000744:	e7fa      	b.n	1a00073c <react_magnitud_WAIT_SELECCION_MAGNITUD+0xa>

1a000746 <react_TECX__entry_Default>:
	} 
}

/* Default react sequence for initial entry  */
static void react_TECX__entry_Default(Ej3* handle)
{
1a000746:	b508      	push	{r3, lr}
	/* Default react sequence for initial entry  */
	enseq_TECX_NO_OPRIMIDO_default(handle);
1a000748:	f7ff feeb 	bl	1a000522 <enseq_TECX_NO_OPRIMIDO_default>
}
1a00074c:	bd08      	pop	{r3, pc}

1a00074e <enseq_TECX_default>:
{
1a00074e:	b508      	push	{r3, lr}
	react_TECX__entry_Default(handle);
1a000750:	f7ff fff9 	bl	1a000746 <react_TECX__entry_Default>
}
1a000754:	bd08      	pop	{r3, pc}

1a000756 <react_main_region__entry_Default>:

/* Default react sequence for initial entry  */
static void react_main_region__entry_Default(Ej3* handle)
{
1a000756:	b508      	push	{r3, lr}
	/* Default react sequence for initial entry  */
	enseq_main_region_ESPERA_default(handle);
1a000758:	f7ff fef6 	bl	1a000548 <enseq_main_region_ESPERA_default>
}
1a00075c:	bd08      	pop	{r3, pc}

1a00075e <enseq_main_region_default>:
{
1a00075e:	b508      	push	{r3, lr}
	react_main_region__entry_Default(handle);
1a000760:	f7ff fff9 	bl	1a000756 <react_main_region__entry_Default>
}
1a000764:	bd08      	pop	{r3, pc}

1a000766 <react_forma__entry_Default>:

/* Default react sequence for initial entry  */
static void react_forma__entry_Default(Ej3* handle)
{
1a000766:	b508      	push	{r3, lr}
	/* Default react sequence for initial entry  */
	enseq_forma_SELECCION_FORMA_default(handle);
1a000768:	f7ff fef3 	bl	1a000552 <enseq_forma_SELECCION_FORMA_default>
}
1a00076c:	bd08      	pop	{r3, pc}

1a00076e <enseq_forma_default>:
{
1a00076e:	b508      	push	{r3, lr}
	react_forma__entry_Default(handle);
1a000770:	f7ff fff9 	bl	1a000766 <react_forma__entry_Default>
}
1a000774:	bd08      	pop	{r3, pc}

1a000776 <react_magnitud__entry_Default>:

/* Default react sequence for initial entry  */
static void react_magnitud__entry_Default(Ej3* handle)
{
1a000776:	b508      	push	{r3, lr}
	/* Default react sequence for initial entry  */
	enseq_magnitud_WAIT_SELECCION_MAGNITUD_default(handle);
1a000778:	f7ff fef4 	bl	1a000564 <enseq_magnitud_WAIT_SELECCION_MAGNITUD_default>
}
1a00077c:	bd08      	pop	{r3, pc}

1a00077e <enseq_magnitud_default>:
{
1a00077e:	b508      	push	{r3, lr}
	react_magnitud__entry_Default(handle);
1a000780:	f7ff fff9 	bl	1a000776 <react_magnitud__entry_Default>
}
1a000784:	bd08      	pop	{r3, pc}

1a000786 <react_magnitud_ELEGIR_AMPLITUD_FREC_r1__entry_Default>:

/* Default react sequence for initial entry  */
static void react_magnitud_ELEGIR_AMPLITUD_FREC_r1__entry_Default(Ej3* handle)
{
1a000786:	b508      	push	{r3, lr}
	/* Default react sequence for initial entry  */
	enseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START_default(handle);
1a000788:	f7ff fefa 	bl	1a000580 <enseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START_default>
}
1a00078c:	bd08      	pop	{r3, pc}

1a00078e <enseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_default>:
{
1a00078e:	b508      	push	{r3, lr}
	react_magnitud_ELEGIR_AMPLITUD_FREC_r1__entry_Default(handle);
1a000790:	f7ff fff9 	bl	1a000786 <react_magnitud_ELEGIR_AMPLITUD_FREC_r1__entry_Default>
}
1a000794:	bd08      	pop	{r3, pc}

1a000796 <enseq_magnitud_ELEGIR_AMPLITUD_FREC_default>:
{
1a000796:	b508      	push	{r3, lr}
	enseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_default(handle);
1a000798:	f7ff fff9 	bl	1a00078e <enseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_default>
}
1a00079c:	bd08      	pop	{r3, pc}

1a00079e <react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1__entry_Default>:

/* Default react sequence for initial entry  */
static void react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1__entry_Default(Ej3* handle)
{
1a00079e:	b508      	push	{r3, lr}
	/* Default react sequence for initial entry  */
	enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START_default(handle);
1a0007a0:	f7ff fef7 	bl	1a000592 <enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START_default>
}
1a0007a4:	bd08      	pop	{r3, pc}

1a0007a6 <enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_default>:
{
1a0007a6:	b508      	push	{r3, lr}
	react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1__entry_Default(handle);
1a0007a8:	f7ff fff9 	bl	1a00079e <react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1__entry_Default>
}
1a0007ac:	bd08      	pop	{r3, pc}

1a0007ae <enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_default>:
{
1a0007ae:	b508      	push	{r3, lr}
	enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_default(handle);
1a0007b0:	f7ff fff9 	bl	1a0007a6 <enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_default>
}
1a0007b4:	bd08      	pop	{r3, pc}

1a0007b6 <exact_TECX_DEBOUNCE>:
{
1a0007b6:	b508      	push	{r3, lr}
	ej3_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.ej3_TECX_DEBOUNCE_tev0_raised) );		
1a0007b8:	f100 0128 	add.w	r1, r0, #40	; 0x28
1a0007bc:	f000 fcd6 	bl	1a00116c <ej3_unsetTimer>
}
1a0007c0:	bd08      	pop	{r3, pc}

1a0007c2 <exseq_TECX_DEBOUNCE>:
{
1a0007c2:	b508      	push	{r3, lr}
	handle->stateConfVector[0] = Ej3_last_state;
1a0007c4:	2200      	movs	r2, #0
1a0007c6:	7002      	strb	r2, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a0007c8:	6042      	str	r2, [r0, #4]
	exact_TECX_DEBOUNCE(handle);
1a0007ca:	f7ff fff4 	bl	1a0007b6 <exact_TECX_DEBOUNCE>
}
1a0007ce:	bd08      	pop	{r3, pc}

1a0007d0 <effect_TECX_DEBOUNCE_tr0>:
{
1a0007d0:	b510      	push	{r4, lr}
1a0007d2:	4604      	mov	r4, r0
	exseq_TECX_DEBOUNCE(handle);
1a0007d4:	f7ff fff5 	bl	1a0007c2 <exseq_TECX_DEBOUNCE>
	enseq_TECX_VALIDACION_default(handle);
1a0007d8:	4620      	mov	r0, r4
1a0007da:	f7ff feb0 	bl	1a00053e <enseq_TECX_VALIDACION_default>
}
1a0007de:	bd10      	pop	{r4, pc}

1a0007e0 <react_TECX_DEBOUNCE>:
{
1a0007e0:	b510      	push	{r4, lr}
1a0007e2:	4604      	mov	r4, r0
	if (check_TECX_DEBOUNCE_tr0_tr0(handle) == bool_true)
1a0007e4:	f7ff fd9d 	bl	1a000322 <check_TECX_DEBOUNCE_tr0_tr0>
1a0007e8:	b900      	cbnz	r0, 1a0007ec <react_TECX_DEBOUNCE+0xc>
}
1a0007ea:	bd10      	pop	{r4, pc}
		effect_TECX_DEBOUNCE_tr0(handle);
1a0007ec:	4620      	mov	r0, r4
1a0007ee:	f7ff ffef 	bl	1a0007d0 <effect_TECX_DEBOUNCE_tr0>
}
1a0007f2:	e7fa      	b.n	1a0007ea <react_TECX_DEBOUNCE+0xa>

1a0007f4 <exact_forma_FORMA_SELECCIONADA>:
{
1a0007f4:	b508      	push	{r3, lr}
	ej3_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.ej3_forma_FORMA_SELECCIONADA_tev0_raised) );		
1a0007f6:	f100 0129 	add.w	r1, r0, #41	; 0x29
1a0007fa:	f000 fcb7 	bl	1a00116c <ej3_unsetTimer>
}
1a0007fe:	bd08      	pop	{r3, pc}

1a000800 <exseq_forma_FORMA_SELECCIONADA>:
{
1a000800:	b508      	push	{r3, lr}
	handle->stateConfVector[2] = Ej3_last_state;
1a000802:	2200      	movs	r2, #0
1a000804:	7082      	strb	r2, [r0, #2]
	handle->stateConfVectorPosition = 2;
1a000806:	2202      	movs	r2, #2
1a000808:	6042      	str	r2, [r0, #4]
	exact_forma_FORMA_SELECCIONADA(handle);
1a00080a:	f7ff fff3 	bl	1a0007f4 <exact_forma_FORMA_SELECCIONADA>
}
1a00080e:	bd08      	pop	{r3, pc}

1a000810 <effect_forma_FORMA_SELECCIONADA_tr0>:
{
1a000810:	b510      	push	{r4, lr}
1a000812:	4604      	mov	r4, r0
	exseq_forma_FORMA_SELECCIONADA(handle);
1a000814:	f7ff fff4 	bl	1a000800 <exseq_forma_FORMA_SELECCIONADA>
	enseq_forma_SELECCION_FORMA_default(handle);
1a000818:	4620      	mov	r0, r4
1a00081a:	f7ff fe9a 	bl	1a000552 <enseq_forma_SELECCION_FORMA_default>
}
1a00081e:	bd10      	pop	{r4, pc}

1a000820 <react_forma_FORMA_SELECCIONADA>:
{
1a000820:	b510      	push	{r4, lr}
1a000822:	4604      	mov	r4, r0
	if (check_forma_FORMA_SELECCIONADA_tr0_tr0(handle) == bool_true)
1a000824:	f7ff fe37 	bl	1a000496 <check_forma_FORMA_SELECCIONADA_tr0_tr0>
1a000828:	b900      	cbnz	r0, 1a00082c <react_forma_FORMA_SELECCIONADA+0xc>
}
1a00082a:	bd10      	pop	{r4, pc}
		effect_forma_FORMA_SELECCIONADA_tr0(handle);
1a00082c:	4620      	mov	r0, r4
1a00082e:	f7ff ffef 	bl	1a000810 <effect_forma_FORMA_SELECCIONADA_tr0>
}
1a000832:	e7fa      	b.n	1a00082a <react_forma_FORMA_SELECCIONADA+0xa>

1a000834 <exact_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA>:
{
1a000834:	b508      	push	{r3, lr}
	ej3_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.ej3_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA_tev0_raised) );		
1a000836:	f100 012a 	add.w	r1, r0, #42	; 0x2a
1a00083a:	f000 fc97 	bl	1a00116c <ej3_unsetTimer>
}
1a00083e:	bd08      	pop	{r3, pc}

1a000840 <exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA>:
{
1a000840:	b508      	push	{r3, lr}
	handle->stateConfVector[3] = Ej3_last_state;
1a000842:	2200      	movs	r2, #0
1a000844:	70c2      	strb	r2, [r0, #3]
	handle->stateConfVectorPosition = 3;
1a000846:	2203      	movs	r2, #3
1a000848:	6042      	str	r2, [r0, #4]
	exact_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA(handle);
1a00084a:	f7ff fff3 	bl	1a000834 <exact_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA>
}
1a00084e:	bd08      	pop	{r3, pc}

1a000850 <exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1>:
{
1a000850:	b508      	push	{r3, lr}
	switch(handle->stateConfVector[ 3 ])
1a000852:	78c3      	ldrb	r3, [r0, #3]
1a000854:	3b10      	subs	r3, #16
1a000856:	2b03      	cmp	r3, #3
1a000858:	d805      	bhi.n	1a000866 <exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1+0x16>
1a00085a:	e8df f003 	tbb	[pc, r3]
1a00085e:	0502      	.short	0x0502
1a000860:	0b08      	.short	0x0b08
			exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START(handle);
1a000862:	f7ff ff0b 	bl	1a00067c <exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START>
}
1a000866:	bd08      	pop	{r3, pc}
			exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP(handle);
1a000868:	f7ff ff0d 	bl	1a000686 <exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP>
			break;
1a00086c:	e7fb      	b.n	1a000866 <exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1+0x16>
			exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN(handle);
1a00086e:	f7ff ff0f 	bl	1a000690 <exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN>
			break;
1a000872:	e7f8      	b.n	1a000866 <exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1+0x16>
			exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA(handle);
1a000874:	f7ff ffe4 	bl	1a000840 <exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA>
}
1a000878:	e7f5      	b.n	1a000866 <exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1+0x16>

1a00087a <exseq_magnitud_ELEGIR_AMPLITUD_FREC>:
{
1a00087a:	b508      	push	{r3, lr}
	exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1(handle);
1a00087c:	f7ff ffe8 	bl	1a000850 <exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1>
}
1a000880:	bd08      	pop	{r3, pc}

1a000882 <effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA_tr0>:
{
1a000882:	b510      	push	{r4, lr}
1a000884:	4604      	mov	r4, r0
	exseq_magnitud_ELEGIR_AMPLITUD_FREC(handle);
1a000886:	f7ff fff8 	bl	1a00087a <exseq_magnitud_ELEGIR_AMPLITUD_FREC>
	enseq_magnitud_WAIT_SELECCION_MAGNITUD_default(handle);
1a00088a:	4620      	mov	r0, r4
1a00088c:	f7ff fe6a 	bl	1a000564 <enseq_magnitud_WAIT_SELECCION_MAGNITUD_default>
}
1a000890:	bd10      	pop	{r4, pc}

1a000892 <react_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA>:
{
1a000892:	b510      	push	{r4, lr}
1a000894:	4604      	mov	r4, r0
	if (check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA_tr0_tr0(handle) == bool_true)
1a000896:	f7ff fe1b 	bl	1a0004d0 <check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA_tr0_tr0>
1a00089a:	b900      	cbnz	r0, 1a00089e <react_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA+0xc>
}
1a00089c:	bd10      	pop	{r4, pc}
		effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA_tr0(handle);
1a00089e:	4620      	mov	r0, r4
1a0008a0:	f7ff ffef 	bl	1a000882 <effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA_tr0>
}
1a0008a4:	e7fa      	b.n	1a00089c <react_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA+0xa>

1a0008a6 <exact_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA>:
{
1a0008a6:	b508      	push	{r3, lr}
	ej3_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.ej3_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA_tev0_raised) );		
1a0008a8:	f100 012b 	add.w	r1, r0, #43	; 0x2b
1a0008ac:	f000 fc5e 	bl	1a00116c <ej3_unsetTimer>
}
1a0008b0:	bd08      	pop	{r3, pc}

1a0008b2 <exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA>:
{
1a0008b2:	b508      	push	{r3, lr}
	handle->stateConfVector[3] = Ej3_last_state;
1a0008b4:	2200      	movs	r2, #0
1a0008b6:	70c2      	strb	r2, [r0, #3]
	handle->stateConfVectorPosition = 3;
1a0008b8:	2203      	movs	r2, #3
1a0008ba:	6042      	str	r2, [r0, #4]
	exact_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA(handle);
1a0008bc:	f7ff fff3 	bl	1a0008a6 <exact_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA>
}
1a0008c0:	bd08      	pop	{r3, pc}

1a0008c2 <exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1>:
{
1a0008c2:	b508      	push	{r3, lr}
	switch(handle->stateConfVector[ 3 ])
1a0008c4:	78c3      	ldrb	r3, [r0, #3]
1a0008c6:	3b15      	subs	r3, #21
1a0008c8:	2b03      	cmp	r3, #3
1a0008ca:	d805      	bhi.n	1a0008d8 <exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1+0x16>
1a0008cc:	e8df f003 	tbb	[pc, r3]
1a0008d0:	0b080502 	.word	0x0b080502
			exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START(handle);
1a0008d4:	f7ff fee1 	bl	1a00069a <exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START>
}
1a0008d8:	bd08      	pop	{r3, pc}
			exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP(handle);
1a0008da:	f7ff fee3 	bl	1a0006a4 <exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP>
			break;
1a0008de:	e7fb      	b.n	1a0008d8 <exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1+0x16>
			exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN(handle);
1a0008e0:	f7ff fee5 	bl	1a0006ae <exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN>
			break;
1a0008e4:	e7f8      	b.n	1a0008d8 <exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1+0x16>
			exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA(handle);
1a0008e6:	f7ff ffe4 	bl	1a0008b2 <exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA>
}
1a0008ea:	e7f5      	b.n	1a0008d8 <exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1+0x16>

1a0008ec <exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE>:
{
1a0008ec:	b508      	push	{r3, lr}
	exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1(handle);
1a0008ee:	f7ff ffe8 	bl	1a0008c2 <exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1>
}
1a0008f2:	bd08      	pop	{r3, pc}

1a0008f4 <effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA_tr0>:
{
1a0008f4:	b510      	push	{r4, lr}
1a0008f6:	4604      	mov	r4, r0
	exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE(handle);
1a0008f8:	f7ff fff8 	bl	1a0008ec <exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE>
	enseq_magnitud_WAIT_SELECCION_MAGNITUD_default(handle);
1a0008fc:	4620      	mov	r0, r4
1a0008fe:	f7ff fe31 	bl	1a000564 <enseq_magnitud_WAIT_SELECCION_MAGNITUD_default>
}
1a000902:	bd10      	pop	{r4, pc}

1a000904 <react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA>:
{
1a000904:	b510      	push	{r4, lr}
1a000906:	4604      	mov	r4, r0
	if (check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA_tr0_tr0(handle) == bool_true)
1a000908:	f7ff fdf5 	bl	1a0004f6 <check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA_tr0_tr0>
1a00090c:	b900      	cbnz	r0, 1a000910 <react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA+0xc>
}
1a00090e:	bd10      	pop	{r4, pc}
		effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA_tr0(handle);
1a000910:	4620      	mov	r0, r4
1a000912:	f7ff ffef 	bl	1a0008f4 <effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA_tr0>
}
1a000916:	e7fa      	b.n	1a00090e <react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA+0xa>

1a000918 <enact_TECX_DEBOUNCE>:
{
1a000918:	b508      	push	{r3, lr}
	ej3_setTimer(handle, (sc_eventid) &(handle->timeEvents.ej3_TECX_DEBOUNCE_tev0_raised) , 100, bool_false);
1a00091a:	2300      	movs	r3, #0
1a00091c:	2264      	movs	r2, #100	; 0x64
1a00091e:	f100 0128 	add.w	r1, r0, #40	; 0x28
1a000922:	f000 fc15 	bl	1a001150 <ej3_setTimer>
}
1a000926:	bd08      	pop	{r3, pc}

1a000928 <enseq_TECX_DEBOUNCE_default>:
{
1a000928:	b510      	push	{r4, lr}
1a00092a:	4604      	mov	r4, r0
	enact_TECX_DEBOUNCE(handle);
1a00092c:	f7ff fff4 	bl	1a000918 <enact_TECX_DEBOUNCE>
	handle->stateConfVector[0] = Ej3_TECX_DEBOUNCE;
1a000930:	2301      	movs	r3, #1
1a000932:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
1a000934:	2300      	movs	r3, #0
1a000936:	6063      	str	r3, [r4, #4]
}
1a000938:	bd10      	pop	{r4, pc}

1a00093a <effect_TECX_NO_OPRIMIDO_tr0>:
{
1a00093a:	b510      	push	{r4, lr}
1a00093c:	4604      	mov	r4, r0
	exseq_TECX_NO_OPRIMIDO(handle);
1a00093e:	f7ff fe31 	bl	1a0005a4 <exseq_TECX_NO_OPRIMIDO>
	enseq_TECX_DEBOUNCE_default(handle);
1a000942:	4620      	mov	r0, r4
1a000944:	f7ff fff0 	bl	1a000928 <enseq_TECX_DEBOUNCE_default>
}
1a000948:	bd10      	pop	{r4, pc}

1a00094a <react_TECX_NO_OPRIMIDO>:
{
1a00094a:	b510      	push	{r4, lr}
1a00094c:	4604      	mov	r4, r0
	if (check_TECX_NO_OPRIMIDO_tr0_tr0(handle) == bool_true)
1a00094e:	f7ff fceb 	bl	1a000328 <check_TECX_NO_OPRIMIDO_tr0_tr0>
1a000952:	b900      	cbnz	r0, 1a000956 <react_TECX_NO_OPRIMIDO+0xc>
}
1a000954:	bd10      	pop	{r4, pc}
		effect_TECX_NO_OPRIMIDO_tr0(handle);
1a000956:	4620      	mov	r0, r4
1a000958:	f7ff ffef 	bl	1a00093a <effect_TECX_NO_OPRIMIDO_tr0>
}
1a00095c:	e7fa      	b.n	1a000954 <react_TECX_NO_OPRIMIDO+0xa>

1a00095e <enact_forma_FORMA_SELECCIONADA>:
{
1a00095e:	b508      	push	{r3, lr}
	ej3_setTimer(handle, (sc_eventid) &(handle->timeEvents.ej3_forma_FORMA_SELECCIONADA_tev0_raised) , 10, bool_false);
1a000960:	2300      	movs	r3, #0
1a000962:	220a      	movs	r2, #10
1a000964:	f100 0129 	add.w	r1, r0, #41	; 0x29
1a000968:	f000 fbf2 	bl	1a001150 <ej3_setTimer>
}
1a00096c:	bd08      	pop	{r3, pc}

1a00096e <enseq_forma_FORMA_SELECCIONADA_default>:
{
1a00096e:	b510      	push	{r4, lr}
1a000970:	4604      	mov	r4, r0
	enact_forma_FORMA_SELECCIONADA(handle);
1a000972:	f7ff fff4 	bl	1a00095e <enact_forma_FORMA_SELECCIONADA>
	handle->stateConfVector[2] = Ej3_forma_FORMA_SELECCIONADA;
1a000976:	230a      	movs	r3, #10
1a000978:	70a3      	strb	r3, [r4, #2]
	handle->stateConfVectorPosition = 2;
1a00097a:	2302      	movs	r3, #2
1a00097c:	6063      	str	r3, [r4, #4]
}
1a00097e:	bd10      	pop	{r4, pc}

1a000980 <exact_forma_TRIANGULAR>:
{
1a000980:	b508      	push	{r3, lr}
	ej3Iface_opLED(handle, EJ3_EJ3IFACE_LED3, EJ3_EJ3IFACE_LED_OFF);
1a000982:	2200      	movs	r2, #0
1a000984:	2105      	movs	r1, #5
1a000986:	f000 fc00 	bl	1a00118a <ej3Iface_opLED>
}
1a00098a:	bd08      	pop	{r3, pc}

1a00098c <exseq_forma_TRIANGULAR>:
{
1a00098c:	b508      	push	{r3, lr}
	handle->stateConfVector[2] = Ej3_last_state;
1a00098e:	2200      	movs	r2, #0
1a000990:	7082      	strb	r2, [r0, #2]
	handle->stateConfVectorPosition = 2;
1a000992:	2202      	movs	r2, #2
1a000994:	6042      	str	r2, [r0, #4]
	exact_forma_TRIANGULAR(handle);
1a000996:	f7ff fff3 	bl	1a000980 <exact_forma_TRIANGULAR>
}
1a00099a:	bd08      	pop	{r3, pc}

1a00099c <effect_forma_TRIANGULAR_tr2>:
{
1a00099c:	b510      	push	{r4, lr}
1a00099e:	4604      	mov	r4, r0
	exseq_forma_TRIANGULAR(handle);
1a0009a0:	f7ff fff4 	bl	1a00098c <exseq_forma_TRIANGULAR>
	enseq_forma_FORMA_SELECCIONADA_default(handle);
1a0009a4:	4620      	mov	r0, r4
1a0009a6:	f7ff ffe2 	bl	1a00096e <enseq_forma_FORMA_SELECCIONADA_default>
}
1a0009aa:	bd10      	pop	{r4, pc}

1a0009ac <exact_forma_CUADRADA>:
{
1a0009ac:	b508      	push	{r3, lr}
	ej3Iface_opLED(handle, EJ3_EJ3IFACE_LED1, EJ3_EJ3IFACE_LED_OFF);
1a0009ae:	2200      	movs	r2, #0
1a0009b0:	2103      	movs	r1, #3
1a0009b2:	f000 fbea 	bl	1a00118a <ej3Iface_opLED>
}
1a0009b6:	bd08      	pop	{r3, pc}

1a0009b8 <exseq_forma_CUADRADA>:
{
1a0009b8:	b508      	push	{r3, lr}
	handle->stateConfVector[2] = Ej3_last_state;
1a0009ba:	2200      	movs	r2, #0
1a0009bc:	7082      	strb	r2, [r0, #2]
	handle->stateConfVectorPosition = 2;
1a0009be:	2202      	movs	r2, #2
1a0009c0:	6042      	str	r2, [r0, #4]
	exact_forma_CUADRADA(handle);
1a0009c2:	f7ff fff3 	bl	1a0009ac <exact_forma_CUADRADA>
}
1a0009c6:	bd08      	pop	{r3, pc}

1a0009c8 <effect_forma_CUADRADA_tr2>:
{
1a0009c8:	b510      	push	{r4, lr}
1a0009ca:	4604      	mov	r4, r0
	exseq_forma_CUADRADA(handle);
1a0009cc:	f7ff fff4 	bl	1a0009b8 <exseq_forma_CUADRADA>
	enseq_forma_FORMA_SELECCIONADA_default(handle);
1a0009d0:	4620      	mov	r0, r4
1a0009d2:	f7ff ffcc 	bl	1a00096e <enseq_forma_FORMA_SELECCIONADA_default>
}
1a0009d6:	bd10      	pop	{r4, pc}

1a0009d8 <exact_forma_SENOIDAL>:
{
1a0009d8:	b508      	push	{r3, lr}
	ej3Iface_opLED(handle, EJ3_EJ3IFACE_LED2, EJ3_EJ3IFACE_LED_OFF);
1a0009da:	2200      	movs	r2, #0
1a0009dc:	2104      	movs	r1, #4
1a0009de:	f000 fbd4 	bl	1a00118a <ej3Iface_opLED>
}
1a0009e2:	bd08      	pop	{r3, pc}

1a0009e4 <exseq_forma_SENOIDAL>:
{
1a0009e4:	b508      	push	{r3, lr}
	handle->stateConfVector[2] = Ej3_last_state;
1a0009e6:	2200      	movs	r2, #0
1a0009e8:	7082      	strb	r2, [r0, #2]
	handle->stateConfVectorPosition = 2;
1a0009ea:	2202      	movs	r2, #2
1a0009ec:	6042      	str	r2, [r0, #4]
	exact_forma_SENOIDAL(handle);
1a0009ee:	f7ff fff3 	bl	1a0009d8 <exact_forma_SENOIDAL>
}
1a0009f2:	bd08      	pop	{r3, pc}

1a0009f4 <effect_forma_SENOIDAL_tr2>:
{
1a0009f4:	b510      	push	{r4, lr}
1a0009f6:	4604      	mov	r4, r0
	exseq_forma_SENOIDAL(handle);
1a0009f8:	f7ff fff4 	bl	1a0009e4 <exseq_forma_SENOIDAL>
	enseq_forma_FORMA_SELECCIONADA_default(handle);
1a0009fc:	4620      	mov	r0, r4
1a0009fe:	f7ff ffb6 	bl	1a00096e <enseq_forma_FORMA_SELECCIONADA_default>
}
1a000a02:	bd10      	pop	{r4, pc}

1a000a04 <exact_magnitud_FRECUENCIA>:
{
1a000a04:	b508      	push	{r3, lr}
	ej3Iface_opLED(handle, EJ3_EJ3IFACE_LED2, EJ3_EJ3IFACE_LED_OFF);
1a000a06:	2200      	movs	r2, #0
1a000a08:	2104      	movs	r1, #4
1a000a0a:	f000 fbbe 	bl	1a00118a <ej3Iface_opLED>
}
1a000a0e:	bd08      	pop	{r3, pc}

1a000a10 <exseq_magnitud_FRECUENCIA>:
{
1a000a10:	b508      	push	{r3, lr}
	handle->stateConfVector[3] = Ej3_last_state;
1a000a12:	2200      	movs	r2, #0
1a000a14:	70c2      	strb	r2, [r0, #3]
	handle->stateConfVectorPosition = 3;
1a000a16:	2203      	movs	r2, #3
1a000a18:	6042      	str	r2, [r0, #4]
	exact_magnitud_FRECUENCIA(handle);
1a000a1a:	f7ff fff3 	bl	1a000a04 <exact_magnitud_FRECUENCIA>
}
1a000a1e:	bd08      	pop	{r3, pc}

1a000a20 <effect_magnitud_FRECUENCIA_tr0>:
{
1a000a20:	b510      	push	{r4, lr}
1a000a22:	4604      	mov	r4, r0
	exseq_magnitud_FRECUENCIA(handle);
1a000a24:	f7ff fff4 	bl	1a000a10 <exseq_magnitud_FRECUENCIA>
	enseq_magnitud_ELEGIR_AMPLITUD_FREC_default(handle);
1a000a28:	4620      	mov	r0, r4
1a000a2a:	f7ff feb4 	bl	1a000796 <enseq_magnitud_ELEGIR_AMPLITUD_FREC_default>
}
1a000a2e:	bd10      	pop	{r4, pc}

1a000a30 <react_magnitud_FRECUENCIA>:
{
1a000a30:	b510      	push	{r4, lr}
1a000a32:	4604      	mov	r4, r0
	if (check_magnitud_FRECUENCIA_tr0_tr0(handle) == bool_true)
1a000a34:	f7ff fd32 	bl	1a00049c <check_magnitud_FRECUENCIA_tr0_tr0>
1a000a38:	b900      	cbnz	r0, 1a000a3c <react_magnitud_FRECUENCIA+0xc>
}
1a000a3a:	bd10      	pop	{r4, pc}
		effect_magnitud_FRECUENCIA_tr0(handle);
1a000a3c:	4620      	mov	r0, r4
1a000a3e:	f7ff ffef 	bl	1a000a20 <effect_magnitud_FRECUENCIA_tr0>
}
1a000a42:	e7fa      	b.n	1a000a3a <react_magnitud_FRECUENCIA+0xa>

1a000a44 <exact_magnitud_TENSION>:
{
1a000a44:	b508      	push	{r3, lr}
	ej3Iface_opLED(handle, EJ3_EJ3IFACE_LED3, EJ3_EJ3IFACE_LED_OFF);
1a000a46:	2200      	movs	r2, #0
1a000a48:	2105      	movs	r1, #5
1a000a4a:	f000 fb9e 	bl	1a00118a <ej3Iface_opLED>
}
1a000a4e:	bd08      	pop	{r3, pc}

1a000a50 <exseq_magnitud_TENSION>:
{
1a000a50:	b508      	push	{r3, lr}
	handle->stateConfVector[3] = Ej3_last_state;
1a000a52:	2200      	movs	r2, #0
1a000a54:	70c2      	strb	r2, [r0, #3]
	handle->stateConfVectorPosition = 3;
1a000a56:	2203      	movs	r2, #3
1a000a58:	6042      	str	r2, [r0, #4]
	exact_magnitud_TENSION(handle);
1a000a5a:	f7ff fff3 	bl	1a000a44 <exact_magnitud_TENSION>
}
1a000a5e:	bd08      	pop	{r3, pc}

1a000a60 <effect_magnitud_TENSION_tr0>:
{
1a000a60:	b510      	push	{r4, lr}
1a000a62:	4604      	mov	r4, r0
	exseq_magnitud_TENSION(handle);
1a000a64:	f7ff fff4 	bl	1a000a50 <exseq_magnitud_TENSION>
	enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_default(handle);
1a000a68:	4620      	mov	r0, r4
1a000a6a:	f7ff fea0 	bl	1a0007ae <enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_default>
}
1a000a6e:	bd10      	pop	{r4, pc}

1a000a70 <react_magnitud_TENSION>:
{
1a000a70:	b510      	push	{r4, lr}
1a000a72:	4604      	mov	r4, r0
	if (check_magnitud_TENSION_tr0_tr0(handle) == bool_true)
1a000a74:	f7ff fd14 	bl	1a0004a0 <check_magnitud_TENSION_tr0_tr0>
1a000a78:	b900      	cbnz	r0, 1a000a7c <react_magnitud_TENSION+0xc>
}
1a000a7a:	bd10      	pop	{r4, pc}
		effect_magnitud_TENSION_tr0(handle);
1a000a7c:	4620      	mov	r0, r4
1a000a7e:	f7ff ffef 	bl	1a000a60 <effect_magnitud_TENSION_tr0>
}
1a000a82:	e7fa      	b.n	1a000a7a <react_magnitud_TENSION+0xa>

1a000a84 <enact_magnitud_TENSION>:
{
1a000a84:	b508      	push	{r3, lr}
	ej3Iface_opLED(handle, EJ3_EJ3IFACE_LED3, EJ3_EJ3IFACE_LED_ON);
1a000a86:	2201      	movs	r2, #1
1a000a88:	2105      	movs	r1, #5
1a000a8a:	f000 fb7e 	bl	1a00118a <ej3Iface_opLED>
}
1a000a8e:	bd08      	pop	{r3, pc}

1a000a90 <enseq_magnitud_TENSION_default>:
{
1a000a90:	b510      	push	{r4, lr}
1a000a92:	4604      	mov	r4, r0
	enact_magnitud_TENSION(handle);
1a000a94:	f7ff fff6 	bl	1a000a84 <enact_magnitud_TENSION>
	handle->stateConfVector[3] = Ej3_magnitud_TENSION;
1a000a98:	230c      	movs	r3, #12
1a000a9a:	70e3      	strb	r3, [r4, #3]
	handle->stateConfVectorPosition = 3;
1a000a9c:	2303      	movs	r3, #3
1a000a9e:	6063      	str	r3, [r4, #4]
}
1a000aa0:	bd10      	pop	{r4, pc}

1a000aa2 <effect_magnitud_SELECC_MAGNITUD_tr0>:
{
1a000aa2:	b510      	push	{r4, lr}
1a000aa4:	4604      	mov	r4, r0
	exseq_magnitud_SELECC_MAGNITUD(handle);
1a000aa6:	f7ff fde4 	bl	1a000672 <exseq_magnitud_SELECC_MAGNITUD>
	enseq_magnitud_TENSION_default(handle);
1a000aaa:	4620      	mov	r0, r4
1a000aac:	f7ff fff0 	bl	1a000a90 <enseq_magnitud_TENSION_default>
}
1a000ab0:	bd10      	pop	{r4, pc}

1a000ab2 <enact_magnitud_FRECUENCIA>:
{
1a000ab2:	b508      	push	{r3, lr}
	ej3Iface_opLED(handle, EJ3_EJ3IFACE_LED2, EJ3_EJ3IFACE_LED_ON);
1a000ab4:	2201      	movs	r2, #1
1a000ab6:	2104      	movs	r1, #4
1a000ab8:	f000 fb67 	bl	1a00118a <ej3Iface_opLED>
}
1a000abc:	bd08      	pop	{r3, pc}

1a000abe <enseq_magnitud_FRECUENCIA_default>:
{
1a000abe:	b510      	push	{r4, lr}
1a000ac0:	4604      	mov	r4, r0
	enact_magnitud_FRECUENCIA(handle);
1a000ac2:	f7ff fff6 	bl	1a000ab2 <enact_magnitud_FRECUENCIA>
	handle->stateConfVector[3] = Ej3_magnitud_FRECUENCIA;
1a000ac6:	230b      	movs	r3, #11
1a000ac8:	70e3      	strb	r3, [r4, #3]
	handle->stateConfVectorPosition = 3;
1a000aca:	2303      	movs	r3, #3
1a000acc:	6063      	str	r3, [r4, #4]
}
1a000ace:	bd10      	pop	{r4, pc}

1a000ad0 <effect_magnitud_SELECC_MAGNITUD_tr1>:
{
1a000ad0:	b510      	push	{r4, lr}
1a000ad2:	4604      	mov	r4, r0
	exseq_magnitud_SELECC_MAGNITUD(handle);
1a000ad4:	f7ff fdcd 	bl	1a000672 <exseq_magnitud_SELECC_MAGNITUD>
	enseq_magnitud_FRECUENCIA_default(handle);
1a000ad8:	4620      	mov	r0, r4
1a000ada:	f7ff fff0 	bl	1a000abe <enseq_magnitud_FRECUENCIA_default>
}
1a000ade:	bd10      	pop	{r4, pc}

1a000ae0 <react_magnitud_SELECC_MAGNITUD>:
{
1a000ae0:	b510      	push	{r4, lr}
1a000ae2:	4604      	mov	r4, r0
	if (check_magnitud_SELECC_MAGNITUD_tr0_tr0(handle) == bool_true)
1a000ae4:	f7ff fce0 	bl	1a0004a8 <check_magnitud_SELECC_MAGNITUD_tr0_tr0>
1a000ae8:	b920      	cbnz	r0, 1a000af4 <react_magnitud_SELECC_MAGNITUD+0x14>
		if (check_magnitud_SELECC_MAGNITUD_tr1_tr1(handle) == bool_true)
1a000aea:	4620      	mov	r0, r4
1a000aec:	f7ff fcde 	bl	1a0004ac <check_magnitud_SELECC_MAGNITUD_tr1_tr1>
1a000af0:	b920      	cbnz	r0, 1a000afc <react_magnitud_SELECC_MAGNITUD+0x1c>
}
1a000af2:	bd10      	pop	{r4, pc}
		effect_magnitud_SELECC_MAGNITUD_tr0(handle);
1a000af4:	4620      	mov	r0, r4
1a000af6:	f7ff ffd4 	bl	1a000aa2 <effect_magnitud_SELECC_MAGNITUD_tr0>
1a000afa:	e7fa      	b.n	1a000af2 <react_magnitud_SELECC_MAGNITUD+0x12>
			effect_magnitud_SELECC_MAGNITUD_tr1(handle);
1a000afc:	4620      	mov	r0, r4
1a000afe:	f7ff ffe7 	bl	1a000ad0 <effect_magnitud_SELECC_MAGNITUD_tr1>
}
1a000b02:	e7f6      	b.n	1a000af2 <react_magnitud_SELECC_MAGNITUD+0x12>

1a000b04 <enact_forma_CUADRADA>:
{
1a000b04:	b510      	push	{r4, lr}
1a000b06:	4604      	mov	r4, r0
	ej3Iface_opSetForma(handle, "Cuadrada");
1a000b08:	4904      	ldr	r1, [pc, #16]	; (1a000b1c <enact_forma_CUADRADA+0x18>)
1a000b0a:	f000 fb39 	bl	1a001180 <ej3Iface_opSetForma>
	ej3Iface_opLED(handle, EJ3_EJ3IFACE_LED1, EJ3_EJ3IFACE_LED_ON);
1a000b0e:	2201      	movs	r2, #1
1a000b10:	2103      	movs	r1, #3
1a000b12:	4620      	mov	r0, r4
1a000b14:	f000 fb39 	bl	1a00118a <ej3Iface_opLED>
}
1a000b18:	bd10      	pop	{r4, pc}
1a000b1a:	bf00      	nop
1a000b1c:	1a002894 	.word	0x1a002894

1a000b20 <enseq_forma_CUADRADA_default>:
{
1a000b20:	b510      	push	{r4, lr}
1a000b22:	4604      	mov	r4, r0
	enact_forma_CUADRADA(handle);
1a000b24:	f7ff ffee 	bl	1a000b04 <enact_forma_CUADRADA>
	handle->stateConfVector[2] = Ej3_forma_CUADRADA;
1a000b28:	2307      	movs	r3, #7
1a000b2a:	70a3      	strb	r3, [r4, #2]
	handle->stateConfVectorPosition = 2;
1a000b2c:	2302      	movs	r3, #2
1a000b2e:	6063      	str	r3, [r4, #4]
}
1a000b30:	bd10      	pop	{r4, pc}

1a000b32 <effect_forma_TRIANGULAR_tr0>:
{
1a000b32:	b510      	push	{r4, lr}
1a000b34:	4604      	mov	r4, r0
	exseq_forma_TRIANGULAR(handle);
1a000b36:	f7ff ff29 	bl	1a00098c <exseq_forma_TRIANGULAR>
	enseq_forma_CUADRADA_default(handle);
1a000b3a:	4620      	mov	r0, r4
1a000b3c:	f7ff fff0 	bl	1a000b20 <enseq_forma_CUADRADA_default>
}
1a000b40:	bd10      	pop	{r4, pc}

1a000b42 <effect_forma_SENOIDAL_tr1>:
{
1a000b42:	b510      	push	{r4, lr}
1a000b44:	4604      	mov	r4, r0
	exseq_forma_SENOIDAL(handle);
1a000b46:	f7ff ff4d 	bl	1a0009e4 <exseq_forma_SENOIDAL>
	enseq_forma_CUADRADA_default(handle);
1a000b4a:	4620      	mov	r0, r4
1a000b4c:	f7ff ffe8 	bl	1a000b20 <enseq_forma_CUADRADA_default>
}
1a000b50:	bd10      	pop	{r4, pc}

1a000b52 <effect_forma_SELECCION_FORMA_tr1>:
{
1a000b52:	b510      	push	{r4, lr}
1a000b54:	4604      	mov	r4, r0
	exseq_forma_SELECCION_FORMA(handle);
1a000b56:	f7ff fd7a 	bl	1a00064e <exseq_forma_SELECCION_FORMA>
	enseq_forma_CUADRADA_default(handle);
1a000b5a:	4620      	mov	r0, r4
1a000b5c:	f7ff ffe0 	bl	1a000b20 <enseq_forma_CUADRADA_default>
}
1a000b60:	bd10      	pop	{r4, pc}
1a000b62:	Address 0x1a000b62 is out of bounds.


1a000b64 <enact_forma_SENOIDAL>:
{
1a000b64:	b510      	push	{r4, lr}
1a000b66:	4604      	mov	r4, r0
	ej3Iface_opSetForma(handle, "Senoidal");
1a000b68:	4904      	ldr	r1, [pc, #16]	; (1a000b7c <enact_forma_SENOIDAL+0x18>)
1a000b6a:	f000 fb09 	bl	1a001180 <ej3Iface_opSetForma>
	ej3Iface_opLED(handle, EJ3_EJ3IFACE_LED2, EJ3_EJ3IFACE_LED_ON);
1a000b6e:	2201      	movs	r2, #1
1a000b70:	2104      	movs	r1, #4
1a000b72:	4620      	mov	r0, r4
1a000b74:	f000 fb09 	bl	1a00118a <ej3Iface_opLED>
}
1a000b78:	bd10      	pop	{r4, pc}
1a000b7a:	bf00      	nop
1a000b7c:	1a0028a0 	.word	0x1a0028a0

1a000b80 <enseq_forma_SENOIDAL_default>:
{
1a000b80:	b510      	push	{r4, lr}
1a000b82:	4604      	mov	r4, r0
	enact_forma_SENOIDAL(handle);
1a000b84:	f7ff ffee 	bl	1a000b64 <enact_forma_SENOIDAL>
	handle->stateConfVector[2] = Ej3_forma_SENOIDAL;
1a000b88:	2308      	movs	r3, #8
1a000b8a:	70a3      	strb	r3, [r4, #2]
	handle->stateConfVectorPosition = 2;
1a000b8c:	2302      	movs	r3, #2
1a000b8e:	6063      	str	r3, [r4, #4]
}
1a000b90:	bd10      	pop	{r4, pc}

1a000b92 <effect_forma_TRIANGULAR_tr1>:
{
1a000b92:	b510      	push	{r4, lr}
1a000b94:	4604      	mov	r4, r0
	exseq_forma_TRIANGULAR(handle);
1a000b96:	f7ff fef9 	bl	1a00098c <exseq_forma_TRIANGULAR>
	enseq_forma_SENOIDAL_default(handle);
1a000b9a:	4620      	mov	r0, r4
1a000b9c:	f7ff fff0 	bl	1a000b80 <enseq_forma_SENOIDAL_default>
}
1a000ba0:	bd10      	pop	{r4, pc}

1a000ba2 <react_forma_TRIANGULAR>:
{
1a000ba2:	b510      	push	{r4, lr}
1a000ba4:	4604      	mov	r4, r0
	if (check_forma_TRIANGULAR_tr0_tr0(handle) == bool_true)
1a000ba6:	f7ff fbfd 	bl	1a0003a4 <check_forma_TRIANGULAR_tr0_tr0>
1a000baa:	b958      	cbnz	r0, 1a000bc4 <react_forma_TRIANGULAR+0x22>
		if (check_forma_TRIANGULAR_tr1_tr1(handle) == bool_true)
1a000bac:	4620      	mov	r0, r4
1a000bae:	f7ff fc04 	bl	1a0003ba <check_forma_TRIANGULAR_tr1_tr1>
1a000bb2:	b958      	cbnz	r0, 1a000bcc <react_forma_TRIANGULAR+0x2a>
			if (check_forma_TRIANGULAR_tr2_tr2(handle) == bool_true)
1a000bb4:	4620      	mov	r0, r4
1a000bb6:	f7ff fc0b 	bl	1a0003d0 <check_forma_TRIANGULAR_tr2_tr2>
1a000bba:	b130      	cbz	r0, 1a000bca <react_forma_TRIANGULAR+0x28>
				effect_forma_TRIANGULAR_tr2(handle);
1a000bbc:	4620      	mov	r0, r4
1a000bbe:	f7ff feed 	bl	1a00099c <effect_forma_TRIANGULAR_tr2>
}
1a000bc2:	e002      	b.n	1a000bca <react_forma_TRIANGULAR+0x28>
		effect_forma_TRIANGULAR_tr0(handle);
1a000bc4:	4620      	mov	r0, r4
1a000bc6:	f7ff ffb4 	bl	1a000b32 <effect_forma_TRIANGULAR_tr0>
}
1a000bca:	bd10      	pop	{r4, pc}
			effect_forma_TRIANGULAR_tr1(handle);
1a000bcc:	4620      	mov	r0, r4
1a000bce:	f7ff ffe0 	bl	1a000b92 <effect_forma_TRIANGULAR_tr1>
1a000bd2:	e7fa      	b.n	1a000bca <react_forma_TRIANGULAR+0x28>

1a000bd4 <effect_forma_CUADRADA_tr0>:
{
1a000bd4:	b510      	push	{r4, lr}
1a000bd6:	4604      	mov	r4, r0
	exseq_forma_CUADRADA(handle);
1a000bd8:	f7ff feee 	bl	1a0009b8 <exseq_forma_CUADRADA>
	enseq_forma_SENOIDAL_default(handle);
1a000bdc:	4620      	mov	r0, r4
1a000bde:	f7ff ffcf 	bl	1a000b80 <enseq_forma_SENOIDAL_default>
}
1a000be2:	bd10      	pop	{r4, pc}

1a000be4 <enact_forma_TRIANGULAR>:
{
1a000be4:	b510      	push	{r4, lr}
1a000be6:	4604      	mov	r4, r0
	ej3Iface_opSetForma(handle, "Triangular");
1a000be8:	4904      	ldr	r1, [pc, #16]	; (1a000bfc <enact_forma_TRIANGULAR+0x18>)
1a000bea:	f000 fac9 	bl	1a001180 <ej3Iface_opSetForma>
	ej3Iface_opLED(handle, EJ3_EJ3IFACE_LED3, EJ3_EJ3IFACE_LED_ON);
1a000bee:	2201      	movs	r2, #1
1a000bf0:	2105      	movs	r1, #5
1a000bf2:	4620      	mov	r0, r4
1a000bf4:	f000 fac9 	bl	1a00118a <ej3Iface_opLED>
}
1a000bf8:	bd10      	pop	{r4, pc}
1a000bfa:	bf00      	nop
1a000bfc:	1a0028ac 	.word	0x1a0028ac

1a000c00 <enseq_forma_TRIANGULAR_default>:
{
1a000c00:	b510      	push	{r4, lr}
1a000c02:	4604      	mov	r4, r0
	enact_forma_TRIANGULAR(handle);
1a000c04:	f7ff ffee 	bl	1a000be4 <enact_forma_TRIANGULAR>
	handle->stateConfVector[2] = Ej3_forma_TRIANGULAR;
1a000c08:	2306      	movs	r3, #6
1a000c0a:	70a3      	strb	r3, [r4, #2]
	handle->stateConfVectorPosition = 2;
1a000c0c:	2302      	movs	r3, #2
1a000c0e:	6063      	str	r3, [r4, #4]
}
1a000c10:	bd10      	pop	{r4, pc}

1a000c12 <effect_forma_CUADRADA_tr1>:
{
1a000c12:	b510      	push	{r4, lr}
1a000c14:	4604      	mov	r4, r0
	exseq_forma_CUADRADA(handle);
1a000c16:	f7ff fecf 	bl	1a0009b8 <exseq_forma_CUADRADA>
	enseq_forma_TRIANGULAR_default(handle);
1a000c1a:	4620      	mov	r0, r4
1a000c1c:	f7ff fff0 	bl	1a000c00 <enseq_forma_TRIANGULAR_default>
}
1a000c20:	bd10      	pop	{r4, pc}

1a000c22 <react_forma_CUADRADA>:
{
1a000c22:	b510      	push	{r4, lr}
1a000c24:	4604      	mov	r4, r0
	if (check_forma_CUADRADA_tr0_tr0(handle) == bool_true)
1a000c26:	f7ff fbde 	bl	1a0003e6 <check_forma_CUADRADA_tr0_tr0>
1a000c2a:	b958      	cbnz	r0, 1a000c44 <react_forma_CUADRADA+0x22>
		if (check_forma_CUADRADA_tr1_tr1(handle) == bool_true)
1a000c2c:	4620      	mov	r0, r4
1a000c2e:	f7ff fbe5 	bl	1a0003fc <check_forma_CUADRADA_tr1_tr1>
1a000c32:	b958      	cbnz	r0, 1a000c4c <react_forma_CUADRADA+0x2a>
			if (check_forma_CUADRADA_tr2_tr2(handle) == bool_true)
1a000c34:	4620      	mov	r0, r4
1a000c36:	f7ff fbec 	bl	1a000412 <check_forma_CUADRADA_tr2_tr2>
1a000c3a:	b130      	cbz	r0, 1a000c4a <react_forma_CUADRADA+0x28>
				effect_forma_CUADRADA_tr2(handle);
1a000c3c:	4620      	mov	r0, r4
1a000c3e:	f7ff fec3 	bl	1a0009c8 <effect_forma_CUADRADA_tr2>
}
1a000c42:	e002      	b.n	1a000c4a <react_forma_CUADRADA+0x28>
		effect_forma_CUADRADA_tr0(handle);
1a000c44:	4620      	mov	r0, r4
1a000c46:	f7ff ffc5 	bl	1a000bd4 <effect_forma_CUADRADA_tr0>
}
1a000c4a:	bd10      	pop	{r4, pc}
			effect_forma_CUADRADA_tr1(handle);
1a000c4c:	4620      	mov	r0, r4
1a000c4e:	f7ff ffe0 	bl	1a000c12 <effect_forma_CUADRADA_tr1>
1a000c52:	e7fa      	b.n	1a000c4a <react_forma_CUADRADA+0x28>

1a000c54 <effect_forma_SENOIDAL_tr0>:
{
1a000c54:	b510      	push	{r4, lr}
1a000c56:	4604      	mov	r4, r0
	exseq_forma_SENOIDAL(handle);
1a000c58:	f7ff fec4 	bl	1a0009e4 <exseq_forma_SENOIDAL>
	enseq_forma_TRIANGULAR_default(handle);
1a000c5c:	4620      	mov	r0, r4
1a000c5e:	f7ff ffcf 	bl	1a000c00 <enseq_forma_TRIANGULAR_default>
}
1a000c62:	bd10      	pop	{r4, pc}

1a000c64 <react_forma_SENOIDAL>:
{
1a000c64:	b510      	push	{r4, lr}
1a000c66:	4604      	mov	r4, r0
	if (check_forma_SENOIDAL_tr0_tr0(handle) == bool_true)
1a000c68:	f7ff fbde 	bl	1a000428 <check_forma_SENOIDAL_tr0_tr0>
1a000c6c:	b958      	cbnz	r0, 1a000c86 <react_forma_SENOIDAL+0x22>
		if (check_forma_SENOIDAL_tr1_tr1(handle) == bool_true)
1a000c6e:	4620      	mov	r0, r4
1a000c70:	f7ff fbe5 	bl	1a00043e <check_forma_SENOIDAL_tr1_tr1>
1a000c74:	b958      	cbnz	r0, 1a000c8e <react_forma_SENOIDAL+0x2a>
			if (check_forma_SENOIDAL_tr2_tr2(handle) == bool_true)
1a000c76:	4620      	mov	r0, r4
1a000c78:	f7ff fbec 	bl	1a000454 <check_forma_SENOIDAL_tr2_tr2>
1a000c7c:	b130      	cbz	r0, 1a000c8c <react_forma_SENOIDAL+0x28>
				effect_forma_SENOIDAL_tr2(handle);
1a000c7e:	4620      	mov	r0, r4
1a000c80:	f7ff feb8 	bl	1a0009f4 <effect_forma_SENOIDAL_tr2>
}
1a000c84:	e002      	b.n	1a000c8c <react_forma_SENOIDAL+0x28>
		effect_forma_SENOIDAL_tr0(handle);
1a000c86:	4620      	mov	r0, r4
1a000c88:	f7ff ffe4 	bl	1a000c54 <effect_forma_SENOIDAL_tr0>
}
1a000c8c:	bd10      	pop	{r4, pc}
			effect_forma_SENOIDAL_tr1(handle);
1a000c8e:	4620      	mov	r0, r4
1a000c90:	f7ff ff57 	bl	1a000b42 <effect_forma_SENOIDAL_tr1>
1a000c94:	e7fa      	b.n	1a000c8c <react_forma_SENOIDAL+0x28>

1a000c96 <effect_forma_SELECCION_FORMA_tr0>:
{
1a000c96:	b510      	push	{r4, lr}
1a000c98:	4604      	mov	r4, r0
	exseq_forma_SELECCION_FORMA(handle);
1a000c9a:	f7ff fcd8 	bl	1a00064e <exseq_forma_SELECCION_FORMA>
	enseq_forma_TRIANGULAR_default(handle);
1a000c9e:	4620      	mov	r0, r4
1a000ca0:	f7ff ffae 	bl	1a000c00 <enseq_forma_TRIANGULAR_default>
}
1a000ca4:	bd10      	pop	{r4, pc}

1a000ca6 <react_forma_SELECCION_FORMA>:
{
1a000ca6:	b510      	push	{r4, lr}
1a000ca8:	4604      	mov	r4, r0
	if (check_forma_SELECCION_FORMA_tr0_tr0(handle) == bool_true)
1a000caa:	f7ff fbde 	bl	1a00046a <check_forma_SELECCION_FORMA_tr0_tr0>
1a000cae:	b920      	cbnz	r0, 1a000cba <react_forma_SELECCION_FORMA+0x14>
		if (check_forma_SELECCION_FORMA_tr1_tr1(handle) == bool_true)
1a000cb0:	4620      	mov	r0, r4
1a000cb2:	f7ff fbe5 	bl	1a000480 <check_forma_SELECCION_FORMA_tr1_tr1>
1a000cb6:	b920      	cbnz	r0, 1a000cc2 <react_forma_SELECCION_FORMA+0x1c>
}
1a000cb8:	bd10      	pop	{r4, pc}
		effect_forma_SELECCION_FORMA_tr0(handle);
1a000cba:	4620      	mov	r0, r4
1a000cbc:	f7ff ffeb 	bl	1a000c96 <effect_forma_SELECCION_FORMA_tr0>
1a000cc0:	e7fa      	b.n	1a000cb8 <react_forma_SELECCION_FORMA+0x12>
			effect_forma_SELECCION_FORMA_tr1(handle);
1a000cc2:	4620      	mov	r0, r4
1a000cc4:	f7ff ff45 	bl	1a000b52 <effect_forma_SELECCION_FORMA_tr1>
}
1a000cc8:	e7f6      	b.n	1a000cb8 <react_forma_SELECCION_FORMA+0x12>

1a000cca <enact_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP>:
{
1a000cca:	b508      	push	{r3, lr}
	ej3Iface_opAmplitudUp(handle, handle->internal.viSetMagnitudValue);
1a000ccc:	6a41      	ldr	r1, [r0, #36]	; 0x24
1a000cce:	f000 fa58 	bl	1a001182 <ej3Iface_opAmplitudUp>
}
1a000cd2:	bd08      	pop	{r3, pc}

1a000cd4 <enseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_default>:
{
1a000cd4:	b510      	push	{r4, lr}
1a000cd6:	4604      	mov	r4, r0
	enact_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP(handle);
1a000cd8:	f7ff fff7 	bl	1a000cca <enact_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP>
	handle->stateConfVector[3] = Ej3_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP;
1a000cdc:	2311      	movs	r3, #17
1a000cde:	70e3      	strb	r3, [r4, #3]
	handle->stateConfVectorPosition = 3;
1a000ce0:	2303      	movs	r3, #3
1a000ce2:	6063      	str	r3, [r4, #4]
}
1a000ce4:	bd10      	pop	{r4, pc}

1a000ce6 <effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START_tr0>:
{
1a000ce6:	b510      	push	{r4, lr}
1a000ce8:	4604      	mov	r4, r0
	exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START(handle);
1a000cea:	f7ff fcc7 	bl	1a00067c <exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START>
	enseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_default(handle);
1a000cee:	4620      	mov	r0, r4
1a000cf0:	f7ff fff0 	bl	1a000cd4 <enseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_default>
}
1a000cf4:	bd10      	pop	{r4, pc}

1a000cf6 <effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_tr1>:
{
1a000cf6:	b510      	push	{r4, lr}
1a000cf8:	4604      	mov	r4, r0
	exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP(handle);
1a000cfa:	f7ff fcc4 	bl	1a000686 <exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP>
	enseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_default(handle);
1a000cfe:	4620      	mov	r0, r4
1a000d00:	f7ff ffe8 	bl	1a000cd4 <enseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_default>
}
1a000d04:	bd10      	pop	{r4, pc}

1a000d06 <effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_tr1>:
{
1a000d06:	b510      	push	{r4, lr}
1a000d08:	4604      	mov	r4, r0
	exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN(handle);
1a000d0a:	f7ff fcc1 	bl	1a000690 <exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN>
	enseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_default(handle);
1a000d0e:	4620      	mov	r0, r4
1a000d10:	f7ff ffe0 	bl	1a000cd4 <enseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_default>
}
1a000d14:	bd10      	pop	{r4, pc}

1a000d16 <enact_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP>:
{
1a000d16:	b508      	push	{r3, lr}
	ej3Iface_opAmplitudUp(handle, handle->internal.viSetMagnitudValue);
1a000d18:	6a41      	ldr	r1, [r0, #36]	; 0x24
1a000d1a:	f000 fa32 	bl	1a001182 <ej3Iface_opAmplitudUp>
}
1a000d1e:	bd08      	pop	{r3, pc}

1a000d20 <enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_default>:
{
1a000d20:	b510      	push	{r4, lr}
1a000d22:	4604      	mov	r4, r0
	enact_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP(handle);
1a000d24:	f7ff fff7 	bl	1a000d16 <enact_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP>
	handle->stateConfVector[3] = Ej3_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP;
1a000d28:	2316      	movs	r3, #22
1a000d2a:	70e3      	strb	r3, [r4, #3]
	handle->stateConfVectorPosition = 3;
1a000d2c:	2303      	movs	r3, #3
1a000d2e:	6063      	str	r3, [r4, #4]
}
1a000d30:	bd10      	pop	{r4, pc}

1a000d32 <effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START_tr0>:
{
1a000d32:	b510      	push	{r4, lr}
1a000d34:	4604      	mov	r4, r0
	exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START(handle);
1a000d36:	f7ff fcb0 	bl	1a00069a <exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START>
	enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_default(handle);
1a000d3a:	4620      	mov	r0, r4
1a000d3c:	f7ff fff0 	bl	1a000d20 <enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_default>
}
1a000d40:	bd10      	pop	{r4, pc}

1a000d42 <effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_tr1>:
{
1a000d42:	b510      	push	{r4, lr}
1a000d44:	4604      	mov	r4, r0
	exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP(handle);
1a000d46:	f7ff fcad 	bl	1a0006a4 <exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP>
	enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_default(handle);
1a000d4a:	4620      	mov	r0, r4
1a000d4c:	f7ff ffe8 	bl	1a000d20 <enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_default>
}
1a000d50:	bd10      	pop	{r4, pc}

1a000d52 <effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_tr1>:
{
1a000d52:	b510      	push	{r4, lr}
1a000d54:	4604      	mov	r4, r0
	exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN(handle);
1a000d56:	f7ff fcaa 	bl	1a0006ae <exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN>
	enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_default(handle);
1a000d5a:	4620      	mov	r0, r4
1a000d5c:	f7ff ffe0 	bl	1a000d20 <enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_default>
}
1a000d60:	bd10      	pop	{r4, pc}

1a000d62 <enact_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN>:
{
1a000d62:	b508      	push	{r3, lr}
	ej3Iface_opAmplitudDown(handle, handle->internal.viSetMagnitudValue);
1a000d64:	6a41      	ldr	r1, [r0, #36]	; 0x24
1a000d66:	f000 fa0d 	bl	1a001184 <ej3Iface_opAmplitudDown>
}
1a000d6a:	bd08      	pop	{r3, pc}

1a000d6c <enseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_default>:
{
1a000d6c:	b510      	push	{r4, lr}
1a000d6e:	4604      	mov	r4, r0
	enact_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN(handle);
1a000d70:	f7ff fff7 	bl	1a000d62 <enact_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN>
	handle->stateConfVector[3] = Ej3_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN;
1a000d74:	2312      	movs	r3, #18
1a000d76:	70e3      	strb	r3, [r4, #3]
	handle->stateConfVectorPosition = 3;
1a000d78:	2303      	movs	r3, #3
1a000d7a:	6063      	str	r3, [r4, #4]
}
1a000d7c:	bd10      	pop	{r4, pc}

1a000d7e <effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START_tr1>:
{
1a000d7e:	b510      	push	{r4, lr}
1a000d80:	4604      	mov	r4, r0
	exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START(handle);
1a000d82:	f7ff fc7b 	bl	1a00067c <exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START>
	enseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_default(handle);
1a000d86:	4620      	mov	r0, r4
1a000d88:	f7ff fff0 	bl	1a000d6c <enseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_default>
}
1a000d8c:	bd10      	pop	{r4, pc}

1a000d8e <react_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START>:
{
1a000d8e:	b510      	push	{r4, lr}
1a000d90:	4604      	mov	r4, r0
	if (check_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START_tr0_tr0(handle) == bool_true)
1a000d92:	f7ff fb8d 	bl	1a0004b0 <check_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START_tr0_tr0>
1a000d96:	b920      	cbnz	r0, 1a000da2 <react_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START+0x14>
		if (check_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START_tr1_tr1(handle) == bool_true)
1a000d98:	4620      	mov	r0, r4
1a000d9a:	f7ff fb8b 	bl	1a0004b4 <check_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START_tr1_tr1>
1a000d9e:	b920      	cbnz	r0, 1a000daa <react_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START+0x1c>
}
1a000da0:	bd10      	pop	{r4, pc}
		effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START_tr0(handle);
1a000da2:	4620      	mov	r0, r4
1a000da4:	f7ff ff9f 	bl	1a000ce6 <effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START_tr0>
1a000da8:	e7fa      	b.n	1a000da0 <react_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START+0x12>
			effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START_tr1(handle);
1a000daa:	4620      	mov	r0, r4
1a000dac:	f7ff ffe7 	bl	1a000d7e <effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START_tr1>
}
1a000db0:	e7f6      	b.n	1a000da0 <react_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START+0x12>

1a000db2 <effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_tr0>:
{
1a000db2:	b510      	push	{r4, lr}
1a000db4:	4604      	mov	r4, r0
	exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP(handle);
1a000db6:	f7ff fc66 	bl	1a000686 <exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP>
	enseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_default(handle);
1a000dba:	4620      	mov	r0, r4
1a000dbc:	f7ff ffd6 	bl	1a000d6c <enseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_default>
}
1a000dc0:	bd10      	pop	{r4, pc}

1a000dc2 <effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_tr0>:
{
1a000dc2:	b510      	push	{r4, lr}
1a000dc4:	4604      	mov	r4, r0
	exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN(handle);
1a000dc6:	f7ff fc63 	bl	1a000690 <exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN>
	enseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_default(handle);
1a000dca:	4620      	mov	r0, r4
1a000dcc:	f7ff ffce 	bl	1a000d6c <enseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_default>
}
1a000dd0:	bd10      	pop	{r4, pc}

1a000dd2 <enact_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN>:
{
1a000dd2:	b508      	push	{r3, lr}
	ej3Iface_opAmplitudDown(handle, handle->internal.viSetMagnitudValue);
1a000dd4:	6a41      	ldr	r1, [r0, #36]	; 0x24
1a000dd6:	f000 f9d5 	bl	1a001184 <ej3Iface_opAmplitudDown>
}
1a000dda:	bd08      	pop	{r3, pc}

1a000ddc <enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_default>:
{
1a000ddc:	b510      	push	{r4, lr}
1a000dde:	4604      	mov	r4, r0
	enact_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN(handle);
1a000de0:	f7ff fff7 	bl	1a000dd2 <enact_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN>
	handle->stateConfVector[3] = Ej3_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN;
1a000de4:	2317      	movs	r3, #23
1a000de6:	70e3      	strb	r3, [r4, #3]
	handle->stateConfVectorPosition = 3;
1a000de8:	2303      	movs	r3, #3
1a000dea:	6063      	str	r3, [r4, #4]
}
1a000dec:	bd10      	pop	{r4, pc}

1a000dee <effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START_tr1>:
{
1a000dee:	b510      	push	{r4, lr}
1a000df0:	4604      	mov	r4, r0
	exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START(handle);
1a000df2:	f7ff fc52 	bl	1a00069a <exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START>
	enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_default(handle);
1a000df6:	4620      	mov	r0, r4
1a000df8:	f7ff fff0 	bl	1a000ddc <enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_default>
}
1a000dfc:	bd10      	pop	{r4, pc}

1a000dfe <react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START>:
{
1a000dfe:	b510      	push	{r4, lr}
1a000e00:	4604      	mov	r4, r0
	if (check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START_tr0_tr0(handle) == bool_true)
1a000e02:	f7ff fb68 	bl	1a0004d6 <check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START_tr0_tr0>
1a000e06:	b920      	cbnz	r0, 1a000e12 <react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START+0x14>
		if (check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START_tr1_tr1(handle) == bool_true)
1a000e08:	4620      	mov	r0, r4
1a000e0a:	f7ff fb66 	bl	1a0004da <check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START_tr1_tr1>
1a000e0e:	b920      	cbnz	r0, 1a000e1a <react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START+0x1c>
}
1a000e10:	bd10      	pop	{r4, pc}
		effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START_tr0(handle);
1a000e12:	4620      	mov	r0, r4
1a000e14:	f7ff ff8d 	bl	1a000d32 <effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START_tr0>
1a000e18:	e7fa      	b.n	1a000e10 <react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START+0x12>
			effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START_tr1(handle);
1a000e1a:	4620      	mov	r0, r4
1a000e1c:	f7ff ffe7 	bl	1a000dee <effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START_tr1>
}
1a000e20:	e7f6      	b.n	1a000e10 <react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START+0x12>

1a000e22 <effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_tr0>:
{
1a000e22:	b510      	push	{r4, lr}
1a000e24:	4604      	mov	r4, r0
	exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP(handle);
1a000e26:	f7ff fc3d 	bl	1a0006a4 <exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP>
	enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_default(handle);
1a000e2a:	4620      	mov	r0, r4
1a000e2c:	f7ff ffd6 	bl	1a000ddc <enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_default>
}
1a000e30:	bd10      	pop	{r4, pc}

1a000e32 <effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_tr0>:
{
1a000e32:	b510      	push	{r4, lr}
1a000e34:	4604      	mov	r4, r0
	exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN(handle);
1a000e36:	f7ff fc3a 	bl	1a0006ae <exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN>
	enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_default(handle);
1a000e3a:	4620      	mov	r0, r4
1a000e3c:	f7ff ffce 	bl	1a000ddc <enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_default>
}
1a000e40:	bd10      	pop	{r4, pc}

1a000e42 <enact_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA>:
{
1a000e42:	b510      	push	{r4, lr}
1a000e44:	4604      	mov	r4, r0
	ej3_setTimer(handle, (sc_eventid) &(handle->timeEvents.ej3_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA_tev0_raised) , 10, bool_false);
1a000e46:	2300      	movs	r3, #0
1a000e48:	220a      	movs	r2, #10
1a000e4a:	f100 012a 	add.w	r1, r0, #42	; 0x2a
1a000e4e:	f000 f97f 	bl	1a001150 <ej3_setTimer>
	ej3Iface_opSetAmplitudFrec(handle, handle->internal.viSetMagnitudValue);
1a000e52:	6a61      	ldr	r1, [r4, #36]	; 0x24
1a000e54:	4620      	mov	r0, r4
1a000e56:	f000 f996 	bl	1a001186 <ej3Iface_opSetAmplitudFrec>
}
1a000e5a:	bd10      	pop	{r4, pc}

1a000e5c <enseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA_default>:
{
1a000e5c:	b510      	push	{r4, lr}
1a000e5e:	4604      	mov	r4, r0
	enact_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA(handle);
1a000e60:	f7ff ffef 	bl	1a000e42 <enact_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA>
	handle->stateConfVector[3] = Ej3_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA;
1a000e64:	2313      	movs	r3, #19
1a000e66:	70e3      	strb	r3, [r4, #3]
	handle->stateConfVectorPosition = 3;
1a000e68:	2303      	movs	r3, #3
1a000e6a:	6063      	str	r3, [r4, #4]
}
1a000e6c:	bd10      	pop	{r4, pc}

1a000e6e <effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_tr2>:
{
1a000e6e:	b510      	push	{r4, lr}
1a000e70:	4604      	mov	r4, r0
	exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP(handle);
1a000e72:	f7ff fc08 	bl	1a000686 <exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP>
	enseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA_default(handle);
1a000e76:	4620      	mov	r0, r4
1a000e78:	f7ff fff0 	bl	1a000e5c <enseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA_default>
}
1a000e7c:	bd10      	pop	{r4, pc}

1a000e7e <react_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP>:
{
1a000e7e:	b510      	push	{r4, lr}
1a000e80:	4604      	mov	r4, r0
	if (check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_tr0_tr0(handle) == bool_true)
1a000e82:	f7ff fb19 	bl	1a0004b8 <check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_tr0_tr0>
1a000e86:	b958      	cbnz	r0, 1a000ea0 <react_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP+0x22>
		if (check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_tr1_tr1(handle) == bool_true)
1a000e88:	4620      	mov	r0, r4
1a000e8a:	f7ff fb17 	bl	1a0004bc <check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_tr1_tr1>
1a000e8e:	b958      	cbnz	r0, 1a000ea8 <react_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP+0x2a>
			if (check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_tr2_tr2(handle) == bool_true)
1a000e90:	4620      	mov	r0, r4
1a000e92:	f7ff fb15 	bl	1a0004c0 <check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_tr2_tr2>
1a000e96:	b130      	cbz	r0, 1a000ea6 <react_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP+0x28>
				effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_tr2(handle);
1a000e98:	4620      	mov	r0, r4
1a000e9a:	f7ff ffe8 	bl	1a000e6e <effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_tr2>
}
1a000e9e:	e002      	b.n	1a000ea6 <react_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP+0x28>
		effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_tr0(handle);
1a000ea0:	4620      	mov	r0, r4
1a000ea2:	f7ff ff86 	bl	1a000db2 <effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_tr0>
}
1a000ea6:	bd10      	pop	{r4, pc}
			effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_tr1(handle);
1a000ea8:	4620      	mov	r0, r4
1a000eaa:	f7ff ff24 	bl	1a000cf6 <effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP_tr1>
1a000eae:	e7fa      	b.n	1a000ea6 <react_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP+0x28>

1a000eb0 <effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_tr2>:
{
1a000eb0:	b510      	push	{r4, lr}
1a000eb2:	4604      	mov	r4, r0
	exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN(handle);
1a000eb4:	f7ff fbec 	bl	1a000690 <exseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN>
	enseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA_default(handle);
1a000eb8:	4620      	mov	r0, r4
1a000eba:	f7ff ffcf 	bl	1a000e5c <enseq_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA_default>
}
1a000ebe:	bd10      	pop	{r4, pc}

1a000ec0 <react_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN>:
{
1a000ec0:	b510      	push	{r4, lr}
1a000ec2:	4604      	mov	r4, r0
	if (check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_tr0_tr0(handle) == bool_true)
1a000ec4:	f7ff fafe 	bl	1a0004c4 <check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_tr0_tr0>
1a000ec8:	b958      	cbnz	r0, 1a000ee2 <react_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN+0x22>
		if (check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_tr1_tr1(handle) == bool_true)
1a000eca:	4620      	mov	r0, r4
1a000ecc:	f7ff fafc 	bl	1a0004c8 <check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_tr1_tr1>
1a000ed0:	b958      	cbnz	r0, 1a000eea <react_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN+0x2a>
			if (check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_tr2_tr2(handle) == bool_true)
1a000ed2:	4620      	mov	r0, r4
1a000ed4:	f7ff fafa 	bl	1a0004cc <check_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_tr2_tr2>
1a000ed8:	b130      	cbz	r0, 1a000ee8 <react_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN+0x28>
				effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_tr2(handle);
1a000eda:	4620      	mov	r0, r4
1a000edc:	f7ff ffe8 	bl	1a000eb0 <effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_tr2>
}
1a000ee0:	e002      	b.n	1a000ee8 <react_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN+0x28>
		effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_tr0(handle);
1a000ee2:	4620      	mov	r0, r4
1a000ee4:	f7ff ff6d 	bl	1a000dc2 <effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_tr0>
}
1a000ee8:	bd10      	pop	{r4, pc}
			effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_tr1(handle);
1a000eea:	4620      	mov	r0, r4
1a000eec:	f7ff ff0b 	bl	1a000d06 <effect_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN_tr1>
1a000ef0:	e7fa      	b.n	1a000ee8 <react_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN+0x28>

1a000ef2 <enact_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA>:
{
1a000ef2:	b510      	push	{r4, lr}
1a000ef4:	4604      	mov	r4, r0
	ej3_setTimer(handle, (sc_eventid) &(handle->timeEvents.ej3_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA_tev0_raised) , 10, bool_false);
1a000ef6:	2300      	movs	r3, #0
1a000ef8:	220a      	movs	r2, #10
1a000efa:	f100 012b 	add.w	r1, r0, #43	; 0x2b
1a000efe:	f000 f927 	bl	1a001150 <ej3_setTimer>
	ej3Iface_opSetAmplitudVoltage(handle, handle->internal.viSetMagnitudValue);
1a000f02:	6a61      	ldr	r1, [r4, #36]	; 0x24
1a000f04:	4620      	mov	r0, r4
1a000f06:	f000 f93f 	bl	1a001188 <ej3Iface_opSetAmplitudVoltage>
}
1a000f0a:	bd10      	pop	{r4, pc}

1a000f0c <enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA_default>:
{
1a000f0c:	b510      	push	{r4, lr}
1a000f0e:	4604      	mov	r4, r0
	enact_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA(handle);
1a000f10:	f7ff ffef 	bl	1a000ef2 <enact_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA>
	handle->stateConfVector[3] = Ej3_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA;
1a000f14:	2318      	movs	r3, #24
1a000f16:	70e3      	strb	r3, [r4, #3]
	handle->stateConfVectorPosition = 3;
1a000f18:	2303      	movs	r3, #3
1a000f1a:	6063      	str	r3, [r4, #4]
}
1a000f1c:	bd10      	pop	{r4, pc}

1a000f1e <effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_tr2>:
{
1a000f1e:	b510      	push	{r4, lr}
1a000f20:	4604      	mov	r4, r0
	exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP(handle);
1a000f22:	f7ff fbbf 	bl	1a0006a4 <exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP>
	enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA_default(handle);
1a000f26:	4620      	mov	r0, r4
1a000f28:	f7ff fff0 	bl	1a000f0c <enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA_default>
}
1a000f2c:	bd10      	pop	{r4, pc}

1a000f2e <react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP>:
{
1a000f2e:	b510      	push	{r4, lr}
1a000f30:	4604      	mov	r4, r0
	if (check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_tr0_tr0(handle) == bool_true)
1a000f32:	f7ff fad4 	bl	1a0004de <check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_tr0_tr0>
1a000f36:	b958      	cbnz	r0, 1a000f50 <react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP+0x22>
		if (check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_tr1_tr1(handle) == bool_true)
1a000f38:	4620      	mov	r0, r4
1a000f3a:	f7ff fad2 	bl	1a0004e2 <check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_tr1_tr1>
1a000f3e:	b958      	cbnz	r0, 1a000f58 <react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP+0x2a>
			if (check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_tr2_tr2(handle) == bool_true)
1a000f40:	4620      	mov	r0, r4
1a000f42:	f7ff fad0 	bl	1a0004e6 <check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_tr2_tr2>
1a000f46:	b130      	cbz	r0, 1a000f56 <react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP+0x28>
				effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_tr2(handle);
1a000f48:	4620      	mov	r0, r4
1a000f4a:	f7ff ffe8 	bl	1a000f1e <effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_tr2>
}
1a000f4e:	e002      	b.n	1a000f56 <react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP+0x28>
		effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_tr0(handle);
1a000f50:	4620      	mov	r0, r4
1a000f52:	f7ff ff66 	bl	1a000e22 <effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_tr0>
}
1a000f56:	bd10      	pop	{r4, pc}
			effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_tr1(handle);
1a000f58:	4620      	mov	r0, r4
1a000f5a:	f7ff fef2 	bl	1a000d42 <effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP_tr1>
1a000f5e:	e7fa      	b.n	1a000f56 <react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP+0x28>

1a000f60 <effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_tr2>:
{
1a000f60:	b510      	push	{r4, lr}
1a000f62:	4604      	mov	r4, r0
	exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN(handle);
1a000f64:	f7ff fba3 	bl	1a0006ae <exseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN>
	enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA_default(handle);
1a000f68:	4620      	mov	r0, r4
1a000f6a:	f7ff ffcf 	bl	1a000f0c <enseq_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA_default>
}
1a000f6e:	bd10      	pop	{r4, pc}

1a000f70 <react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN>:
{
1a000f70:	b510      	push	{r4, lr}
1a000f72:	4604      	mov	r4, r0
	if (check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_tr0_tr0(handle) == bool_true)
1a000f74:	f7ff fab9 	bl	1a0004ea <check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_tr0_tr0>
1a000f78:	b958      	cbnz	r0, 1a000f92 <react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN+0x22>
		if (check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_tr1_tr1(handle) == bool_true)
1a000f7a:	4620      	mov	r0, r4
1a000f7c:	f7ff fab7 	bl	1a0004ee <check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_tr1_tr1>
1a000f80:	b958      	cbnz	r0, 1a000f9a <react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN+0x2a>
			if (check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_tr2_tr2(handle) == bool_true)
1a000f82:	4620      	mov	r0, r4
1a000f84:	f7ff fab5 	bl	1a0004f2 <check_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_tr2_tr2>
1a000f88:	b130      	cbz	r0, 1a000f98 <react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN+0x28>
				effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_tr2(handle);
1a000f8a:	4620      	mov	r0, r4
1a000f8c:	f7ff ffe8 	bl	1a000f60 <effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_tr2>
}
1a000f90:	e002      	b.n	1a000f98 <react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN+0x28>
		effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_tr0(handle);
1a000f92:	4620      	mov	r0, r4
1a000f94:	f7ff ff4d 	bl	1a000e32 <effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_tr0>
}
1a000f98:	bd10      	pop	{r4, pc}
			effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_tr1(handle);
1a000f9a:	4620      	mov	r0, r4
1a000f9c:	f7ff fed9 	bl	1a000d52 <effect_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN_tr1>
1a000fa0:	e7fa      	b.n	1a000f98 <react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN+0x28>

1a000fa2 <ej3_init>:
{
1a000fa2:	b538      	push	{r3, r4, r5, lr}
1a000fa4:	4604      	mov	r4, r0
		for (i = 0; i < EJ3_MAX_ORTHOGONAL_STATES; ++i)
1a000fa6:	2300      	movs	r3, #0
1a000fa8:	e002      	b.n	1a000fb0 <ej3_init+0xe>
			handle->stateConfVector[i] = Ej3_last_state;
1a000faa:	2200      	movs	r2, #0
1a000fac:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < EJ3_MAX_ORTHOGONAL_STATES; ++i)
1a000fae:	3301      	adds	r3, #1
1a000fb0:	2b03      	cmp	r3, #3
1a000fb2:	ddfa      	ble.n	1a000faa <ej3_init+0x8>
		handle->stateConfVectorPosition = 0;
1a000fb4:	2500      	movs	r5, #0
1a000fb6:	6065      	str	r5, [r4, #4]
		clearInEvents(handle);
1a000fb8:	4620      	mov	r0, r4
1a000fba:	f7ff f9a1 	bl	1a000300 <clearInEvents>
		handle->internal.viTecla = 0;
1a000fbe:	61e5      	str	r5, [r4, #28]
		handle->internal.viSetForma = bool_false;
1a000fc0:	f884 5020 	strb.w	r5, [r4, #32]
		handle->internal.viSetMagnitud = bool_false;
1a000fc4:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
		handle->internal.viSetMagnitudValue = 0;
1a000fc8:	6265      	str	r5, [r4, #36]	; 0x24
}
1a000fca:	bd38      	pop	{r3, r4, r5, pc}

1a000fcc <ej3_enter>:
{
1a000fcc:	b510      	push	{r4, lr}
1a000fce:	4604      	mov	r4, r0
	enseq_TECX_default(handle);
1a000fd0:	f7ff fbbd 	bl	1a00074e <enseq_TECX_default>
	enseq_main_region_default(handle);
1a000fd4:	4620      	mov	r0, r4
1a000fd6:	f7ff fbc2 	bl	1a00075e <enseq_main_region_default>
	enseq_forma_default(handle);
1a000fda:	4620      	mov	r0, r4
1a000fdc:	f7ff fbc7 	bl	1a00076e <enseq_forma_default>
	enseq_magnitud_default(handle);
1a000fe0:	4620      	mov	r0, r4
1a000fe2:	f7ff fbcc 	bl	1a00077e <enseq_magnitud_default>
}
1a000fe6:	bd10      	pop	{r4, pc}

1a000fe8 <ej3_runCycle>:
{
1a000fe8:	b510      	push	{r4, lr}
1a000fea:	4604      	mov	r4, r0
	for (handle->stateConfVectorPosition = 0;
1a000fec:	2300      	movs	r3, #0
1a000fee:	6043      	str	r3, [r0, #4]
1a000ff0:	e005      	b.n	1a000ffe <ej3_runCycle+0x16>
			react_TECX_DEBOUNCE(handle);
1a000ff2:	4620      	mov	r0, r4
1a000ff4:	f7ff fbf4 	bl	1a0007e0 <react_TECX_DEBOUNCE>
		handle->stateConfVectorPosition++)
1a000ff8:	6863      	ldr	r3, [r4, #4]
1a000ffa:	3301      	adds	r3, #1
1a000ffc:	6063      	str	r3, [r4, #4]
		handle->stateConfVectorPosition < EJ3_MAX_ORTHOGONAL_STATES;
1a000ffe:	6863      	ldr	r3, [r4, #4]
	for (handle->stateConfVectorPosition = 0;
1a001000:	2b03      	cmp	r3, #3
1a001002:	f200 808b 	bhi.w	1a00111c <ej3_runCycle+0x134>
		switch (handle->stateConfVector[handle->stateConfVectorPosition])
1a001006:	5ce3      	ldrb	r3, [r4, r3]
1a001008:	3b01      	subs	r3, #1
1a00100a:	2b17      	cmp	r3, #23
1a00100c:	d8f4      	bhi.n	1a000ff8 <ej3_runCycle+0x10>
1a00100e:	a201      	add	r2, pc, #4	; (adr r2, 1a001014 <ej3_runCycle+0x2c>)
1a001010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a001014:	1a000ff3 	.word	0x1a000ff3
1a001018:	1a001075 	.word	0x1a001075
1a00101c:	1a00107d 	.word	0x1a00107d
1a001020:	1a001085 	.word	0x1a001085
1a001024:	1a00108d 	.word	0x1a00108d
1a001028:	1a001095 	.word	0x1a001095
1a00102c:	1a00109d 	.word	0x1a00109d
1a001030:	1a0010a5 	.word	0x1a0010a5
1a001034:	1a0010ad 	.word	0x1a0010ad
1a001038:	1a0010b5 	.word	0x1a0010b5
1a00103c:	1a0010bd 	.word	0x1a0010bd
1a001040:	1a0010c5 	.word	0x1a0010c5
1a001044:	1a0010cd 	.word	0x1a0010cd
1a001048:	1a0010d5 	.word	0x1a0010d5
1a00104c:	1a000ff9 	.word	0x1a000ff9
1a001050:	1a0010dd 	.word	0x1a0010dd
1a001054:	1a0010e5 	.word	0x1a0010e5
1a001058:	1a0010ed 	.word	0x1a0010ed
1a00105c:	1a0010f5 	.word	0x1a0010f5
1a001060:	1a000ff9 	.word	0x1a000ff9
1a001064:	1a0010fd 	.word	0x1a0010fd
1a001068:	1a001105 	.word	0x1a001105
1a00106c:	1a00110d 	.word	0x1a00110d
1a001070:	1a001115 	.word	0x1a001115
			react_TECX_NO_OPRIMIDO(handle);
1a001074:	4620      	mov	r0, r4
1a001076:	f7ff fc68 	bl	1a00094a <react_TECX_NO_OPRIMIDO>
			break;
1a00107a:	e7bd      	b.n	1a000ff8 <ej3_runCycle+0x10>
			react_TECX_OPRIMIDO(handle);
1a00107c:	4620      	mov	r0, r4
1a00107e:	f7ff fb1b 	bl	1a0006b8 <react_TECX_OPRIMIDO>
			break;
1a001082:	e7b9      	b.n	1a000ff8 <ej3_runCycle+0x10>
			react_TECX_VALIDACION(handle);
1a001084:	4620      	mov	r0, r4
1a001086:	f7ff fb21 	bl	1a0006cc <react_TECX_VALIDACION>
			break;
1a00108a:	e7b5      	b.n	1a000ff8 <ej3_runCycle+0x10>
			react_main_region_ESPERA(handle);
1a00108c:	4620      	mov	r0, r4
1a00108e:	f7ff fb2f 	bl	1a0006f0 <react_main_region_ESPERA>
			break;
1a001092:	e7b1      	b.n	1a000ff8 <ej3_runCycle+0x10>
			react_forma_TRIANGULAR(handle);
1a001094:	4620      	mov	r0, r4
1a001096:	f7ff fd84 	bl	1a000ba2 <react_forma_TRIANGULAR>
			break;
1a00109a:	e7ad      	b.n	1a000ff8 <ej3_runCycle+0x10>
			react_forma_CUADRADA(handle);
1a00109c:	4620      	mov	r0, r4
1a00109e:	f7ff fdc0 	bl	1a000c22 <react_forma_CUADRADA>
			break;
1a0010a2:	e7a9      	b.n	1a000ff8 <ej3_runCycle+0x10>
			react_forma_SENOIDAL(handle);
1a0010a4:	4620      	mov	r0, r4
1a0010a6:	f7ff fddd 	bl	1a000c64 <react_forma_SENOIDAL>
			break;
1a0010aa:	e7a5      	b.n	1a000ff8 <ej3_runCycle+0x10>
			react_forma_SELECCION_FORMA(handle);
1a0010ac:	4620      	mov	r0, r4
1a0010ae:	f7ff fdfa 	bl	1a000ca6 <react_forma_SELECCION_FORMA>
			break;
1a0010b2:	e7a1      	b.n	1a000ff8 <ej3_runCycle+0x10>
			react_forma_FORMA_SELECCIONADA(handle);
1a0010b4:	4620      	mov	r0, r4
1a0010b6:	f7ff fbb3 	bl	1a000820 <react_forma_FORMA_SELECCIONADA>
			break;
1a0010ba:	e79d      	b.n	1a000ff8 <ej3_runCycle+0x10>
			react_magnitud_FRECUENCIA(handle);
1a0010bc:	4620      	mov	r0, r4
1a0010be:	f7ff fcb7 	bl	1a000a30 <react_magnitud_FRECUENCIA>
			break;
1a0010c2:	e799      	b.n	1a000ff8 <ej3_runCycle+0x10>
			react_magnitud_TENSION(handle);
1a0010c4:	4620      	mov	r0, r4
1a0010c6:	f7ff fcd3 	bl	1a000a70 <react_magnitud_TENSION>
			break;
1a0010ca:	e795      	b.n	1a000ff8 <ej3_runCycle+0x10>
			react_magnitud_WAIT_SELECCION_MAGNITUD(handle);
1a0010cc:	4620      	mov	r0, r4
1a0010ce:	f7ff fb30 	bl	1a000732 <react_magnitud_WAIT_SELECCION_MAGNITUD>
			break;
1a0010d2:	e791      	b.n	1a000ff8 <ej3_runCycle+0x10>
			react_magnitud_SELECC_MAGNITUD(handle);
1a0010d4:	4620      	mov	r0, r4
1a0010d6:	f7ff fd03 	bl	1a000ae0 <react_magnitud_SELECC_MAGNITUD>
			break;
1a0010da:	e78d      	b.n	1a000ff8 <ej3_runCycle+0x10>
			react_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START(handle);
1a0010dc:	4620      	mov	r0, r4
1a0010de:	f7ff fe56 	bl	1a000d8e <react_magnitud_ELEGIR_AMPLITUD_FREC_r1_MAGNITUD_START>
			break;
1a0010e2:	e789      	b.n	1a000ff8 <ej3_runCycle+0x10>
			react_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP(handle);
1a0010e4:	4620      	mov	r0, r4
1a0010e6:	f7ff feca 	bl	1a000e7e <react_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_UP>
			break;
1a0010ea:	e785      	b.n	1a000ff8 <ej3_runCycle+0x10>
			react_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN(handle);
1a0010ec:	4620      	mov	r0, r4
1a0010ee:	f7ff fee7 	bl	1a000ec0 <react_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLI_DOWN>
			break;
1a0010f2:	e781      	b.n	1a000ff8 <ej3_runCycle+0x10>
			react_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA(handle);
1a0010f4:	4620      	mov	r0, r4
1a0010f6:	f7ff fbcc 	bl	1a000892 <react_magnitud_ELEGIR_AMPLITUD_FREC_r1_AMPLITUD_SELECCIONADA>
			break;
1a0010fa:	e77d      	b.n	1a000ff8 <ej3_runCycle+0x10>
			react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START(handle);
1a0010fc:	4620      	mov	r0, r4
1a0010fe:	f7ff fe7e 	bl	1a000dfe <react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_MAGNITUD_START>
			break;
1a001102:	e779      	b.n	1a000ff8 <ej3_runCycle+0x10>
			react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP(handle);
1a001104:	4620      	mov	r0, r4
1a001106:	f7ff ff12 	bl	1a000f2e <react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_UP>
			break;
1a00110a:	e775      	b.n	1a000ff8 <ej3_runCycle+0x10>
			react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN(handle);
1a00110c:	4620      	mov	r0, r4
1a00110e:	f7ff ff2f 	bl	1a000f70 <react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLI_DOWN>
			break;
1a001112:	e771      	b.n	1a000ff8 <ej3_runCycle+0x10>
			react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA(handle);
1a001114:	4620      	mov	r0, r4
1a001116:	f7ff fbf5 	bl	1a000904 <react_magnitud_ELEGIR_AMPLITUD_VOLTAGE_r1_AMPLITUD_SELECCIONADA>
			break;
1a00111a:	e76d      	b.n	1a000ff8 <ej3_runCycle+0x10>
	clearInEvents(handle);
1a00111c:	4620      	mov	r0, r4
1a00111e:	f7ff f8ef 	bl	1a000300 <clearInEvents>
}
1a001122:	bd10      	pop	{r4, pc}

1a001124 <ej3_raiseTimeEvent>:
	if ( ((sc_intptr_t)evid) >= ((sc_intptr_t)&(handle->timeEvents))
1a001124:	3028      	adds	r0, #40	; 0x28
1a001126:	4288      	cmp	r0, r1
1a001128:	dc04      	bgt.n	1a001134 <ej3_raiseTimeEvent+0x10>
		&&  ((sc_intptr_t)evid) < ((sc_intptr_t)&(handle->timeEvents)) + sizeof(Ej3TimeEvents))
1a00112a:	3004      	adds	r0, #4
1a00112c:	4288      	cmp	r0, r1
1a00112e:	d901      	bls.n	1a001134 <ej3_raiseTimeEvent+0x10>
		*(sc_boolean*)evid = bool_true;
1a001130:	2301      	movs	r3, #1
1a001132:	700b      	strb	r3, [r1, #0]
}
1a001134:	4770      	bx	lr

1a001136 <ej3Iface_raise_evTECXOprimido>:
	handle->iface.evTECXOprimido_value = value;
1a001136:	60c1      	str	r1, [r0, #12]
	handle->iface.evTECXOprimido_raised = bool_true;
1a001138:	2301      	movs	r3, #1
1a00113a:	7203      	strb	r3, [r0, #8]
}
1a00113c:	4770      	bx	lr

1a00113e <ej3Iface_raise_evTECXNoOprimido>:
	handle->iface.evTECXNoOprimido_raised = bool_true;
1a00113e:	2301      	movs	r3, #1
1a001140:	7403      	strb	r3, [r0, #16]
}
1a001142:	4770      	bx	lr

1a001144 <myTickHook>:


void myTickHook( void *ptr ){

	/* The sysTick Interrupt Handler only set a Flag */
	SysTick_Time_Flag = true;
1a001144:	4b01      	ldr	r3, [pc, #4]	; (1a00114c <myTickHook+0x8>)
1a001146:	2201      	movs	r2, #1
1a001148:	701a      	strb	r2, [r3, #0]
}
1a00114a:	4770      	bx	lr
1a00114c:	10000048 	.word	0x10000048

1a001150 <ej3_setTimer>:
{
1a001150:	b500      	push	{lr}
1a001152:	b083      	sub	sp, #12
	SetNewTimerTick(ticks, NOF_TIMERS, evid, time_ms, periodic);
1a001154:	9300      	str	r3, [sp, #0]
1a001156:	4613      	mov	r3, r2
1a001158:	460a      	mov	r2, r1
1a00115a:	2104      	movs	r1, #4
1a00115c:	4802      	ldr	r0, [pc, #8]	; (1a001168 <ej3_setTimer+0x18>)
1a00115e:	f000 f894 	bl	1a00128a <SetNewTimerTick>
}
1a001162:	b003      	add	sp, #12
1a001164:	f85d fb04 	ldr.w	pc, [sp], #4
1a001168:	10000098 	.word	0x10000098

1a00116c <ej3_unsetTimer>:
{
1a00116c:	b508      	push	{r3, lr}
	UnsetTimerTick( ticks, NOF_TIMERS, evid );
1a00116e:	460a      	mov	r2, r1
1a001170:	2104      	movs	r1, #4
1a001172:	4802      	ldr	r0, [pc, #8]	; (1a00117c <ej3_unsetTimer+0x10>)
1a001174:	f000 f8a2 	bl	1a0012bc <UnsetTimerTick>
}
1a001178:	bd08      	pop	{r3, pc}
1a00117a:	bf00      	nop
1a00117c:	10000098 	.word	0x10000098

1a001180 <ej3Iface_opSetForma>:
}
1a001180:	4770      	bx	lr

1a001182 <ej3Iface_opAmplitudUp>:
}
1a001182:	4770      	bx	lr

1a001184 <ej3Iface_opAmplitudDown>:
}
1a001184:	4770      	bx	lr

1a001186 <ej3Iface_opSetAmplitudFrec>:
}
1a001186:	4770      	bx	lr

1a001188 <ej3Iface_opSetAmplitudVoltage>:
}
1a001188:	4770      	bx	lr

1a00118a <ej3Iface_opLED>:
{
1a00118a:	b508      	push	{r3, lr}
	gpioWrite((LEDR + LEDNumber), State );
1a00118c:	f101 0028 	add.w	r0, r1, #40	; 0x28
1a001190:	4611      	mov	r1, r2
1a001192:	b240      	sxtb	r0, r0
1a001194:	f001 f8ae 	bl	1a0022f4 <gpioWrite>
}
1a001198:	bd08      	pop	{r3, pc}

1a00119a <Buttons_GetStatus_>:

uint32_t Buttons_GetStatus_(void) {
1a00119a:	b538      	push	{r3, r4, r5, lr}
	uint8_t ret = false;
	uint32_t idx;

	for (idx = 0; idx < 4; ++idx) {
1a00119c:	2400      	movs	r4, #0
	uint8_t ret = false;
1a00119e:	4625      	mov	r5, r4
	for (idx = 0; idx < 4; ++idx) {
1a0011a0:	e000      	b.n	1a0011a4 <Buttons_GetStatus_+0xa>
1a0011a2:	3401      	adds	r4, #1
1a0011a4:	2c03      	cmp	r4, #3
1a0011a6:	d80b      	bhi.n	1a0011c0 <Buttons_GetStatus_+0x26>
		if (gpioRead( TEC1 + idx ) == 0)
1a0011a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0011ac:	b240      	sxtb	r0, r0
1a0011ae:	f001 f8d6 	bl	1a00235e <gpioRead>
1a0011b2:	2800      	cmp	r0, #0
1a0011b4:	d1f5      	bne.n	1a0011a2 <Buttons_GetStatus_+0x8>
			ret |= 1 << idx;
1a0011b6:	2301      	movs	r3, #1
1a0011b8:	40a3      	lsls	r3, r4
1a0011ba:	431d      	orrs	r5, r3
1a0011bc:	b2ed      	uxtb	r5, r5
1a0011be:	e7f0      	b.n	1a0011a2 <Buttons_GetStatus_+0x8>
	}
	return ret;
}
1a0011c0:	4628      	mov	r0, r5
1a0011c2:	bd38      	pop	{r3, r4, r5, pc}

1a0011c4 <main>:

int main(void)
{
1a0011c4:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	uint32_t BUTTON_Status;
	/* Generic Initialization */
	boardConfig();
1a0011c6:	f001 f97d 	bl	1a0024c4 <boardInit>

	/* Init Ticks counter => TICKRATE_MS */
	tickConfig( TICKRATE_MS );
1a0011ca:	2001      	movs	r0, #1
1a0011cc:	2100      	movs	r1, #0
1a0011ce:	f001 f917 	bl	1a002400 <tickInit>

	/* Add Tick Hook */
	tickCallbackSet( myTickHook, (void*)NULL );
1a0011d2:	2100      	movs	r1, #0
1a0011d4:	4820      	ldr	r0, [pc, #128]	; (1a001258 <main+0x94>)
1a0011d6:	f001 f8f7 	bl	1a0023c8 <tickCallbackSet>

	/* Init Timer Ticks */
	InitTimerTicks( ticks, NOF_TIMERS );
1a0011da:	2104      	movs	r1, #4
1a0011dc:	481f      	ldr	r0, [pc, #124]	; (1a00125c <main+0x98>)
1a0011de:	f000 f843 	bl	1a001268 <InitTimerTicks>

	/* Statechart Initialization */
	ej3_init( &statechart );
1a0011e2:	4c1f      	ldr	r4, [pc, #124]	; (1a001260 <main+0x9c>)
1a0011e4:	4620      	mov	r0, r4
1a0011e6:	f7ff fedc 	bl	1a000fa2 <ej3_init>
	ej3_enter( &statechart );
1a0011ea:	4620      	mov	r0, r4
1a0011ec:	f7ff feee 	bl	1a000fcc <ej3_enter>
1a0011f0:	e020      	b.n	1a001234 <main+0x70>

				/* Then if there are pending events */
				if (IsPendEvent( ticks, NOF_TIMERS, ticks[i].evid ) == true) {

					/* Then Raise an Event -> Ticks.evid => OK */
					ej3_raiseTimeEvent( &statechart, ticks[i].evid );
1a0011f2:	4d1a      	ldr	r5, [pc, #104]	; (1a00125c <main+0x98>)
1a0011f4:	0126      	lsls	r6, r4, #4
1a0011f6:	59a9      	ldr	r1, [r5, r6]
1a0011f8:	4819      	ldr	r0, [pc, #100]	; (1a001260 <main+0x9c>)
1a0011fa:	f7ff ff93 	bl	1a001124 <ej3_raiseTimeEvent>

					/* Then Mark as Attached -> Ticks.evid => OK */
					MarkAsAttEvent( ticks, NOF_TIMERS, ticks[i].evid );
1a0011fe:	59aa      	ldr	r2, [r5, r6]
1a001200:	2104      	movs	r1, #4
1a001202:	4628      	mov	r0, r5
1a001204:	f000 f88b 	bl	1a00131e <MarkAsAttEvent>
			for (i = 0; i < NOF_TIMERS; i++) {
1a001208:	3401      	adds	r4, #1
1a00120a:	2c03      	cmp	r4, #3
1a00120c:	d808      	bhi.n	1a001220 <main+0x5c>
				if (IsPendEvent( ticks, NOF_TIMERS, ticks[i].evid ) == true) {
1a00120e:	4813      	ldr	r0, [pc, #76]	; (1a00125c <main+0x98>)
1a001210:	0123      	lsls	r3, r4, #4
1a001212:	58c2      	ldr	r2, [r0, r3]
1a001214:	2104      	movs	r1, #4
1a001216:	f000 f86b 	bl	1a0012f0 <IsPendEvent>
1a00121a:	2800      	cmp	r0, #0
1a00121c:	d0f4      	beq.n	1a001208 <main+0x44>
1a00121e:	e7e8      	b.n	1a0011f2 <main+0x2e>
				}
			}

			/* Then Get status of buttons */
			BUTTON_Status = Buttons_GetStatus_();
1a001220:	f7ff ffbb 	bl	1a00119a <Buttons_GetStatus_>

			/* Then if there are a pressed button */
			if (BUTTON_Status != 0){
1a001224:	4601      	mov	r1, r0
1a001226:	b190      	cbz	r0, 1a00124e <main+0x8a>
				/* Then Raise an Event -> evTECXOprimodo => OK,
				 * and Value of pressed button -> viTecla */
				ej3Iface_raise_evTECXOprimido(&statechart, BUTTON_Status);
1a001228:	480d      	ldr	r0, [pc, #52]	; (1a001260 <main+0x9c>)
1a00122a:	f7ff ff84 	bl	1a001136 <ej3Iface_raise_evTECXOprimido>
			else{
				/* Then else Raise an Event -> evTECXNoOprimido => OK */
				ej3Iface_raise_evTECXNoOprimido(&statechart);
			}
			/* Then Run an Cycle of Statechart */
			ej3_runCycle(&statechart);		// Run Cycle of Statechart
1a00122e:	480c      	ldr	r0, [pc, #48]	; (1a001260 <main+0x9c>)
1a001230:	f7ff feda 	bl	1a000fe8 <ej3_runCycle>
		__WFI();
1a001234:	bf30      	wfi
		if (SysTick_Time_Flag == true) {
1a001236:	4b0b      	ldr	r3, [pc, #44]	; (1a001264 <main+0xa0>)
1a001238:	781b      	ldrb	r3, [r3, #0]
1a00123a:	2b00      	cmp	r3, #0
1a00123c:	d0fa      	beq.n	1a001234 <main+0x70>
			SysTick_Time_Flag = false;
1a00123e:	2400      	movs	r4, #0
1a001240:	4b08      	ldr	r3, [pc, #32]	; (1a001264 <main+0xa0>)
1a001242:	701c      	strb	r4, [r3, #0]
			UpdateTimers( ticks, NOF_TIMERS );
1a001244:	2104      	movs	r1, #4
1a001246:	4805      	ldr	r0, [pc, #20]	; (1a00125c <main+0x98>)
1a001248:	f000 f87b 	bl	1a001342 <UpdateTimers>
			for (i = 0; i < NOF_TIMERS; i++) {
1a00124c:	e7dd      	b.n	1a00120a <main+0x46>
				ej3Iface_raise_evTECXNoOprimido(&statechart);
1a00124e:	4804      	ldr	r0, [pc, #16]	; (1a001260 <main+0x9c>)
1a001250:	f7ff ff75 	bl	1a00113e <ej3Iface_raise_evTECXNoOprimido>
1a001254:	e7eb      	b.n	1a00122e <main+0x6a>
1a001256:	bf00      	nop
1a001258:	1a001145 	.word	0x1a001145
1a00125c:	10000098 	.word	0x10000098
1a001260:	1000004c 	.word	0x1000004c
1a001264:	10000048 	.word	0x10000048

1a001268 <InitTimerTicks>:
#include "Ej3.h"
#include "TimerTicks.h"


void InitTimerTicks(TimerTicks *list, uint32_t len)
{
1a001268:	b430      	push	{r4, r5}
	uint32_t i;

	for(i = 0; i < len; i++) {
1a00126a:	2400      	movs	r4, #0
1a00126c:	428c      	cmp	r4, r1
1a00126e:	d20a      	bcs.n	1a001286 <InitTimerTicks+0x1e>
		list[i].evid = (sc_eventid)0;
1a001270:	0125      	lsls	r5, r4, #4
1a001272:	1942      	adds	r2, r0, r5
1a001274:	2300      	movs	r3, #0
1a001276:	5143      	str	r3, [r0, r5]
		list[i].time_ms = 0;
1a001278:	6053      	str	r3, [r2, #4]
		list[i].count = 0;
1a00127a:	6093      	str	r3, [r2, #8]
		list[i].periodic = false;
1a00127c:	7313      	strb	r3, [r2, #12]
		list[i].active = false;
1a00127e:	7353      	strb	r3, [r2, #13]
		list[i].evPending = false;
1a001280:	7393      	strb	r3, [r2, #14]
	for(i = 0; i < len; i++) {
1a001282:	3401      	adds	r4, #1
1a001284:	e7f2      	b.n	1a00126c <InitTimerTicks+0x4>
	}
}
1a001286:	bc30      	pop	{r4, r5}
1a001288:	4770      	bx	lr

1a00128a <SetNewTimerTick>:


sc_eventid SetNewTimerTick(TimerTicks *list, uint32_t len, sc_eventid evid, sc_uinteger time_ms, sc_boolean periodic)
{
1a00128a:	b470      	push	{r4, r5, r6}
	uint32_t i;

	sc_eventid ret = (sc_eventid)0;
	for(i = 0; i < len; i++) {
1a00128c:	2400      	movs	r4, #0
1a00128e:	428c      	cmp	r4, r1
1a001290:	d211      	bcs.n	1a0012b6 <SetNewTimerTick+0x2c>
		if(!list[i].evid) {
1a001292:	0125      	lsls	r5, r4, #4
1a001294:	1946      	adds	r6, r0, r5
1a001296:	5945      	ldr	r5, [r0, r5]
1a001298:	b10d      	cbz	r5, 1a00129e <SetNewTimerTick+0x14>
	for(i = 0; i < len; i++) {
1a00129a:	3401      	adds	r4, #1
1a00129c:	e7f7      	b.n	1a00128e <SetNewTimerTick+0x4>
			list[i].time_ms = time_ms;
1a00129e:	6073      	str	r3, [r6, #4]
			list[i].count = time_ms;
1a0012a0:	60b3      	str	r3, [r6, #8]
			list[i].evid = evid;
1a0012a2:	6032      	str	r2, [r6, #0]
			list[i].periodic = periodic;
1a0012a4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0012a8:	7333      	strb	r3, [r6, #12]
			list[i].active = true;
1a0012aa:	2301      	movs	r3, #1
1a0012ac:	7373      	strb	r3, [r6, #13]
			list[i].evPending = false;
1a0012ae:	2300      	movs	r3, #0
1a0012b0:	73b3      	strb	r3, [r6, #14]
			ret = evid;
1a0012b2:	4610      	mov	r0, r2
			break;
1a0012b4:	e000      	b.n	1a0012b8 <SetNewTimerTick+0x2e>
	sc_eventid ret = (sc_eventid)0;
1a0012b6:	2000      	movs	r0, #0
		}
	}
	return ret;
}
1a0012b8:	bc70      	pop	{r4, r5, r6}
1a0012ba:	4770      	bx	lr

1a0012bc <UnsetTimerTick>:
void* UnsetTimerTick(TimerTicks *list, uint32_t len, sc_eventid id)
{
	uint32_t i;
	sc_eventid ret = (sc_eventid)0;

	for(i = 0; i < len; i++) {
1a0012bc:	2300      	movs	r3, #0
1a0012be:	428b      	cmp	r3, r1
1a0012c0:	d214      	bcs.n	1a0012ec <UnsetTimerTick+0x30>
{
1a0012c2:	b430      	push	{r4, r5}
		if(list[i].evid == id) {
1a0012c4:	011c      	lsls	r4, r3, #4
1a0012c6:	1905      	adds	r5, r0, r4
1a0012c8:	5904      	ldr	r4, [r0, r4]
1a0012ca:	4294      	cmp	r4, r2
1a0012cc:	d004      	beq.n	1a0012d8 <UnsetTimerTick+0x1c>
	for(i = 0; i < len; i++) {
1a0012ce:	3301      	adds	r3, #1
1a0012d0:	428b      	cmp	r3, r1
1a0012d2:	d3f7      	bcc.n	1a0012c4 <UnsetTimerTick+0x8>
	sc_eventid ret = (sc_eventid)0;
1a0012d4:	2000      	movs	r0, #0
			list[i].evPending = false;
			ret = id;
			break;
		}
	}
	return ret;
1a0012d6:	e007      	b.n	1a0012e8 <UnsetTimerTick+0x2c>
			list[i].evid = (sc_eventid)0;
1a0012d8:	2300      	movs	r3, #0
1a0012da:	602b      	str	r3, [r5, #0]
			list[i].time_ms = 0;
1a0012dc:	606b      	str	r3, [r5, #4]
			list[i].count = 0;
1a0012de:	60ab      	str	r3, [r5, #8]
			list[i].periodic = false;
1a0012e0:	732b      	strb	r3, [r5, #12]
			list[i].active = false;
1a0012e2:	736b      	strb	r3, [r5, #13]
			list[i].evPending = false;
1a0012e4:	73ab      	strb	r3, [r5, #14]
			ret = id;
1a0012e6:	4610      	mov	r0, r2
}
1a0012e8:	bc30      	pop	{r4, r5}
1a0012ea:	4770      	bx	lr
	sc_eventid ret = (sc_eventid)0;
1a0012ec:	2000      	movs	r0, #0
}
1a0012ee:	4770      	bx	lr

1a0012f0 <IsPendEvent>:

sc_boolean IsPendEvent(TimerTicks *list, uint32_t len, sc_eventid id)
{
	int i;
	sc_boolean ret = false;
	for(i=0; i < len; i++) {
1a0012f0:	2300      	movs	r3, #0
1a0012f2:	428b      	cmp	r3, r1
1a0012f4:	d211      	bcs.n	1a00131a <IsPendEvent+0x2a>
{
1a0012f6:	b430      	push	{r4, r5}
1a0012f8:	e002      	b.n	1a001300 <IsPendEvent+0x10>
	for(i=0; i < len; i++) {
1a0012fa:	3301      	adds	r3, #1
1a0012fc:	428b      	cmp	r3, r1
1a0012fe:	d209      	bcs.n	1a001314 <IsPendEvent+0x24>
		if((list[i].evid == id) && (list[i].evPending == true)) {
1a001300:	011c      	lsls	r4, r3, #4
1a001302:	1905      	adds	r5, r0, r4
1a001304:	5904      	ldr	r4, [r0, r4]
1a001306:	4294      	cmp	r4, r2
1a001308:	d1f7      	bne.n	1a0012fa <IsPendEvent+0xa>
1a00130a:	7bac      	ldrb	r4, [r5, #14]
1a00130c:	2c00      	cmp	r4, #0
1a00130e:	d0f4      	beq.n	1a0012fa <IsPendEvent+0xa>
			ret = true;
1a001310:	2001      	movs	r0, #1
1a001312:	e000      	b.n	1a001316 <IsPendEvent+0x26>
	sc_boolean ret = false;
1a001314:	2000      	movs	r0, #0
			break;
		}
	}
	return ret;
}
1a001316:	bc30      	pop	{r4, r5}
1a001318:	4770      	bx	lr
	sc_boolean ret = false;
1a00131a:	2000      	movs	r0, #0
}
1a00131c:	4770      	bx	lr

1a00131e <MarkAsAttEvent>:

void MarkAsAttEvent(TimerTicks *list, uint32_t len, sc_eventid id)
{
	uint32_t i;

	for(i = 0; i < len; i++) {
1a00131e:	2300      	movs	r3, #0
1a001320:	428b      	cmp	r3, r1
1a001322:	d20d      	bcs.n	1a001340 <MarkAsAttEvent+0x22>
{
1a001324:	b430      	push	{r4, r5}
		if(list[i].evid == id) {
1a001326:	011c      	lsls	r4, r3, #4
1a001328:	1905      	adds	r5, r0, r4
1a00132a:	5904      	ldr	r4, [r0, r4]
1a00132c:	4294      	cmp	r4, r2
1a00132e:	d003      	beq.n	1a001338 <MarkAsAttEvent+0x1a>
	for(i = 0; i < len; i++) {
1a001330:	3301      	adds	r3, #1
1a001332:	428b      	cmp	r3, r1
1a001334:	d3f7      	bcc.n	1a001326 <MarkAsAttEvent+0x8>
1a001336:	e001      	b.n	1a00133c <MarkAsAttEvent+0x1e>
			list[i].evPending = false;
1a001338:	2300      	movs	r3, #0
1a00133a:	73ab      	strb	r3, [r5, #14]
			break;
		}
	}
}
1a00133c:	bc30      	pop	{r4, r5}
1a00133e:	4770      	bx	lr
1a001340:	4770      	bx	lr

1a001342 <UpdateTimers>:

void UpdateTimers(TimerTicks *list, uint32_t len)
{
	uint32_t i;

	for(i = 0; i < len; i++) {
1a001342:	2300      	movs	r3, #0
1a001344:	428b      	cmp	r3, r1
1a001346:	d21d      	bcs.n	1a001384 <UpdateTimers+0x42>
{
1a001348:	b410      	push	{r4}
1a00134a:	e006      	b.n	1a00135a <UpdateTimers+0x18>
				list[i].count--;
			if(!list[i].count) {
				if(list[i].periodic)
					list[i].count = list[i].time_ms;
				else
					list[i].active = false;
1a00134c:	2400      	movs	r4, #0
1a00134e:	7354      	strb	r4, [r2, #13]
				list[i].evPending = true;
1a001350:	2401      	movs	r4, #1
1a001352:	7394      	strb	r4, [r2, #14]
	for(i = 0; i < len; i++) {
1a001354:	3301      	adds	r3, #1
1a001356:	428b      	cmp	r3, r1
1a001358:	d211      	bcs.n	1a00137e <UpdateTimers+0x3c>
		if(list[i].active == true) {
1a00135a:	eb00 1203 	add.w	r2, r0, r3, lsl #4
1a00135e:	7b54      	ldrb	r4, [r2, #13]
1a001360:	2c00      	cmp	r4, #0
1a001362:	d0f7      	beq.n	1a001354 <UpdateTimers+0x12>
			if(list[i].count)
1a001364:	6894      	ldr	r4, [r2, #8]
1a001366:	b10c      	cbz	r4, 1a00136c <UpdateTimers+0x2a>
				list[i].count--;
1a001368:	3c01      	subs	r4, #1
1a00136a:	6094      	str	r4, [r2, #8]
			if(!list[i].count) {
1a00136c:	6894      	ldr	r4, [r2, #8]
1a00136e:	2c00      	cmp	r4, #0
1a001370:	d1f0      	bne.n	1a001354 <UpdateTimers+0x12>
				if(list[i].periodic)
1a001372:	7b14      	ldrb	r4, [r2, #12]
1a001374:	2c00      	cmp	r4, #0
1a001376:	d0e9      	beq.n	1a00134c <UpdateTimers+0xa>
					list[i].count = list[i].time_ms;
1a001378:	6854      	ldr	r4, [r2, #4]
1a00137a:	6094      	str	r4, [r2, #8]
1a00137c:	e7e8      	b.n	1a001350 <UpdateTimers+0xe>
			}
		}
	}
}
1a00137e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001382:	4770      	bx	lr
1a001384:	4770      	bx	lr

1a001386 <initialise_monitor_handles>:
}
1a001386:	4770      	bx	lr

1a001388 <Reset_Handler>:
void Reset_Handler(void) {
1a001388:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a00138a:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a00138c:	4b19      	ldr	r3, [pc, #100]	; (1a0013f4 <Reset_Handler+0x6c>)
1a00138e:	4a1a      	ldr	r2, [pc, #104]	; (1a0013f8 <Reset_Handler+0x70>)
1a001390:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a001392:	3304      	adds	r3, #4
1a001394:	4a19      	ldr	r2, [pc, #100]	; (1a0013fc <Reset_Handler+0x74>)
1a001396:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001398:	2300      	movs	r3, #0
1a00139a:	e005      	b.n	1a0013a8 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a00139c:	4a18      	ldr	r2, [pc, #96]	; (1a001400 <Reset_Handler+0x78>)
1a00139e:	f04f 31ff 	mov.w	r1, #4294967295
1a0013a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0013a6:	3301      	adds	r3, #1
1a0013a8:	2b07      	cmp	r3, #7
1a0013aa:	d9f7      	bls.n	1a00139c <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a0013ac:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a0013ae:	4b15      	ldr	r3, [pc, #84]	; (1a001404 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0013b0:	e007      	b.n	1a0013c2 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a0013b2:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0013b6:	689a      	ldr	r2, [r3, #8]
1a0013b8:	6859      	ldr	r1, [r3, #4]
1a0013ba:	6818      	ldr	r0, [r3, #0]
1a0013bc:	f7fe fee5 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0013c0:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0013c2:	4a11      	ldr	r2, [pc, #68]	; (1a001408 <Reset_Handler+0x80>)
1a0013c4:	4293      	cmp	r3, r2
1a0013c6:	d3f4      	bcc.n	1a0013b2 <Reset_Handler+0x2a>
1a0013c8:	e006      	b.n	1a0013d8 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a0013ca:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0013cc:	6859      	ldr	r1, [r3, #4]
1a0013ce:	f854 0b08 	ldr.w	r0, [r4], #8
1a0013d2:	f7fe fee9 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0013d6:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0013d8:	4a0c      	ldr	r2, [pc, #48]	; (1a00140c <Reset_Handler+0x84>)
1a0013da:	4293      	cmp	r3, r2
1a0013dc:	d3f5      	bcc.n	1a0013ca <Reset_Handler+0x42>
    SystemInit();
1a0013de:	f000 fe6f 	bl	1a0020c0 <SystemInit>
    __libc_init_array();
1a0013e2:	f001 fa2b 	bl	1a00283c <__libc_init_array>
    initialise_monitor_handles();
1a0013e6:	f7ff ffce 	bl	1a001386 <initialise_monitor_handles>
    main();
1a0013ea:	f7ff feeb 	bl	1a0011c4 <main>
        __asm__ volatile("wfi");
1a0013ee:	bf30      	wfi
1a0013f0:	e7fd      	b.n	1a0013ee <Reset_Handler+0x66>
1a0013f2:	bf00      	nop
1a0013f4:	40053100 	.word	0x40053100
1a0013f8:	10df1000 	.word	0x10df1000
1a0013fc:	01dff7ff 	.word	0x01dff7ff
1a001400:	e000e280 	.word	0xe000e280
1a001404:	1a000114 	.word	0x1a000114
1a001408:	1a000150 	.word	0x1a000150
1a00140c:	1a000178 	.word	0x1a000178

1a001410 <_fini>:
void _fini(void) {}
1a001410:	4770      	bx	lr

1a001412 <_init>:
void _init(void) {}
1a001412:	4770      	bx	lr

1a001414 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a001414:	2300      	movs	r3, #0
1a001416:	2b1c      	cmp	r3, #28
1a001418:	d812      	bhi.n	1a001440 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a00141a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a00141c:	4a09      	ldr	r2, [pc, #36]	; (1a001444 <Board_SetupMuxing+0x30>)
1a00141e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a001422:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a001426:	784a      	ldrb	r2, [r1, #1]
1a001428:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00142a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00142e:	4906      	ldr	r1, [pc, #24]	; (1a001448 <Board_SetupMuxing+0x34>)
1a001430:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a001434:	3301      	adds	r3, #1
1a001436:	2b1c      	cmp	r3, #28
1a001438:	d9f0      	bls.n	1a00141c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a00143a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00143e:	4770      	bx	lr
1a001440:	4770      	bx	lr
1a001442:	bf00      	nop
1a001444:	1a0028bc 	.word	0x1a0028bc
1a001448:	40086000 	.word	0x40086000

1a00144c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a00144c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00144e:	4a17      	ldr	r2, [pc, #92]	; (1a0014ac <Board_SetupClocking+0x60>)
1a001450:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a001454:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001458:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00145c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a001460:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a001464:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001468:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00146c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a001470:	2201      	movs	r2, #1
1a001472:	490f      	ldr	r1, [pc, #60]	; (1a0014b0 <Board_SetupClocking+0x64>)
1a001474:	2006      	movs	r0, #6
1a001476:	f000 f9f9 	bl	1a00186c <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00147a:	2400      	movs	r4, #0
1a00147c:	b14c      	cbz	r4, 1a001492 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00147e:	4b0b      	ldr	r3, [pc, #44]	; (1a0014ac <Board_SetupClocking+0x60>)
1a001480:	685a      	ldr	r2, [r3, #4]
1a001482:	f022 020c 	bic.w	r2, r2, #12
1a001486:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a001488:	685a      	ldr	r2, [r3, #4]
1a00148a:	f042 0203 	orr.w	r2, r2, #3
1a00148e:	605a      	str	r2, [r3, #4]
}
1a001490:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a001492:	4808      	ldr	r0, [pc, #32]	; (1a0014b4 <Board_SetupClocking+0x68>)
1a001494:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001498:	2301      	movs	r3, #1
1a00149a:	788a      	ldrb	r2, [r1, #2]
1a00149c:	7849      	ldrb	r1, [r1, #1]
1a00149e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0014a2:	f000 fcbb 	bl	1a001e1c <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0014a6:	3401      	adds	r4, #1
1a0014a8:	e7e8      	b.n	1a00147c <Board_SetupClocking+0x30>
1a0014aa:	bf00      	nop
1a0014ac:	40043000 	.word	0x40043000
1a0014b0:	0c28cb00 	.word	0x0c28cb00
1a0014b4:	1a0028b8 	.word	0x1a0028b8

1a0014b8 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0014b8:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0014ba:	f7ff ffab 	bl	1a001414 <Board_SetupMuxing>
    Board_SetupClocking();
1a0014be:	f7ff ffc5 	bl	1a00144c <Board_SetupClocking>
}
1a0014c2:	bd08      	pop	{r3, pc}

1a0014c4 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0014c4:	2200      	movs	r2, #0
1a0014c6:	2a05      	cmp	r2, #5
1a0014c8:	d819      	bhi.n	1a0014fe <Board_LED_Init+0x3a>
{
1a0014ca:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0014cc:	490c      	ldr	r1, [pc, #48]	; (1a001500 <Board_LED_Init+0x3c>)
1a0014ce:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a0014d2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a0014d6:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0014d8:	4b0a      	ldr	r3, [pc, #40]	; (1a001504 <Board_LED_Init+0x40>)
1a0014da:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a0014de:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a0014e2:	2001      	movs	r0, #1
1a0014e4:	40a0      	lsls	r0, r4
1a0014e6:	4301      	orrs	r1, r0
1a0014e8:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a0014ec:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a0014f0:	2100      	movs	r1, #0
1a0014f2:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0014f4:	3201      	adds	r2, #1
1a0014f6:	2a05      	cmp	r2, #5
1a0014f8:	d9e8      	bls.n	1a0014cc <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a0014fa:	bc70      	pop	{r4, r5, r6}
1a0014fc:	4770      	bx	lr
1a0014fe:	4770      	bx	lr
1a001500:	1a00293c 	.word	0x1a00293c
1a001504:	400f4000 	.word	0x400f4000

1a001508 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a001508:	2300      	movs	r3, #0
1a00150a:	2b03      	cmp	r3, #3
1a00150c:	d816      	bhi.n	1a00153c <Board_TEC_Init+0x34>
{
1a00150e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a001510:	490b      	ldr	r1, [pc, #44]	; (1a001540 <Board_TEC_Init+0x38>)
1a001512:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a001516:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00151a:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a00151c:	4c09      	ldr	r4, [pc, #36]	; (1a001544 <Board_TEC_Init+0x3c>)
1a00151e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a001522:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a001526:	2001      	movs	r0, #1
1a001528:	40a8      	lsls	r0, r5
1a00152a:	ea21 0100 	bic.w	r1, r1, r0
1a00152e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a001532:	3301      	adds	r3, #1
1a001534:	2b03      	cmp	r3, #3
1a001536:	d9eb      	bls.n	1a001510 <Board_TEC_Init+0x8>
   }
}
1a001538:	bc30      	pop	{r4, r5}
1a00153a:	4770      	bx	lr
1a00153c:	4770      	bx	lr
1a00153e:	bf00      	nop
1a001540:	1a002934 	.word	0x1a002934
1a001544:	400f4000 	.word	0x400f4000

1a001548 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a001548:	2300      	movs	r3, #0
1a00154a:	2b08      	cmp	r3, #8
1a00154c:	d816      	bhi.n	1a00157c <Board_GPIO_Init+0x34>
{
1a00154e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a001550:	490b      	ldr	r1, [pc, #44]	; (1a001580 <Board_GPIO_Init+0x38>)
1a001552:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a001556:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00155a:	784d      	ldrb	r5, [r1, #1]
1a00155c:	4c09      	ldr	r4, [pc, #36]	; (1a001584 <Board_GPIO_Init+0x3c>)
1a00155e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a001562:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a001566:	2001      	movs	r0, #1
1a001568:	40a8      	lsls	r0, r5
1a00156a:	ea21 0100 	bic.w	r1, r1, r0
1a00156e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a001572:	3301      	adds	r3, #1
1a001574:	2b08      	cmp	r3, #8
1a001576:	d9eb      	bls.n	1a001550 <Board_GPIO_Init+0x8>
   }
}
1a001578:	bc30      	pop	{r4, r5}
1a00157a:	4770      	bx	lr
1a00157c:	4770      	bx	lr
1a00157e:	bf00      	nop
1a001580:	1a002948 	.word	0x1a002948
1a001584:	400f4000 	.word	0x400f4000

1a001588 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a001588:	b510      	push	{r4, lr}
1a00158a:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a00158c:	4c08      	ldr	r4, [pc, #32]	; (1a0015b0 <Board_ADC_Init+0x28>)
1a00158e:	4669      	mov	r1, sp
1a001590:	4620      	mov	r0, r4
1a001592:	f000 f92b 	bl	1a0017ec <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a001596:	4a07      	ldr	r2, [pc, #28]	; (1a0015b4 <Board_ADC_Init+0x2c>)
1a001598:	4669      	mov	r1, sp
1a00159a:	4620      	mov	r0, r4
1a00159c:	f000 f946 	bl	1a00182c <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a0015a0:	2200      	movs	r2, #0
1a0015a2:	4669      	mov	r1, sp
1a0015a4:	4620      	mov	r0, r4
1a0015a6:	f000 f95a 	bl	1a00185e <Chip_ADC_SetResolution>
}
1a0015aa:	b002      	add	sp, #8
1a0015ac:	bd10      	pop	{r4, pc}
1a0015ae:	bf00      	nop
1a0015b0:	400e3000 	.word	0x400e3000
1a0015b4:	00061a80 	.word	0x00061a80

1a0015b8 <Board_SPI_Init>:
{
1a0015b8:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a0015ba:	4c0b      	ldr	r4, [pc, #44]	; (1a0015e8 <Board_SPI_Init+0x30>)
1a0015bc:	4620      	mov	r0, r4
1a0015be:	f000 f895 	bl	1a0016ec <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0015c2:	6863      	ldr	r3, [r4, #4]
1a0015c4:	f023 0304 	bic.w	r3, r3, #4
1a0015c8:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0015ca:	6823      	ldr	r3, [r4, #0]
1a0015cc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0015d0:	f043 0307 	orr.w	r3, r3, #7
1a0015d4:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a0015d6:	4905      	ldr	r1, [pc, #20]	; (1a0015ec <Board_SPI_Init+0x34>)
1a0015d8:	4620      	mov	r0, r4
1a0015da:	f000 f868 	bl	1a0016ae <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0015de:	6863      	ldr	r3, [r4, #4]
1a0015e0:	f043 0302 	orr.w	r3, r3, #2
1a0015e4:	6063      	str	r3, [r4, #4]
}
1a0015e6:	bd10      	pop	{r4, pc}
1a0015e8:	400c5000 	.word	0x400c5000
1a0015ec:	000186a0 	.word	0x000186a0

1a0015f0 <Board_I2C_Init>:
{
1a0015f0:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a0015f2:	2000      	movs	r0, #0
1a0015f4:	f000 f8a6 	bl	1a001744 <Chip_I2C_Init>
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0015f8:	4b04      	ldr	r3, [pc, #16]	; (1a00160c <Board_I2C_Init+0x1c>)
1a0015fa:	f640 0208 	movw	r2, #2056	; 0x808
1a0015fe:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a001602:	4903      	ldr	r1, [pc, #12]	; (1a001610 <Board_I2C_Init+0x20>)
1a001604:	2000      	movs	r0, #0
1a001606:	f000 f8af 	bl	1a001768 <Chip_I2C_SetClockRate>
}
1a00160a:	bd08      	pop	{r3, pc}
1a00160c:	40086000 	.word	0x40086000
1a001610:	000f4240 	.word	0x000f4240

1a001614 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a001614:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a001616:	4c07      	ldr	r4, [pc, #28]	; (1a001634 <Board_Debug_Init+0x20>)
1a001618:	4620      	mov	r0, r4
1a00161a:	f000 fcb9 	bl	1a001f90 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a00161e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a001622:	4620      	mov	r0, r4
1a001624:	f000 fcde 	bl	1a001fe4 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a001628:	2303      	movs	r3, #3
1a00162a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a00162c:	2301      	movs	r3, #1
1a00162e:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a001630:	bd10      	pop	{r4, pc}
1a001632:	bf00      	nop
1a001634:	400c1000 	.word	0x400c1000

1a001638 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a001638:	b508      	push	{r3, lr}
   DEBUGINIT();
1a00163a:	f7ff ffeb 	bl	1a001614 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00163e:	4809      	ldr	r0, [pc, #36]	; (1a001664 <Board_Init+0x2c>)
1a001640:	f000 f8ae 	bl	1a0017a0 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a001644:	f7ff ff80 	bl	1a001548 <Board_GPIO_Init>
   Board_ADC_Init();
1a001648:	f7ff ff9e 	bl	1a001588 <Board_ADC_Init>
   Board_SPI_Init();
1a00164c:	f7ff ffb4 	bl	1a0015b8 <Board_SPI_Init>
   Board_I2C_Init();
1a001650:	f7ff ffce 	bl	1a0015f0 <Board_I2C_Init>

   Board_LED_Init();
1a001654:	f7ff ff36 	bl	1a0014c4 <Board_LED_Init>
   Board_TEC_Init();
1a001658:	f7ff ff56 	bl	1a001508 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a00165c:	f000 f9b2 	bl	1a0019c4 <SystemCoreClockUpdate>
}
1a001660:	bd08      	pop	{r3, pc}
1a001662:	bf00      	nop
1a001664:	400f4000 	.word	0x400f4000

1a001668 <__stdio_init>:
{
   return Board_UARTGetChar();;
}

void __stdio_init()
{
1a001668:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a00166a:	f7ff ffd3 	bl	1a001614 <Board_Debug_Init>
1a00166e:	bd08      	pop	{r3, pc}

1a001670 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001670:	4b03      	ldr	r3, [pc, #12]	; (1a001680 <Chip_SSP_GetClockIndex+0x10>)
1a001672:	4298      	cmp	r0, r3
1a001674:	d001      	beq.n	1a00167a <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a001676:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a001678:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a00167a:	20a5      	movs	r0, #165	; 0xa5
1a00167c:	4770      	bx	lr
1a00167e:	bf00      	nop
1a001680:	400c5000 	.word	0x400c5000

1a001684 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001684:	4b04      	ldr	r3, [pc, #16]	; (1a001698 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a001686:	4298      	cmp	r0, r3
1a001688:	d002      	beq.n	1a001690 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a00168a:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00168e:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a001690:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a001694:	4770      	bx	lr
1a001696:	bf00      	nop
1a001698:	400c5000 	.word	0x400c5000

1a00169c <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a00169c:	6803      	ldr	r3, [r0, #0]
1a00169e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0016a2:	0209      	lsls	r1, r1, #8
1a0016a4:	b289      	uxth	r1, r1
1a0016a6:	4319      	orrs	r1, r3
1a0016a8:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a0016aa:	6102      	str	r2, [r0, #16]
}
1a0016ac:	4770      	bx	lr

1a0016ae <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a0016ae:	b570      	push	{r4, r5, r6, lr}
1a0016b0:	4606      	mov	r6, r0
1a0016b2:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0016b4:	f7ff ffe6 	bl	1a001684 <Chip_SSP_GetPeriphClockIndex>
1a0016b8:	f000 fc2e 	bl	1a001f18 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0016bc:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a0016be:	f04f 33ff 	mov.w	r3, #4294967295
	cr0_div = 0;
1a0016c2:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0016c4:	e000      	b.n	1a0016c8 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0016c6:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a0016c8:	42ab      	cmp	r3, r5
1a0016ca:	d90b      	bls.n	1a0016e4 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0016cc:	1c4c      	adds	r4, r1, #1
1a0016ce:	fb02 f304 	mul.w	r3, r2, r4
1a0016d2:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0016d6:	429d      	cmp	r5, r3
1a0016d8:	d2f6      	bcs.n	1a0016c8 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a0016da:	2cff      	cmp	r4, #255	; 0xff
1a0016dc:	d9f3      	bls.n	1a0016c6 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a0016de:	3202      	adds	r2, #2
				cr0_div = 0;
1a0016e0:	2100      	movs	r1, #0
1a0016e2:	e7f1      	b.n	1a0016c8 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a0016e4:	4630      	mov	r0, r6
1a0016e6:	f7ff ffd9 	bl	1a00169c <Chip_SSP_SetClockRate>
}
1a0016ea:	bd70      	pop	{r4, r5, r6, pc}

1a0016ec <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a0016ec:	b510      	push	{r4, lr}
1a0016ee:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0016f0:	f7ff ffbe 	bl	1a001670 <Chip_SSP_GetClockIndex>
1a0016f4:	f000 fbf6 	bl	1a001ee4 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0016f8:	4620      	mov	r0, r4
1a0016fa:	f7ff ffc3 	bl	1a001684 <Chip_SSP_GetPeriphClockIndex>
1a0016fe:	f000 fbf1 	bl	1a001ee4 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a001702:	6863      	ldr	r3, [r4, #4]
1a001704:	f023 0304 	bic.w	r3, r3, #4
1a001708:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00170a:	6823      	ldr	r3, [r4, #0]
1a00170c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001710:	f043 0307 	orr.w	r3, r3, #7
1a001714:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a001716:	4902      	ldr	r1, [pc, #8]	; (1a001720 <Chip_SSP_Init+0x34>)
1a001718:	4620      	mov	r0, r4
1a00171a:	f7ff ffc8 	bl	1a0016ae <Chip_SSP_SetBitRate>
}
1a00171e:	bd10      	pop	{r4, pc}
1a001720:	000186a0 	.word	0x000186a0

1a001724 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a001724:	2901      	cmp	r1, #1
1a001726:	d109      	bne.n	1a00173c <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a001728:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00172c:	0082      	lsls	r2, r0, #2
1a00172e:	4b04      	ldr	r3, [pc, #16]	; (1a001740 <Chip_I2C_EventHandler+0x1c>)
1a001730:	4413      	add	r3, r2
1a001732:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a001734:	7d13      	ldrb	r3, [r2, #20]
1a001736:	b2db      	uxtb	r3, r3
1a001738:	2b04      	cmp	r3, #4
1a00173a:	d0fb      	beq.n	1a001734 <Chip_I2C_EventHandler+0x10>
}
1a00173c:	4770      	bx	lr
1a00173e:	bf00      	nop
1a001740:	10000000 	.word	0x10000000

1a001744 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a001744:	b570      	push	{r4, r5, r6, lr}
1a001746:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a001748:	4e06      	ldr	r6, [pc, #24]	; (1a001764 <Chip_I2C_Init+0x20>)
1a00174a:	00c4      	lsls	r4, r0, #3
1a00174c:	1a22      	subs	r2, r4, r0
1a00174e:	0093      	lsls	r3, r2, #2
1a001750:	4433      	add	r3, r6
1a001752:	8898      	ldrh	r0, [r3, #4]
1a001754:	f000 fbc6 	bl	1a001ee4 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a001758:	1b64      	subs	r4, r4, r5
1a00175a:	00a3      	lsls	r3, r4, #2
1a00175c:	58f3      	ldr	r3, [r6, r3]
1a00175e:	226c      	movs	r2, #108	; 0x6c
1a001760:	619a      	str	r2, [r3, #24]
}
1a001762:	bd70      	pop	{r4, r5, r6, pc}
1a001764:	10000000 	.word	0x10000000

1a001768 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a001768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00176c:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a00176e:	4e0b      	ldr	r6, [pc, #44]	; (1a00179c <Chip_I2C_SetClockRate+0x34>)
1a001770:	00c5      	lsls	r5, r0, #3
1a001772:	1a2b      	subs	r3, r5, r0
1a001774:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a001778:	eb06 0308 	add.w	r3, r6, r8
1a00177c:	8898      	ldrh	r0, [r3, #4]
1a00177e:	f000 fbcb 	bl	1a001f18 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a001782:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a001786:	f856 3008 	ldr.w	r3, [r6, r8]
1a00178a:	0842      	lsrs	r2, r0, #1
1a00178c:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a00178e:	f856 3008 	ldr.w	r3, [r6, r8]
1a001792:	691a      	ldr	r2, [r3, #16]
1a001794:	1a80      	subs	r0, r0, r2
1a001796:	6158      	str	r0, [r3, #20]
}
1a001798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00179c:	10000000 	.word	0x10000000

1a0017a0 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a0017a0:	4770      	bx	lr
1a0017a2:	Address 0x1a0017a2 is out of bounds.


1a0017a4 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a0017a4:	4b03      	ldr	r3, [pc, #12]	; (1a0017b4 <Chip_ADC_GetClockIndex+0x10>)
1a0017a6:	4298      	cmp	r0, r3
1a0017a8:	d001      	beq.n	1a0017ae <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a0017aa:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a0017ac:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a0017ae:	2004      	movs	r0, #4
1a0017b0:	4770      	bx	lr
1a0017b2:	bf00      	nop
1a0017b4:	400e4000 	.word	0x400e4000

1a0017b8 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0017b8:	b570      	push	{r4, r5, r6, lr}
1a0017ba:	460d      	mov	r5, r1
1a0017bc:	4614      	mov	r4, r2
1a0017be:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0017c0:	f7ff fff0 	bl	1a0017a4 <Chip_ADC_GetClockIndex>
1a0017c4:	f000 fba8 	bl	1a001f18 <Chip_Clock_GetRate>
	if (burstMode) {
1a0017c8:	b155      	cbz	r5, 1a0017e0 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a0017ca:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a0017ce:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a0017d2:	0064      	lsls	r4, r4, #1
1a0017d4:	fbb0 f0f4 	udiv	r0, r0, r4
1a0017d8:	b2c0      	uxtb	r0, r0
1a0017da:	3801      	subs	r0, #1
	return div;
}
1a0017dc:	b2c0      	uxtb	r0, r0
1a0017de:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a0017e0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0017e4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a0017e8:	e7f1      	b.n	1a0017ce <getClkDiv+0x16>
1a0017ea:	Address 0x1a0017ea is out of bounds.


1a0017ec <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a0017ec:	b538      	push	{r3, r4, r5, lr}
1a0017ee:	4605      	mov	r5, r0
1a0017f0:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a0017f2:	f7ff ffd7 	bl	1a0017a4 <Chip_ADC_GetClockIndex>
1a0017f6:	2301      	movs	r3, #1
1a0017f8:	461a      	mov	r2, r3
1a0017fa:	4619      	mov	r1, r3
1a0017fc:	f000 fb54 	bl	1a001ea8 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a001800:	2100      	movs	r1, #0
1a001802:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a001804:	4a08      	ldr	r2, [pc, #32]	; (1a001828 <Chip_ADC_Init+0x3c>)
1a001806:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a001808:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a00180a:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a00180c:	230b      	movs	r3, #11
1a00180e:	4628      	mov	r0, r5
1a001810:	f7ff ffd2 	bl	1a0017b8 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001814:	0200      	lsls	r0, r0, #8
1a001816:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00181a:	7920      	ldrb	r0, [r4, #4]
1a00181c:	0440      	lsls	r0, r0, #17
1a00181e:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a001822:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a001824:	6028      	str	r0, [r5, #0]
}
1a001826:	bd38      	pop	{r3, r4, r5, pc}
1a001828:	00061a80 	.word	0x00061a80

1a00182c <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a00182c:	b570      	push	{r4, r5, r6, lr}
1a00182e:	4605      	mov	r5, r0
1a001830:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a001832:	6804      	ldr	r4, [r0, #0]
1a001834:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a001838:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a00183c:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a00183e:	790b      	ldrb	r3, [r1, #4]
1a001840:	f1c3 030b 	rsb	r3, r3, #11
1a001844:	b2db      	uxtb	r3, r3
1a001846:	7949      	ldrb	r1, [r1, #5]
1a001848:	f7ff ffb6 	bl	1a0017b8 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a00184c:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001850:	7933      	ldrb	r3, [r6, #4]
1a001852:	045b      	lsls	r3, r3, #17
1a001854:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a001858:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a00185a:	602b      	str	r3, [r5, #0]
}
1a00185c:	bd70      	pop	{r4, r5, r6, pc}

1a00185e <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a00185e:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a001860:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a001862:	680a      	ldr	r2, [r1, #0]
1a001864:	f7ff ffe2 	bl	1a00182c <Chip_ADC_SetSampleRate>
}
1a001868:	bd08      	pop	{r3, pc}
1a00186a:	Address 0x1a00186a is out of bounds.


1a00186c <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a00186c:	b570      	push	{r4, r5, r6, lr}
1a00186e:	b08a      	sub	sp, #40	; 0x28
1a001870:	4605      	mov	r5, r0
1a001872:	460e      	mov	r6, r1
1a001874:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a001876:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00187a:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a00187c:	2806      	cmp	r0, #6
1a00187e:	d018      	beq.n	1a0018b2 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a001880:	2300      	movs	r3, #0
1a001882:	2201      	movs	r2, #1
1a001884:	4629      	mov	r1, r5
1a001886:	2004      	movs	r0, #4
1a001888:	f000 fac8 	bl	1a001e1c <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a00188c:	4a4a      	ldr	r2, [pc, #296]	; (1a0019b8 <Chip_SetupCoreClock+0x14c>)
1a00188e:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a001890:	f043 0301 	orr.w	r3, r3, #1
1a001894:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a001896:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a00189a:	a901      	add	r1, sp, #4
1a00189c:	4630      	mov	r0, r6
1a00189e:	f000 fa35 	bl	1a001d0c <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0018a2:	4b46      	ldr	r3, [pc, #280]	; (1a0019bc <Chip_SetupCoreClock+0x150>)
1a0018a4:	429e      	cmp	r6, r3
1a0018a6:	d916      	bls.n	1a0018d6 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0018a8:	9b01      	ldr	r3, [sp, #4]
1a0018aa:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0018ae:	d003      	beq.n	1a0018b8 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a0018b0:	e7fe      	b.n	1a0018b0 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a0018b2:	f000 f98d 	bl	1a001bd0 <Chip_Clock_EnableCrystal>
1a0018b6:	e7e3      	b.n	1a001880 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a0018b8:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0018bc:	d005      	beq.n	1a0018ca <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0018be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0018c2:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a0018c4:	2500      	movs	r5, #0
			direct = 1;
1a0018c6:	2601      	movs	r6, #1
1a0018c8:	e007      	b.n	1a0018da <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a0018ca:	9b04      	ldr	r3, [sp, #16]
1a0018cc:	3301      	adds	r3, #1
1a0018ce:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a0018d0:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a0018d2:	2600      	movs	r6, #0
1a0018d4:	e001      	b.n	1a0018da <Chip_SetupCoreClock+0x6e>
1a0018d6:	2500      	movs	r5, #0
1a0018d8:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0018da:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0018de:	9b01      	ldr	r3, [sp, #4]
1a0018e0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0018e4:	9a05      	ldr	r2, [sp, #20]
1a0018e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0018ea:	9a03      	ldr	r2, [sp, #12]
1a0018ec:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0018f0:	9a04      	ldr	r2, [sp, #16]
1a0018f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0018f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0018fa:	4a2f      	ldr	r2, [pc, #188]	; (1a0019b8 <Chip_SetupCoreClock+0x14c>)
1a0018fc:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0018fe:	4b2e      	ldr	r3, [pc, #184]	; (1a0019b8 <Chip_SetupCoreClock+0x14c>)
1a001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a001902:	f013 0f01 	tst.w	r3, #1
1a001906:	d0fa      	beq.n	1a0018fe <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a001908:	2300      	movs	r3, #0
1a00190a:	2201      	movs	r2, #1
1a00190c:	2109      	movs	r1, #9
1a00190e:	2004      	movs	r0, #4
1a001910:	f000 fa84 	bl	1a001e1c <Chip_Clock_SetBaseClock>

	if (direct) {
1a001914:	b306      	cbz	r6, 1a001958 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001916:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00191a:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a00191c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00191e:	1e5a      	subs	r2, r3, #1
1a001920:	9209      	str	r2, [sp, #36]	; 0x24
1a001922:	2b00      	cmp	r3, #0
1a001924:	d1fa      	bne.n	1a00191c <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a001926:	9b01      	ldr	r3, [sp, #4]
1a001928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00192c:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00192e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001932:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001936:	9a05      	ldr	r2, [sp, #20]
1a001938:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00193c:	9a03      	ldr	r2, [sp, #12]
1a00193e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001942:	9a04      	ldr	r2, [sp, #16]
1a001944:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001948:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00194c:	4a1a      	ldr	r2, [pc, #104]	; (1a0019b8 <Chip_SetupCoreClock+0x14c>)
1a00194e:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001950:	2c00      	cmp	r4, #0
1a001952:	d12e      	bne.n	1a0019b2 <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a001954:	b00a      	add	sp, #40	; 0x28
1a001956:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a001958:	2d00      	cmp	r5, #0
1a00195a:	d0f9      	beq.n	1a001950 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00195c:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001960:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a001962:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001964:	1e5a      	subs	r2, r3, #1
1a001966:	9209      	str	r2, [sp, #36]	; 0x24
1a001968:	2b00      	cmp	r3, #0
1a00196a:	d1fa      	bne.n	1a001962 <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a00196c:	9b04      	ldr	r3, [sp, #16]
1a00196e:	1e5a      	subs	r2, r3, #1
1a001970:	9204      	str	r2, [sp, #16]
1a001972:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a001976:	9b01      	ldr	r3, [sp, #4]
1a001978:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a00197c:	9905      	ldr	r1, [sp, #20]
1a00197e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001982:	9903      	ldr	r1, [sp, #12]
1a001984:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a001988:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00198c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001990:	4a09      	ldr	r2, [pc, #36]	; (1a0019b8 <Chip_SetupCoreClock+0x14c>)
1a001992:	6453      	str	r3, [r2, #68]	; 0x44
1a001994:	e7dc      	b.n	1a001950 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001996:	480a      	ldr	r0, [pc, #40]	; (1a0019c0 <Chip_SetupCoreClock+0x154>)
1a001998:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00199c:	78cb      	ldrb	r3, [r1, #3]
1a00199e:	788a      	ldrb	r2, [r1, #2]
1a0019a0:	7849      	ldrb	r1, [r1, #1]
1a0019a2:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0019a6:	f000 fa39 	bl	1a001e1c <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0019aa:	3401      	adds	r4, #1
1a0019ac:	2c11      	cmp	r4, #17
1a0019ae:	d9f2      	bls.n	1a001996 <Chip_SetupCoreClock+0x12a>
1a0019b0:	e7d0      	b.n	1a001954 <Chip_SetupCoreClock+0xe8>
1a0019b2:	2400      	movs	r4, #0
1a0019b4:	e7fa      	b.n	1a0019ac <Chip_SetupCoreClock+0x140>
1a0019b6:	bf00      	nop
1a0019b8:	40050000 	.word	0x40050000
1a0019bc:	068e7780 	.word	0x068e7780
1a0019c0:	1a002960 	.word	0x1a002960

1a0019c4 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0019c4:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0019c6:	2069      	movs	r0, #105	; 0x69
1a0019c8:	f000 faa6 	bl	1a001f18 <Chip_Clock_GetRate>
1a0019cc:	4b01      	ldr	r3, [pc, #4]	; (1a0019d4 <SystemCoreClockUpdate+0x10>)
1a0019ce:	6018      	str	r0, [r3, #0]
}
1a0019d0:	bd08      	pop	{r3, pc}
1a0019d2:	bf00      	nop
1a0019d4:	100000d8 	.word	0x100000d8

1a0019d8 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0019d8:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0019da:	680b      	ldr	r3, [r1, #0]
1a0019dc:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0019e0:	d002      	beq.n	1a0019e8 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0019e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0019e6:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a0019e8:	4607      	mov	r7, r0
1a0019ea:	2501      	movs	r5, #1
1a0019ec:	e03a      	b.n	1a001a64 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a0019ee:	694b      	ldr	r3, [r1, #20]
1a0019f0:	fb03 f302 	mul.w	r3, r3, r2
1a0019f4:	fbb3 f3f5 	udiv	r3, r3, r5
1a0019f8:	e01c      	b.n	1a001a34 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a0019fa:	461c      	mov	r4, r3
	if (val < 0)
1a0019fc:	ebb0 0c04 	subs.w	ip, r0, r4
1a001a00:	d427      	bmi.n	1a001a52 <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a001a02:	4567      	cmp	r7, ip
1a001a04:	d906      	bls.n	1a001a14 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a001a06:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a001a08:	1c77      	adds	r7, r6, #1
1a001a0a:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a001a0c:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a001a0e:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a001a10:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a001a12:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a001a14:	3201      	adds	r2, #1
1a001a16:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a001a1a:	dc1d      	bgt.n	1a001a58 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a001a1c:	680c      	ldr	r4, [r1, #0]
1a001a1e:	f014 0f40 	tst.w	r4, #64	; 0x40
1a001a22:	d0e4      	beq.n	1a0019ee <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a001a24:	1c73      	adds	r3, r6, #1
1a001a26:	fa02 fc03 	lsl.w	ip, r2, r3
1a001a2a:	694b      	ldr	r3, [r1, #20]
1a001a2c:	fb03 f30c 	mul.w	r3, r3, ip
1a001a30:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a001a34:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a001a70 <pll_calc_divs+0x98>
1a001a38:	4563      	cmp	r3, ip
1a001a3a:	d9eb      	bls.n	1a001a14 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a001a3c:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a001a74 <pll_calc_divs+0x9c>
1a001a40:	4563      	cmp	r3, ip
1a001a42:	d809      	bhi.n	1a001a58 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a001a44:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001a48:	d1d7      	bne.n	1a0019fa <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a001a4a:	1c74      	adds	r4, r6, #1
1a001a4c:	fa23 f404 	lsr.w	r4, r3, r4
1a001a50:	e7d4      	b.n	1a0019fc <pll_calc_divs+0x24>
		return -val;
1a001a52:	f1cc 0c00 	rsb	ip, ip, #0
1a001a56:	e7d4      	b.n	1a001a02 <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a001a58:	3601      	adds	r6, #1
1a001a5a:	2e03      	cmp	r6, #3
1a001a5c:	dc01      	bgt.n	1a001a62 <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a001a5e:	2201      	movs	r2, #1
1a001a60:	e7d9      	b.n	1a001a16 <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a001a62:	3501      	adds	r5, #1
1a001a64:	2d04      	cmp	r5, #4
1a001a66:	dc01      	bgt.n	1a001a6c <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a001a68:	2600      	movs	r6, #0
1a001a6a:	e7f6      	b.n	1a001a5a <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a001a6c:	bcf0      	pop	{r4, r5, r6, r7}
1a001a6e:	4770      	bx	lr
1a001a70:	094c5eff 	.word	0x094c5eff
1a001a74:	1312d000 	.word	0x1312d000

1a001a78 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001a78:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001a7a:	b099      	sub	sp, #100	; 0x64
1a001a7c:	4605      	mov	r5, r0
1a001a7e:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a001a80:	225c      	movs	r2, #92	; 0x5c
1a001a82:	2100      	movs	r1, #0
1a001a84:	a801      	add	r0, sp, #4
1a001a86:	f000 fefd 	bl	1a002884 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a001a8a:	2380      	movs	r3, #128	; 0x80
1a001a8c:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a001a8e:	6963      	ldr	r3, [r4, #20]
1a001a90:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a001a92:	7923      	ldrb	r3, [r4, #4]
1a001a94:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a001a98:	4669      	mov	r1, sp
1a001a9a:	4628      	mov	r0, r5
1a001a9c:	f7ff ff9c 	bl	1a0019d8 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a001aa0:	9b06      	ldr	r3, [sp, #24]
1a001aa2:	42ab      	cmp	r3, r5
1a001aa4:	d027      	beq.n	1a001af6 <pll_get_frac+0x7e>
	if (val < 0)
1a001aa6:	1aeb      	subs	r3, r5, r3
1a001aa8:	d42e      	bmi.n	1a001b08 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a001aaa:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a001aac:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a001aae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a001ab2:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a001ab4:	6963      	ldr	r3, [r4, #20]
1a001ab6:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a001ab8:	7923      	ldrb	r3, [r4, #4]
1a001aba:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a001abe:	a910      	add	r1, sp, #64	; 0x40
1a001ac0:	4628      	mov	r0, r5
1a001ac2:	f7ff ff89 	bl	1a0019d8 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a001ac6:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a001ac8:	42ab      	cmp	r3, r5
1a001aca:	d01f      	beq.n	1a001b0c <pll_get_frac+0x94>
	if (val < 0)
1a001acc:	1aeb      	subs	r3, r5, r3
1a001ace:	d425      	bmi.n	1a001b1c <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a001ad0:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a001ad2:	4b2b      	ldr	r3, [pc, #172]	; (1a001b80 <pll_get_frac+0x108>)
1a001ad4:	429d      	cmp	r5, r3
1a001ad6:	d923      	bls.n	1a001b20 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a001ad8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a001ada:	1aed      	subs	r5, r5, r3
1a001adc:	d433      	bmi.n	1a001b46 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a001ade:	42ae      	cmp	r6, r5
1a001ae0:	dc3b      	bgt.n	1a001b5a <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a001ae2:	42be      	cmp	r6, r7
1a001ae4:	dc31      	bgt.n	1a001b4a <pll_get_frac+0xd2>
			*ppll = pll[0];
1a001ae6:	466d      	mov	r5, sp
1a001ae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001aec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001af0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001af4:	e006      	b.n	1a001b04 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a001af6:	466d      	mov	r5, sp
1a001af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001afc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001b00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a001b04:	b019      	add	sp, #100	; 0x64
1a001b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a001b08:	425b      	negs	r3, r3
1a001b0a:	e7ce      	b.n	1a001aaa <pll_get_frac+0x32>
		*ppll = pll[2];
1a001b0c:	ad10      	add	r5, sp, #64	; 0x40
1a001b0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001b10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001b12:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001b16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a001b1a:	e7f3      	b.n	1a001b04 <pll_get_frac+0x8c>
		return -val;
1a001b1c:	425b      	negs	r3, r3
1a001b1e:	e7d7      	b.n	1a001ad0 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a001b20:	2340      	movs	r3, #64	; 0x40
1a001b22:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a001b24:	6963      	ldr	r3, [r4, #20]
1a001b26:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a001b28:	a908      	add	r1, sp, #32
1a001b2a:	4628      	mov	r0, r5
1a001b2c:	f7ff ff54 	bl	1a0019d8 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a001b30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a001b32:	42ab      	cmp	r3, r5
1a001b34:	d1d0      	bne.n	1a001ad8 <pll_get_frac+0x60>
			*ppll = pll[1];
1a001b36:	ad08      	add	r5, sp, #32
1a001b38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001b3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001b3c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001b40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a001b44:	e7de      	b.n	1a001b04 <pll_get_frac+0x8c>
		return -val;
1a001b46:	426d      	negs	r5, r5
1a001b48:	e7c9      	b.n	1a001ade <pll_get_frac+0x66>
			*ppll = pll[2];
1a001b4a:	ad10      	add	r5, sp, #64	; 0x40
1a001b4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001b50:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001b54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001b58:	e7d4      	b.n	1a001b04 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a001b5a:	42af      	cmp	r7, r5
1a001b5c:	db07      	blt.n	1a001b6e <pll_get_frac+0xf6>
			*ppll = pll[1];
1a001b5e:	ad08      	add	r5, sp, #32
1a001b60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001b64:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001b68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001b6c:	e7ca      	b.n	1a001b04 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a001b6e:	ad10      	add	r5, sp, #64	; 0x40
1a001b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001b74:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001b78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001b7c:	e7c2      	b.n	1a001b04 <pll_get_frac+0x8c>
1a001b7e:	bf00      	nop
1a001b80:	068e7780 	.word	0x068e7780

1a001b84 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a001b84:	b430      	push	{r4, r5}
1a001b86:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a001b88:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a001b8a:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001b8c:	e000      	b.n	1a001b90 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a001b8e:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001b90:	281c      	cmp	r0, #28
1a001b92:	d118      	bne.n	1a001bc6 <Chip_Clock_FindBaseClock+0x42>
1a001b94:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001b98:	0051      	lsls	r1, r2, #1
1a001b9a:	4a0c      	ldr	r2, [pc, #48]	; (1a001bcc <Chip_Clock_FindBaseClock+0x48>)
1a001b9c:	440a      	add	r2, r1
1a001b9e:	7914      	ldrb	r4, [r2, #4]
1a001ba0:	4284      	cmp	r4, r0
1a001ba2:	d010      	beq.n	1a001bc6 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a001ba4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a001ba8:	004a      	lsls	r2, r1, #1
1a001baa:	4908      	ldr	r1, [pc, #32]	; (1a001bcc <Chip_Clock_FindBaseClock+0x48>)
1a001bac:	5a8a      	ldrh	r2, [r1, r2]
1a001bae:	42aa      	cmp	r2, r5
1a001bb0:	d8ed      	bhi.n	1a001b8e <Chip_Clock_FindBaseClock+0xa>
1a001bb2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001bb6:	0051      	lsls	r1, r2, #1
1a001bb8:	4a04      	ldr	r2, [pc, #16]	; (1a001bcc <Chip_Clock_FindBaseClock+0x48>)
1a001bba:	440a      	add	r2, r1
1a001bbc:	8852      	ldrh	r2, [r2, #2]
1a001bbe:	42aa      	cmp	r2, r5
1a001bc0:	d3e5      	bcc.n	1a001b8e <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a001bc2:	4620      	mov	r0, r4
1a001bc4:	e7e4      	b.n	1a001b90 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a001bc6:	bc30      	pop	{r4, r5}
1a001bc8:	4770      	bx	lr
1a001bca:	bf00      	nop
1a001bcc:	1a0029b4 	.word	0x1a0029b4

1a001bd0 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a001bd0:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a001bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a001bd6:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a001bd8:	4a0d      	ldr	r2, [pc, #52]	; (1a001c10 <Chip_Clock_EnableCrystal+0x40>)
1a001bda:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a001bdc:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a001be0:	6992      	ldr	r2, [r2, #24]
1a001be2:	428a      	cmp	r2, r1
1a001be4:	d001      	beq.n	1a001bea <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001be6:	4a0a      	ldr	r2, [pc, #40]	; (1a001c10 <Chip_Clock_EnableCrystal+0x40>)
1a001be8:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a001bea:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a001bee:	4a09      	ldr	r2, [pc, #36]	; (1a001c14 <Chip_Clock_EnableCrystal+0x44>)
1a001bf0:	6811      	ldr	r1, [r2, #0]
1a001bf2:	4a09      	ldr	r2, [pc, #36]	; (1a001c18 <Chip_Clock_EnableCrystal+0x48>)
1a001bf4:	4291      	cmp	r1, r2
1a001bf6:	d901      	bls.n	1a001bfc <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a001bf8:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001bfc:	4a04      	ldr	r2, [pc, #16]	; (1a001c10 <Chip_Clock_EnableCrystal+0x40>)
1a001bfe:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a001c00:	9b01      	ldr	r3, [sp, #4]
1a001c02:	1e5a      	subs	r2, r3, #1
1a001c04:	9201      	str	r2, [sp, #4]
1a001c06:	2b00      	cmp	r3, #0
1a001c08:	d1fa      	bne.n	1a001c00 <Chip_Clock_EnableCrystal+0x30>
}
1a001c0a:	b002      	add	sp, #8
1a001c0c:	4770      	bx	lr
1a001c0e:	bf00      	nop
1a001c10:	40050000 	.word	0x40050000
1a001c14:	1a00295c 	.word	0x1a00295c
1a001c18:	01312cff 	.word	0x01312cff

1a001c1c <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a001c1c:	3012      	adds	r0, #18
1a001c1e:	4b05      	ldr	r3, [pc, #20]	; (1a001c34 <Chip_Clock_GetDividerSource+0x18>)
1a001c20:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a001c24:	f010 0f01 	tst.w	r0, #1
1a001c28:	d102      	bne.n	1a001c30 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001c2a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001c2e:	4770      	bx	lr
		return CLKINPUT_PD;
1a001c30:	2011      	movs	r0, #17
}
1a001c32:	4770      	bx	lr
1a001c34:	40050000 	.word	0x40050000

1a001c38 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a001c38:	f100 0212 	add.w	r2, r0, #18
1a001c3c:	4b03      	ldr	r3, [pc, #12]	; (1a001c4c <Chip_Clock_GetDividerDivisor+0x14>)
1a001c3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a001c42:	4b03      	ldr	r3, [pc, #12]	; (1a001c50 <Chip_Clock_GetDividerDivisor+0x18>)
1a001c44:	5c18      	ldrb	r0, [r3, r0]
}
1a001c46:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a001c4a:	4770      	bx	lr
1a001c4c:	40050000 	.word	0x40050000
1a001c50:	1a0029ac 	.word	0x1a0029ac

1a001c54 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a001c54:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a001c56:	2810      	cmp	r0, #16
1a001c58:	d80a      	bhi.n	1a001c70 <Chip_Clock_GetClockInputHz+0x1c>
1a001c5a:	e8df f000 	tbb	[pc, r0]
1a001c5e:	0b44      	.short	0x0b44
1a001c60:	0921180d 	.word	0x0921180d
1a001c64:	2d2a2724 	.word	0x2d2a2724
1a001c68:	34300909 	.word	0x34300909
1a001c6c:	3c38      	.short	0x3c38
1a001c6e:	40          	.byte	0x40
1a001c6f:	00          	.byte	0x00
	uint32_t rate = 0;
1a001c70:	2000      	movs	r0, #0
1a001c72:	e03a      	b.n	1a001cea <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a001c74:	481e      	ldr	r0, [pc, #120]	; (1a001cf0 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a001c76:	e038      	b.n	1a001cea <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001c78:	4b1e      	ldr	r3, [pc, #120]	; (1a001cf4 <Chip_Clock_GetClockInputHz+0xa0>)
1a001c7a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001c7e:	f003 0307 	and.w	r3, r3, #7
1a001c82:	2b04      	cmp	r3, #4
1a001c84:	d001      	beq.n	1a001c8a <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a001c86:	481c      	ldr	r0, [pc, #112]	; (1a001cf8 <Chip_Clock_GetClockInputHz+0xa4>)
1a001c88:	e02f      	b.n	1a001cea <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a001c8a:	2000      	movs	r0, #0
1a001c8c:	e02d      	b.n	1a001cea <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001c8e:	4b19      	ldr	r3, [pc, #100]	; (1a001cf4 <Chip_Clock_GetClockInputHz+0xa0>)
1a001c90:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001c94:	f003 0307 	and.w	r3, r3, #7
1a001c98:	2b04      	cmp	r3, #4
1a001c9a:	d027      	beq.n	1a001cec <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a001c9c:	4816      	ldr	r0, [pc, #88]	; (1a001cf8 <Chip_Clock_GetClockInputHz+0xa4>)
1a001c9e:	e024      	b.n	1a001cea <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a001ca0:	4b16      	ldr	r3, [pc, #88]	; (1a001cfc <Chip_Clock_GetClockInputHz+0xa8>)
1a001ca2:	6818      	ldr	r0, [r3, #0]
		break;
1a001ca4:	e021      	b.n	1a001cea <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a001ca6:	4b16      	ldr	r3, [pc, #88]	; (1a001d00 <Chip_Clock_GetClockInputHz+0xac>)
1a001ca8:	6818      	ldr	r0, [r3, #0]
		break;
1a001caa:	e01e      	b.n	1a001cea <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a001cac:	4b15      	ldr	r3, [pc, #84]	; (1a001d04 <Chip_Clock_GetClockInputHz+0xb0>)
1a001cae:	6818      	ldr	r0, [r3, #0]
		break;
1a001cb0:	e01b      	b.n	1a001cea <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a001cb2:	4b14      	ldr	r3, [pc, #80]	; (1a001d04 <Chip_Clock_GetClockInputHz+0xb0>)
1a001cb4:	6858      	ldr	r0, [r3, #4]
		break;
1a001cb6:	e018      	b.n	1a001cea <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a001cb8:	f000 f868 	bl	1a001d8c <Chip_Clock_GetMainPLLHz>
		break;
1a001cbc:	e015      	b.n	1a001cea <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a001cbe:	2100      	movs	r1, #0
1a001cc0:	f000 f89a 	bl	1a001df8 <Chip_Clock_GetDivRate>
		break;
1a001cc4:	e011      	b.n	1a001cea <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a001cc6:	2101      	movs	r1, #1
1a001cc8:	f000 f896 	bl	1a001df8 <Chip_Clock_GetDivRate>
		break;
1a001ccc:	e00d      	b.n	1a001cea <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a001cce:	2102      	movs	r1, #2
1a001cd0:	f000 f892 	bl	1a001df8 <Chip_Clock_GetDivRate>
		break;
1a001cd4:	e009      	b.n	1a001cea <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a001cd6:	2103      	movs	r1, #3
1a001cd8:	f000 f88e 	bl	1a001df8 <Chip_Clock_GetDivRate>
		break;
1a001cdc:	e005      	b.n	1a001cea <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a001cde:	2104      	movs	r1, #4
1a001ce0:	f000 f88a 	bl	1a001df8 <Chip_Clock_GetDivRate>
		break;
1a001ce4:	e001      	b.n	1a001cea <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a001ce6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a001cea:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a001cec:	4806      	ldr	r0, [pc, #24]	; (1a001d08 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a001cee:	e7fc      	b.n	1a001cea <Chip_Clock_GetClockInputHz+0x96>
1a001cf0:	00b71b00 	.word	0x00b71b00
1a001cf4:	40043000 	.word	0x40043000
1a001cf8:	017d7840 	.word	0x017d7840
1a001cfc:	1a002930 	.word	0x1a002930
1a001d00:	1a00295c 	.word	0x1a00295c
1a001d04:	10000078 	.word	0x10000078
1a001d08:	02faf080 	.word	0x02faf080

1a001d0c <Chip_Clock_CalcMainPLLValue>:
{
1a001d0c:	b538      	push	{r3, r4, r5, lr}
1a001d0e:	4605      	mov	r5, r0
1a001d10:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a001d12:	7908      	ldrb	r0, [r1, #4]
1a001d14:	f7ff ff9e 	bl	1a001c54 <Chip_Clock_GetClockInputHz>
1a001d18:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a001d1a:	4b19      	ldr	r3, [pc, #100]	; (1a001d80 <Chip_Clock_CalcMainPLLValue+0x74>)
1a001d1c:	442b      	add	r3, r5
1a001d1e:	4a19      	ldr	r2, [pc, #100]	; (1a001d84 <Chip_Clock_CalcMainPLLValue+0x78>)
1a001d20:	4293      	cmp	r3, r2
1a001d22:	d821      	bhi.n	1a001d68 <Chip_Clock_CalcMainPLLValue+0x5c>
1a001d24:	b318      	cbz	r0, 1a001d6e <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a001d26:	2380      	movs	r3, #128	; 0x80
1a001d28:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a001d2a:	2300      	movs	r3, #0
1a001d2c:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a001d2e:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a001d30:	fbb5 f3f0 	udiv	r3, r5, r0
1a001d34:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a001d36:	4a14      	ldr	r2, [pc, #80]	; (1a001d88 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a001d38:	4295      	cmp	r5, r2
1a001d3a:	d903      	bls.n	1a001d44 <Chip_Clock_CalcMainPLLValue+0x38>
1a001d3c:	fb03 f000 	mul.w	r0, r3, r0
1a001d40:	42a8      	cmp	r0, r5
1a001d42:	d007      	beq.n	1a001d54 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a001d44:	4621      	mov	r1, r4
1a001d46:	4628      	mov	r0, r5
1a001d48:	f7ff fe96 	bl	1a001a78 <pll_get_frac>
		if (!ppll->nsel) {
1a001d4c:	68a3      	ldr	r3, [r4, #8]
1a001d4e:	b18b      	cbz	r3, 1a001d74 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a001d50:	3b01      	subs	r3, #1
1a001d52:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a001d54:	6923      	ldr	r3, [r4, #16]
1a001d56:	b183      	cbz	r3, 1a001d7a <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a001d58:	68e2      	ldr	r2, [r4, #12]
1a001d5a:	b10a      	cbz	r2, 1a001d60 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a001d5c:	3a01      	subs	r2, #1
1a001d5e:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a001d60:	3b01      	subs	r3, #1
1a001d62:	6123      	str	r3, [r4, #16]
	return 0;
1a001d64:	2000      	movs	r0, #0
}
1a001d66:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a001d68:	f04f 30ff 	mov.w	r0, #4294967295
1a001d6c:	e7fb      	b.n	1a001d66 <Chip_Clock_CalcMainPLLValue+0x5a>
1a001d6e:	f04f 30ff 	mov.w	r0, #4294967295
1a001d72:	e7f8      	b.n	1a001d66 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a001d74:	f04f 30ff 	mov.w	r0, #4294967295
1a001d78:	e7f5      	b.n	1a001d66 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a001d7a:	f04f 30ff 	mov.w	r0, #4294967295
1a001d7e:	e7f2      	b.n	1a001d66 <Chip_Clock_CalcMainPLLValue+0x5a>
1a001d80:	ff6b3a10 	.word	0xff6b3a10
1a001d84:	0b940510 	.word	0x0b940510
1a001d88:	094c5eff 	.word	0x094c5eff

1a001d8c <Chip_Clock_GetMainPLLHz>:
{
1a001d8c:	b530      	push	{r4, r5, lr}
1a001d8e:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a001d90:	4d17      	ldr	r5, [pc, #92]	; (1a001df0 <Chip_Clock_GetMainPLLHz+0x64>)
1a001d92:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a001d94:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001d98:	f7ff ff5c 	bl	1a001c54 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a001d9c:	4b15      	ldr	r3, [pc, #84]	; (1a001df4 <Chip_Clock_GetMainPLLHz+0x68>)
1a001d9e:	681b      	ldr	r3, [r3, #0]
1a001da0:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a001da2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a001da4:	f013 0f01 	tst.w	r3, #1
1a001da8:	d020      	beq.n	1a001dec <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a001daa:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a001dae:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a001db2:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a001db6:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a001dba:	3301      	adds	r3, #1
	n = nsel + 1;
1a001dbc:	3201      	adds	r2, #1
	p = ptab[psel];
1a001dbe:	f10d 0c08 	add.w	ip, sp, #8
1a001dc2:	4461      	add	r1, ip
1a001dc4:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a001dc8:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001dcc:	d108      	bne.n	1a001de0 <Chip_Clock_GetMainPLLHz+0x54>
1a001dce:	b93d      	cbnz	r5, 1a001de0 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a001dd0:	0049      	lsls	r1, r1, #1
1a001dd2:	fbb3 f3f1 	udiv	r3, r3, r1
1a001dd6:	fbb0 f0f2 	udiv	r0, r0, r2
1a001dda:	fb00 f003 	mul.w	r0, r0, r3
1a001dde:	e003      	b.n	1a001de8 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a001de0:	fbb0 f0f2 	udiv	r0, r0, r2
1a001de4:	fb03 f000 	mul.w	r0, r3, r0
}
1a001de8:	b003      	add	sp, #12
1a001dea:	bd30      	pop	{r4, r5, pc}
		return 0;
1a001dec:	2000      	movs	r0, #0
1a001dee:	e7fb      	b.n	1a001de8 <Chip_Clock_GetMainPLLHz+0x5c>
1a001df0:	40050000 	.word	0x40050000
1a001df4:	1a0029a8 	.word	0x1a0029a8

1a001df8 <Chip_Clock_GetDivRate>:
{
1a001df8:	b538      	push	{r3, r4, r5, lr}
1a001dfa:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a001dfc:	4608      	mov	r0, r1
1a001dfe:	f7ff ff0d 	bl	1a001c1c <Chip_Clock_GetDividerSource>
1a001e02:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a001e04:	4620      	mov	r0, r4
1a001e06:	f7ff ff17 	bl	1a001c38 <Chip_Clock_GetDividerDivisor>
1a001e0a:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a001e0c:	4628      	mov	r0, r5
1a001e0e:	f7ff ff21 	bl	1a001c54 <Chip_Clock_GetClockInputHz>
1a001e12:	3401      	adds	r4, #1
}
1a001e14:	fbb0 f0f4 	udiv	r0, r0, r4
1a001e18:	bd38      	pop	{r3, r4, r5, pc}
1a001e1a:	Address 0x1a001e1a is out of bounds.


1a001e1c <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a001e1c:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a001e1e:	f100 0416 	add.w	r4, r0, #22
1a001e22:	00a4      	lsls	r4, r4, #2
1a001e24:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a001e28:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a001e2c:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a001e2e:	281b      	cmp	r0, #27
1a001e30:	d813      	bhi.n	1a001e5a <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a001e32:	2911      	cmp	r1, #17
1a001e34:	d01a      	beq.n	1a001e6c <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a001e36:	4d0e      	ldr	r5, [pc, #56]	; (1a001e70 <Chip_Clock_SetBaseClock+0x54>)
1a001e38:	4025      	ands	r5, r4

			if (autoblocken) {
1a001e3a:	b10a      	cbz	r2, 1a001e40 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a001e3c:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a001e40:	b10b      	cbz	r3, 1a001e46 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a001e42:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a001e46:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a001e4a:	3016      	adds	r0, #22
1a001e4c:	0080      	lsls	r0, r0, #2
1a001e4e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001e52:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001e56:	6045      	str	r5, [r0, #4]
1a001e58:	e008      	b.n	1a001e6c <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a001e5a:	f044 0401 	orr.w	r4, r4, #1
1a001e5e:	3016      	adds	r0, #22
1a001e60:	0080      	lsls	r0, r0, #2
1a001e62:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001e66:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001e6a:	6044      	str	r4, [r0, #4]
	}
}
1a001e6c:	bc30      	pop	{r4, r5}
1a001e6e:	4770      	bx	lr
1a001e70:	e0fff7fe 	.word	0xe0fff7fe

1a001e74 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a001e74:	281b      	cmp	r0, #27
1a001e76:	d80c      	bhi.n	1a001e92 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a001e78:	3016      	adds	r0, #22
1a001e7a:	0080      	lsls	r0, r0, #2
1a001e7c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001e80:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001e84:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a001e86:	f010 0f01 	tst.w	r0, #1
1a001e8a:	d104      	bne.n	1a001e96 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001e8c:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001e90:	4770      	bx	lr
		return CLKINPUT_PD;
1a001e92:	2011      	movs	r0, #17
1a001e94:	4770      	bx	lr
		return CLKINPUT_PD;
1a001e96:	2011      	movs	r0, #17
}
1a001e98:	4770      	bx	lr

1a001e9a <Chip_Clock_GetBaseClocktHz>:
{
1a001e9a:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a001e9c:	f7ff ffea 	bl	1a001e74 <Chip_Clock_GetBaseClock>
1a001ea0:	f7ff fed8 	bl	1a001c54 <Chip_Clock_GetClockInputHz>
}
1a001ea4:	bd08      	pop	{r3, pc}
1a001ea6:	Address 0x1a001ea6 is out of bounds.


1a001ea8 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a001ea8:	b971      	cbnz	r1, 1a001ec8 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a001eaa:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a001eac:	b10a      	cbz	r2, 1a001eb2 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a001eae:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a001eb2:	2b02      	cmp	r3, #2
1a001eb4:	d00a      	beq.n	1a001ecc <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a001eb6:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001eba:	d30a      	bcc.n	1a001ed2 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001ebc:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001ec0:	4b06      	ldr	r3, [pc, #24]	; (1a001edc <Chip_Clock_EnableOpts+0x34>)
1a001ec2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a001ec6:	4770      	bx	lr
		reg |= (1 << 1);
1a001ec8:	2103      	movs	r1, #3
1a001eca:	e7ef      	b.n	1a001eac <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a001ecc:	f041 0120 	orr.w	r1, r1, #32
1a001ed0:	e7f1      	b.n	1a001eb6 <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a001ed2:	3020      	adds	r0, #32
1a001ed4:	4b02      	ldr	r3, [pc, #8]	; (1a001ee0 <Chip_Clock_EnableOpts+0x38>)
1a001ed6:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a001eda:	4770      	bx	lr
1a001edc:	40052000 	.word	0x40052000
1a001ee0:	40051000 	.word	0x40051000

1a001ee4 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a001ee4:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001ee8:	d309      	bcc.n	1a001efe <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a001eea:	4a09      	ldr	r2, [pc, #36]	; (1a001f10 <Chip_Clock_Enable+0x2c>)
1a001eec:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001ef0:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001ef4:	f043 0301 	orr.w	r3, r3, #1
1a001ef8:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001efc:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a001efe:	4a05      	ldr	r2, [pc, #20]	; (1a001f14 <Chip_Clock_Enable+0x30>)
1a001f00:	3020      	adds	r0, #32
1a001f02:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001f06:	f043 0301 	orr.w	r3, r3, #1
1a001f0a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a001f0e:	4770      	bx	lr
1a001f10:	40052000 	.word	0x40052000
1a001f14:	40051000 	.word	0x40051000

1a001f18 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a001f18:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a001f1a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001f1e:	d309      	bcc.n	1a001f34 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a001f20:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a001f24:	4a0d      	ldr	r2, [pc, #52]	; (1a001f5c <Chip_Clock_GetRate+0x44>)
1a001f26:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a001f2a:	f014 0f01 	tst.w	r4, #1
1a001f2e:	d107      	bne.n	1a001f40 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a001f30:	2000      	movs	r0, #0
	}

	return rate;
}
1a001f32:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001f34:	f100 0320 	add.w	r3, r0, #32
1a001f38:	4a09      	ldr	r2, [pc, #36]	; (1a001f60 <Chip_Clock_GetRate+0x48>)
1a001f3a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a001f3e:	e7f4      	b.n	1a001f2a <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a001f40:	f7ff fe20 	bl	1a001b84 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a001f44:	f7ff ffa9 	bl	1a001e9a <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a001f48:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001f4c:	d103      	bne.n	1a001f56 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a001f4e:	2301      	movs	r3, #1
		rate = rate / div;
1a001f50:	fbb0 f0f3 	udiv	r0, r0, r3
1a001f54:	e7ed      	b.n	1a001f32 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a001f56:	2302      	movs	r3, #2
1a001f58:	e7fa      	b.n	1a001f50 <Chip_Clock_GetRate+0x38>
1a001f5a:	bf00      	nop
1a001f5c:	40052000 	.word	0x40052000
1a001f60:	40051000 	.word	0x40051000

1a001f64 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a001f64:	4b09      	ldr	r3, [pc, #36]	; (1a001f8c <Chip_UART_GetIndex+0x28>)
1a001f66:	4298      	cmp	r0, r3
1a001f68:	d009      	beq.n	1a001f7e <Chip_UART_GetIndex+0x1a>
1a001f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a001f6e:	4298      	cmp	r0, r3
1a001f70:	d007      	beq.n	1a001f82 <Chip_UART_GetIndex+0x1e>
1a001f72:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a001f76:	4298      	cmp	r0, r3
1a001f78:	d005      	beq.n	1a001f86 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a001f7a:	2000      	movs	r0, #0
1a001f7c:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a001f7e:	2002      	movs	r0, #2
1a001f80:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a001f82:	2003      	movs	r0, #3
1a001f84:	4770      	bx	lr
			return 1;
1a001f86:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a001f88:	4770      	bx	lr
1a001f8a:	bf00      	nop
1a001f8c:	400c1000 	.word	0x400c1000

1a001f90 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a001f90:	b530      	push	{r4, r5, lr}
1a001f92:	b083      	sub	sp, #12
1a001f94:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a001f96:	f7ff ffe5 	bl	1a001f64 <Chip_UART_GetIndex>
1a001f9a:	2301      	movs	r3, #1
1a001f9c:	461a      	mov	r2, r3
1a001f9e:	4619      	mov	r1, r3
1a001fa0:	4d0e      	ldr	r5, [pc, #56]	; (1a001fdc <Chip_UART_Init+0x4c>)
1a001fa2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a001fa6:	f7ff ff7f 	bl	1a001ea8 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a001faa:	2307      	movs	r3, #7
1a001fac:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a001fae:	2300      	movs	r3, #0
1a001fb0:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a001fb2:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a001fb4:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a001fb6:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a001fb8:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a001fba:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a001fbc:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a001fbe:	4b08      	ldr	r3, [pc, #32]	; (1a001fe0 <Chip_UART_Init+0x50>)
1a001fc0:	429c      	cmp	r4, r3
1a001fc2:	d006      	beq.n	1a001fd2 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a001fc4:	2303      	movs	r3, #3
1a001fc6:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a001fc8:	2310      	movs	r3, #16
1a001fca:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a001fcc:	9b01      	ldr	r3, [sp, #4]
}
1a001fce:	b003      	add	sp, #12
1a001fd0:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a001fd2:	2300      	movs	r3, #0
1a001fd4:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a001fd6:	69a3      	ldr	r3, [r4, #24]
1a001fd8:	9301      	str	r3, [sp, #4]
1a001fda:	e7f3      	b.n	1a001fc4 <Chip_UART_Init+0x34>
1a001fdc:	1a002a28 	.word	0x1a002a28
1a001fe0:	40082000 	.word	0x40082000

1a001fe4 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a001fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001fe8:	b083      	sub	sp, #12
1a001fea:	9001      	str	r0, [sp, #4]
1a001fec:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a001fee:	f7ff ffb9 	bl	1a001f64 <Chip_UART_GetIndex>
1a001ff2:	4b32      	ldr	r3, [pc, #200]	; (1a0020bc <Chip_UART_SetBaudFDR+0xd8>)
1a001ff4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001ff8:	f7ff ff8e 	bl	1a001f18 <Chip_Clock_GetRate>
1a001ffc:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a001ffe:	f04f 37ff 	mov.w	r7, #4294967295

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a002002:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a002004:	f04f 0b00 	mov.w	fp, #0
1a002008:	46a2      	mov	sl, r4
1a00200a:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a00200c:	e02a      	b.n	1a002064 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00200e:	4242      	negs	r2, r0
				div ++;
1a002010:	1c4b      	adds	r3, r1, #1
1a002012:	e017      	b.n	1a002044 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a002014:	b30a      	cbz	r2, 1a00205a <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a002016:	4617      	mov	r7, r2
			sd = d;
1a002018:	46ab      	mov	fp, r5
			sm = m;
1a00201a:	46a2      	mov	sl, r4
			sdiv = div;
1a00201c:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a00201e:	3501      	adds	r5, #1
1a002020:	42ac      	cmp	r4, r5
1a002022:	d91e      	bls.n	1a002062 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a002024:	0933      	lsrs	r3, r6, #4
1a002026:	0730      	lsls	r0, r6, #28
1a002028:	fba4 0100 	umull	r0, r1, r4, r0
1a00202c:	fb04 1103 	mla	r1, r4, r3, r1
1a002030:	1962      	adds	r2, r4, r5
1a002032:	fb08 f202 	mul.w	r2, r8, r2
1a002036:	2300      	movs	r3, #0
1a002038:	f000 fa7e 	bl	1a002538 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a00203c:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a00203e:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a002040:	2800      	cmp	r0, #0
1a002042:	dbe4      	blt.n	1a00200e <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a002044:	4297      	cmp	r7, r2
1a002046:	d3ea      	bcc.n	1a00201e <Chip_UART_SetBaudFDR+0x3a>
1a002048:	2b00      	cmp	r3, #0
1a00204a:	d0e8      	beq.n	1a00201e <Chip_UART_SetBaudFDR+0x3a>
1a00204c:	0c19      	lsrs	r1, r3, #16
1a00204e:	d1e6      	bne.n	1a00201e <Chip_UART_SetBaudFDR+0x3a>
1a002050:	2b02      	cmp	r3, #2
1a002052:	d8df      	bhi.n	1a002014 <Chip_UART_SetBaudFDR+0x30>
1a002054:	2d00      	cmp	r5, #0
1a002056:	d0dd      	beq.n	1a002014 <Chip_UART_SetBaudFDR+0x30>
1a002058:	e7e1      	b.n	1a00201e <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a00205a:	4617      	mov	r7, r2
			sd = d;
1a00205c:	46ab      	mov	fp, r5
			sm = m;
1a00205e:	46a2      	mov	sl, r4
			sdiv = div;
1a002060:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a002062:	3401      	adds	r4, #1
1a002064:	b11f      	cbz	r7, 1a00206e <Chip_UART_SetBaudFDR+0x8a>
1a002066:	2c0f      	cmp	r4, #15
1a002068:	d801      	bhi.n	1a00206e <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a00206a:	2500      	movs	r5, #0
1a00206c:	e7d8      	b.n	1a002020 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a00206e:	f1b9 0f00 	cmp.w	r9, #0
1a002072:	d01e      	beq.n	1a0020b2 <Chip_UART_SetBaudFDR+0xce>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002074:	9a01      	ldr	r2, [sp, #4]
1a002076:	4611      	mov	r1, r2
1a002078:	68d3      	ldr	r3, [r2, #12]
1a00207a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00207e:	60d3      	str	r3, [r2, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a002080:	fa5f f389 	uxtb.w	r3, r9
1a002084:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a002086:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a00208a:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a00208c:	68d3      	ldr	r3, [r2, #12]
1a00208e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002092:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a002094:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a002098:	b2db      	uxtb	r3, r3
1a00209a:	f00b 020f 	and.w	r2, fp, #15
1a00209e:	4313      	orrs	r3, r2
1a0020a0:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0020a2:	0933      	lsrs	r3, r6, #4
1a0020a4:	fb0a f303 	mul.w	r3, sl, r3
1a0020a8:	44da      	add	sl, fp
1a0020aa:	fb09 f90a 	mul.w	r9, r9, sl
1a0020ae:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a0020b2:	4648      	mov	r0, r9
1a0020b4:	b003      	add	sp, #12
1a0020b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0020ba:	bf00      	nop
1a0020bc:	1a002a20 	.word	0x1a002a20

1a0020c0 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a0020c0:	b508      	push	{r3, lr}
   // to use CMSIS.
   volatile unsigned int *pCREG_M0APPMAP = (volatile unsigned int *) 0x40043404;
   // CMSIS : CREG->M0APPMAP = <address of vector table>
   *pCREG_M0APPMAP = (unsigned int)g_pfnVectors;
#else
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a0020c2:	4a0b      	ldr	r2, [pc, #44]	; (1a0020f0 <SystemInit+0x30>)
1a0020c4:	4b0b      	ldr	r3, [pc, #44]	; (1a0020f4 <SystemInit+0x34>)
1a0020c6:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a0020c8:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a0020cc:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a0020ce:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a0020d2:	2b20      	cmp	r3, #32
1a0020d4:	d004      	beq.n	1a0020e0 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit only in M4 */
   Board_SystemInit();
1a0020d6:	f7ff f9ef 	bl	1a0014b8 <Board_SystemInit>
   Board_Init();
1a0020da:	f7ff faad 	bl	1a001638 <Board_Init>
#endif
}
1a0020de:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a0020e0:	4a04      	ldr	r2, [pc, #16]	; (1a0020f4 <SystemInit+0x34>)
1a0020e2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0020e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0020ea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a0020ee:	e7f2      	b.n	1a0020d6 <SystemInit+0x16>
1a0020f0:	1a000000 	.word	0x1a000000
1a0020f4:	e000ed00 	.word	0xe000ed00

1a0020f8 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0020f8:	4b04      	ldr	r3, [pc, #16]	; (1a00210c <cyclesCounterInit+0x14>)
1a0020fa:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a0020fc:	4a04      	ldr	r2, [pc, #16]	; (1a002110 <cyclesCounterInit+0x18>)
1a0020fe:	6813      	ldr	r3, [r2, #0]
1a002100:	f043 0301 	orr.w	r3, r3, #1
1a002104:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a002106:	2001      	movs	r0, #1
1a002108:	4770      	bx	lr
1a00210a:	bf00      	nop
1a00210c:	10000038 	.word	0x10000038
1a002110:	e0001000 	.word	0xe0001000

1a002114 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a002114:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a002116:	4d0b      	ldr	r5, [pc, #44]	; (1a002144 <gpioObtainPinInit+0x30>)
1a002118:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a00211c:	182c      	adds	r4, r5, r0
1a00211e:	5628      	ldrsb	r0, [r5, r0]
1a002120:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a002122:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a002126:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a002128:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a00212c:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a00212e:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a002132:	9b02      	ldr	r3, [sp, #8]
1a002134:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a002136:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a00213a:	9b03      	ldr	r3, [sp, #12]
1a00213c:	701a      	strb	r2, [r3, #0]
}
1a00213e:	bc30      	pop	{r4, r5}
1a002140:	4770      	bx	lr
1a002142:	bf00      	nop
1a002144:	1a002a30 	.word	0x1a002a30

1a002148 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a002148:	f110 0f02 	cmn.w	r0, #2
1a00214c:	f000 80c7 	beq.w	1a0022de <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a002150:	f1b0 3fff 	cmp.w	r0, #4294967295
1a002154:	f000 80c5 	beq.w	1a0022e2 <gpioInit+0x19a>
{
1a002158:	b570      	push	{r4, r5, r6, lr}
1a00215a:	b084      	sub	sp, #16
1a00215c:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00215e:	2300      	movs	r3, #0
1a002160:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002164:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002168:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00216c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002170:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002174:	f10d 030b 	add.w	r3, sp, #11
1a002178:	9301      	str	r3, [sp, #4]
1a00217a:	ab03      	add	r3, sp, #12
1a00217c:	9300      	str	r3, [sp, #0]
1a00217e:	f10d 030d 	add.w	r3, sp, #13
1a002182:	f10d 020e 	add.w	r2, sp, #14
1a002186:	f10d 010f 	add.w	r1, sp, #15
1a00218a:	f7ff ffc3 	bl	1a002114 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00218e:	2c05      	cmp	r4, #5
1a002190:	f200 80a9 	bhi.w	1a0022e6 <gpioInit+0x19e>
1a002194:	e8df f004 	tbb	[pc, r4]
1a002198:	45278109 	.word	0x45278109
1a00219c:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a00219e:	4853      	ldr	r0, [pc, #332]	; (1a0022ec <gpioInit+0x1a4>)
1a0021a0:	f7ff fafe 	bl	1a0017a0 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a0021a4:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a0021a6:	b004      	add	sp, #16
1a0021a8:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a0021aa:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0021ae:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0021b2:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0021b6:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0021ba:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0021be:	494c      	ldr	r1, [pc, #304]	; (1a0022f0 <gpioInit+0x1a8>)
1a0021c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0021c4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0021c8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0021cc:	2001      	movs	r0, #1
1a0021ce:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0021d2:	4c46      	ldr	r4, [pc, #280]	; (1a0022ec <gpioInit+0x1a4>)
1a0021d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0021d8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0021dc:	ea22 0201 	bic.w	r2, r2, r1
1a0021e0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0021e4:	e7df      	b.n	1a0021a6 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0021e6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0021ea:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0021ee:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0021f2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0021f6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0021fa:	493d      	ldr	r1, [pc, #244]	; (1a0022f0 <gpioInit+0x1a8>)
1a0021fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002200:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002204:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002208:	2001      	movs	r0, #1
1a00220a:	fa00 f102 	lsl.w	r1, r0, r2
1a00220e:	4c37      	ldr	r4, [pc, #220]	; (1a0022ec <gpioInit+0x1a4>)
1a002210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002214:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002218:	ea22 0201 	bic.w	r2, r2, r1
1a00221c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002220:	e7c1      	b.n	1a0021a6 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a002222:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002226:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00222a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00222e:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a002232:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002236:	492e      	ldr	r1, [pc, #184]	; (1a0022f0 <gpioInit+0x1a8>)
1a002238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00223c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002240:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002244:	2001      	movs	r0, #1
1a002246:	fa00 f102 	lsl.w	r1, r0, r2
1a00224a:	4c28      	ldr	r4, [pc, #160]	; (1a0022ec <gpioInit+0x1a4>)
1a00224c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002250:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002254:	ea22 0201 	bic.w	r2, r2, r1
1a002258:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00225c:	e7a3      	b.n	1a0021a6 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00225e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002262:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002266:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00226a:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a00226e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002272:	491f      	ldr	r1, [pc, #124]	; (1a0022f0 <gpioInit+0x1a8>)
1a002274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002278:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00227c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002280:	2001      	movs	r0, #1
1a002282:	fa00 f102 	lsl.w	r1, r0, r2
1a002286:	4c19      	ldr	r4, [pc, #100]	; (1a0022ec <gpioInit+0x1a4>)
1a002288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00228c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002290:	ea22 0201 	bic.w	r2, r2, r1
1a002294:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002298:	e785      	b.n	1a0021a6 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00229a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00229e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0022a2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0022a6:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0022aa:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0022ae:	4910      	ldr	r1, [pc, #64]	; (1a0022f0 <gpioInit+0x1a8>)
1a0022b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0022b4:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0022b8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0022bc:	2001      	movs	r0, #1
1a0022be:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0022c2:	4b0a      	ldr	r3, [pc, #40]	; (1a0022ec <gpioInit+0x1a4>)
1a0022c4:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0022c8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0022cc:	4331      	orrs	r1, r6
1a0022ce:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0022d2:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0022d4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0022d8:	2100      	movs	r1, #0
1a0022da:	5499      	strb	r1, [r3, r2]
1a0022dc:	e763      	b.n	1a0021a6 <gpioInit+0x5e>
	  return FALSE;
1a0022de:	2000      	movs	r0, #0
1a0022e0:	4770      	bx	lr
	  return FALSE;
1a0022e2:	2000      	movs	r0, #0
}
1a0022e4:	4770      	bx	lr
      ret_val = 0;
1a0022e6:	2000      	movs	r0, #0
1a0022e8:	e75d      	b.n	1a0021a6 <gpioInit+0x5e>
1a0022ea:	bf00      	nop
1a0022ec:	400f4000 	.word	0x400f4000
1a0022f0:	40086000 	.word	0x40086000

1a0022f4 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a0022f4:	f110 0f02 	cmn.w	r0, #2
1a0022f8:	d02d      	beq.n	1a002356 <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a0022fa:	f1b0 3fff 	cmp.w	r0, #4294967295
1a0022fe:	d02c      	beq.n	1a00235a <gpioWrite+0x66>
{
1a002300:	b510      	push	{r4, lr}
1a002302:	b084      	sub	sp, #16
1a002304:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a002306:	2300      	movs	r3, #0
1a002308:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00230c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002310:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002314:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002318:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00231c:	f10d 030b 	add.w	r3, sp, #11
1a002320:	9301      	str	r3, [sp, #4]
1a002322:	ab03      	add	r3, sp, #12
1a002324:	9300      	str	r3, [sp, #0]
1a002326:	f10d 030d 	add.w	r3, sp, #13
1a00232a:	f10d 020e 	add.w	r2, sp, #14
1a00232e:	f10d 010f 	add.w	r1, sp, #15
1a002332:	f7ff feef 	bl	1a002114 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a002336:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00233a:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a00233e:	1c21      	adds	r1, r4, #0
1a002340:	bf18      	it	ne
1a002342:	2101      	movne	r1, #1
1a002344:	015b      	lsls	r3, r3, #5
1a002346:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00234a:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00234e:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a002350:	2001      	movs	r0, #1
}
1a002352:	b004      	add	sp, #16
1a002354:	bd10      	pop	{r4, pc}
	  return FALSE;
1a002356:	2000      	movs	r0, #0
1a002358:	4770      	bx	lr
	  return FALSE;
1a00235a:	2000      	movs	r0, #0
}
1a00235c:	4770      	bx	lr

1a00235e <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a00235e:	f110 0f02 	cmn.w	r0, #2
1a002362:	d02c      	beq.n	1a0023be <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a002364:	f1b0 3fff 	cmp.w	r0, #4294967295
1a002368:	d02b      	beq.n	1a0023c2 <gpioRead+0x64>
{
1a00236a:	b500      	push	{lr}
1a00236c:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a00236e:	2300      	movs	r3, #0
1a002370:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002374:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002378:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00237c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002380:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002384:	f10d 030b 	add.w	r3, sp, #11
1a002388:	9301      	str	r3, [sp, #4]
1a00238a:	ab03      	add	r3, sp, #12
1a00238c:	9300      	str	r3, [sp, #0]
1a00238e:	f10d 030d 	add.w	r3, sp, #13
1a002392:	f10d 020e 	add.w	r2, sp, #14
1a002396:	f10d 010f 	add.w	r1, sp, #15
1a00239a:	f7ff febb 	bl	1a002114 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a00239e:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a0023a2:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a0023a6:	015b      	lsls	r3, r3, #5
1a0023a8:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0023ac:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0023b0:	5c98      	ldrb	r0, [r3, r2]
1a0023b2:	3000      	adds	r0, #0
1a0023b4:	bf18      	it	ne
1a0023b6:	2001      	movne	r0, #1

   return ret_val;
}
1a0023b8:	b005      	add	sp, #20
1a0023ba:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a0023be:	2001      	movs	r0, #1
1a0023c0:	4770      	bx	lr
      return FALSE;
1a0023c2:	2000      	movs	r0, #0
}
1a0023c4:	4770      	bx	lr
1a0023c6:	Address 0x1a0023c6 is out of bounds.


1a0023c8 <tickCallbackSet>:
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickCallbackSet() in a program with freeRTOS has no effect\r\n" );
      return 0;
   #else
      bool_t retVal = TRUE;
      if( tickCallback != NULL ) {
1a0023c8:	b130      	cbz	r0, 1a0023d8 <tickCallbackSet+0x10>
         tickHookFunction = tickCallback;
1a0023ca:	4a05      	ldr	r2, [pc, #20]	; (1a0023e0 <tickCallbackSet+0x18>)
1a0023cc:	6010      	str	r0, [r2, #0]
      bool_t retVal = TRUE;
1a0023ce:	2001      	movs	r0, #1
      } else {
         retVal = FALSE;
      }
      if( tickCallbackParams != NULL ) {
1a0023d0:	b121      	cbz	r1, 1a0023dc <tickCallbackSet+0x14>
         callBackFuncParams = tickCallbackParams;
1a0023d2:	4b04      	ldr	r3, [pc, #16]	; (1a0023e4 <tickCallbackSet+0x1c>)
1a0023d4:	6019      	str	r1, [r3, #0]
1a0023d6:	4770      	bx	lr
         retVal = FALSE;
1a0023d8:	2000      	movs	r0, #0
1a0023da:	e7f9      	b.n	1a0023d0 <tickCallbackSet+0x8>
      } else {
         retVal &= FALSE;
1a0023dc:	2000      	movs	r0, #0
      }
      return retVal;
   #endif
}
1a0023de:	4770      	bx	lr
1a0023e0:	10000090 	.word	0x10000090
1a0023e4:	10000080 	.word	0x10000080

1a0023e8 <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a0023e8:	b118      	cbz	r0, 1a0023f2 <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a0023ea:	4b04      	ldr	r3, [pc, #16]	; (1a0023fc <tickPowerSet+0x14>)
1a0023ec:	2207      	movs	r2, #7
1a0023ee:	601a      	str	r2, [r3, #0]
1a0023f0:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a0023f2:	4b02      	ldr	r3, [pc, #8]	; (1a0023fc <tickPowerSet+0x14>)
1a0023f4:	2200      	movs	r2, #0
1a0023f6:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a0023f8:	4770      	bx	lr
1a0023fa:	bf00      	nop
1a0023fc:	e000e010 	.word	0xe000e010

1a002400 <tickInit>:
{
1a002400:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a002402:	ea50 0401 	orrs.w	r4, r0, r1
1a002406:	d02a      	beq.n	1a00245e <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a002408:	f110 32ff 	adds.w	r2, r0, #4294967295
1a00240c:	f141 33ff 	adc.w	r3, r1, #4294967295
1a002410:	2b00      	cmp	r3, #0
1a002412:	bf08      	it	eq
1a002414:	2a32      	cmpeq	r2, #50	; 0x32
1a002416:	d227      	bcs.n	1a002468 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a002418:	4b14      	ldr	r3, [pc, #80]	; (1a00246c <tickInit+0x6c>)
1a00241a:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a00241e:	4b14      	ldr	r3, [pc, #80]	; (1a002470 <tickInit+0x70>)
1a002420:	681b      	ldr	r3, [r3, #0]
1a002422:	fba3 4500 	umull	r4, r5, r3, r0
1a002426:	fb03 5501 	mla	r5, r3, r1, r5
1a00242a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00242e:	2300      	movs	r3, #0
1a002430:	4620      	mov	r0, r4
1a002432:	4629      	mov	r1, r5
1a002434:	f000 f880 	bl	1a002538 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a002438:	3801      	subs	r0, #1
1a00243a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a00243e:	d209      	bcs.n	1a002454 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a002440:	4b0c      	ldr	r3, [pc, #48]	; (1a002474 <tickInit+0x74>)
1a002442:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a002444:	4a0c      	ldr	r2, [pc, #48]	; (1a002478 <tickInit+0x78>)
1a002446:	21e0      	movs	r1, #224	; 0xe0
1a002448:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a00244c:	2200      	movs	r2, #0
1a00244e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a002450:	2207      	movs	r2, #7
1a002452:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a002454:	2001      	movs	r0, #1
1a002456:	f7ff ffc7 	bl	1a0023e8 <tickPowerSet>
      bool_t ret_val = 1;
1a00245a:	2001      	movs	r0, #1
}
1a00245c:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a00245e:	2000      	movs	r0, #0
1a002460:	f7ff ffc2 	bl	1a0023e8 <tickPowerSet>
         ret_val = 0;
1a002464:	2000      	movs	r0, #0
1a002466:	e7f9      	b.n	1a00245c <tickInit+0x5c>
            ret_val = 0;
1a002468:	2000      	movs	r0, #0
1a00246a:	e7f7      	b.n	1a00245c <tickInit+0x5c>
1a00246c:	10000040 	.word	0x10000040
1a002470:	100000d8 	.word	0x100000d8
1a002474:	e000e010 	.word	0xe000e010
1a002478:	e000ed00 	.word	0xe000ed00

1a00247c <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a00247c:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a00247e:	4a07      	ldr	r2, [pc, #28]	; (1a00249c <SysTick_Handler+0x20>)
1a002480:	6813      	ldr	r3, [r2, #0]
1a002482:	6851      	ldr	r1, [r2, #4]
1a002484:	3301      	adds	r3, #1
1a002486:	f141 0100 	adc.w	r1, r1, #0
1a00248a:	6013      	str	r3, [r2, #0]
1a00248c:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a00248e:	4b04      	ldr	r3, [pc, #16]	; (1a0024a0 <SysTick_Handler+0x24>)
1a002490:	681b      	ldr	r3, [r3, #0]
1a002492:	b113      	cbz	r3, 1a00249a <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a002494:	4a03      	ldr	r2, [pc, #12]	; (1a0024a4 <SysTick_Handler+0x28>)
1a002496:	6810      	ldr	r0, [r2, #0]
1a002498:	4798      	blx	r3
   }
}
1a00249a:	bd08      	pop	{r3, pc}
1a00249c:	10000088 	.word	0x10000088
1a0024a0:	10000090 	.word	0x10000090
1a0024a4:	10000080 	.word	0x10000080

1a0024a8 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a0024a8:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a0024aa:	4b04      	ldr	r3, [pc, #16]	; (1a0024bc <USB0_IRQHandler+0x14>)
1a0024ac:	681b      	ldr	r3, [r3, #0]
1a0024ae:	681b      	ldr	r3, [r3, #0]
1a0024b0:	68db      	ldr	r3, [r3, #12]
1a0024b2:	4a03      	ldr	r2, [pc, #12]	; (1a0024c0 <USB0_IRQHandler+0x18>)
1a0024b4:	6810      	ldr	r0, [r2, #0]
1a0024b6:	4798      	blx	r3
}
1a0024b8:	bd08      	pop	{r3, pc}
1a0024ba:	bf00      	nop
1a0024bc:	100000dc 	.word	0x100000dc
1a0024c0:	10000094 	.word	0x10000094

1a0024c4 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a0024c4:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a0024c6:	f7ff fa7d 	bl	1a0019c4 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a0024ca:	4b1a      	ldr	r3, [pc, #104]	; (1a002534 <boardInit+0x70>)
1a0024cc:	6818      	ldr	r0, [r3, #0]
1a0024ce:	f7ff fe13 	bl	1a0020f8 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a0024d2:	2001      	movs	r0, #1
1a0024d4:	2100      	movs	r1, #0
1a0024d6:	f7ff ff93 	bl	1a002400 <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a0024da:	2105      	movs	r1, #5
1a0024dc:	2000      	movs	r0, #0
1a0024de:	f7ff fe33 	bl	1a002148 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a0024e2:	2100      	movs	r1, #0
1a0024e4:	2024      	movs	r0, #36	; 0x24
1a0024e6:	f7ff fe2f 	bl	1a002148 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a0024ea:	2100      	movs	r1, #0
1a0024ec:	2025      	movs	r0, #37	; 0x25
1a0024ee:	f7ff fe2b 	bl	1a002148 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a0024f2:	2100      	movs	r1, #0
1a0024f4:	2026      	movs	r0, #38	; 0x26
1a0024f6:	f7ff fe27 	bl	1a002148 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a0024fa:	2100      	movs	r1, #0
1a0024fc:	2027      	movs	r0, #39	; 0x27
1a0024fe:	f7ff fe23 	bl	1a002148 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a002502:	2101      	movs	r1, #1
1a002504:	2028      	movs	r0, #40	; 0x28
1a002506:	f7ff fe1f 	bl	1a002148 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a00250a:	2101      	movs	r1, #1
1a00250c:	2029      	movs	r0, #41	; 0x29
1a00250e:	f7ff fe1b 	bl	1a002148 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a002512:	2101      	movs	r1, #1
1a002514:	202a      	movs	r0, #42	; 0x2a
1a002516:	f7ff fe17 	bl	1a002148 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a00251a:	2101      	movs	r1, #1
1a00251c:	202b      	movs	r0, #43	; 0x2b
1a00251e:	f7ff fe13 	bl	1a002148 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a002522:	2101      	movs	r1, #1
1a002524:	202c      	movs	r0, #44	; 0x2c
1a002526:	f7ff fe0f 	bl	1a002148 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a00252a:	2101      	movs	r1, #1
1a00252c:	202d      	movs	r0, #45	; 0x2d
1a00252e:	f7ff fe0b 	bl	1a002148 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a002532:	bd08      	pop	{r3, pc}
1a002534:	100000d8 	.word	0x100000d8

1a002538 <__aeabi_uldivmod>:
1a002538:	b953      	cbnz	r3, 1a002550 <__aeabi_uldivmod+0x18>
1a00253a:	b94a      	cbnz	r2, 1a002550 <__aeabi_uldivmod+0x18>
1a00253c:	2900      	cmp	r1, #0
1a00253e:	bf08      	it	eq
1a002540:	2800      	cmpeq	r0, #0
1a002542:	bf1c      	itt	ne
1a002544:	f04f 31ff 	movne.w	r1, #4294967295
1a002548:	f04f 30ff 	movne.w	r0, #4294967295
1a00254c:	f000 b974 	b.w	1a002838 <__aeabi_idiv0>
1a002550:	f1ad 0c08 	sub.w	ip, sp, #8
1a002554:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a002558:	f000 f806 	bl	1a002568 <__udivmoddi4>
1a00255c:	f8dd e004 	ldr.w	lr, [sp, #4]
1a002560:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a002564:	b004      	add	sp, #16
1a002566:	4770      	bx	lr

1a002568 <__udivmoddi4>:
1a002568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00256c:	9e08      	ldr	r6, [sp, #32]
1a00256e:	4604      	mov	r4, r0
1a002570:	4688      	mov	r8, r1
1a002572:	2b00      	cmp	r3, #0
1a002574:	f040 8085 	bne.w	1a002682 <__udivmoddi4+0x11a>
1a002578:	428a      	cmp	r2, r1
1a00257a:	4615      	mov	r5, r2
1a00257c:	d948      	bls.n	1a002610 <__udivmoddi4+0xa8>
1a00257e:	fab2 f282 	clz	r2, r2
1a002582:	b14a      	cbz	r2, 1a002598 <__udivmoddi4+0x30>
1a002584:	f1c2 0720 	rsb	r7, r2, #32
1a002588:	fa01 f302 	lsl.w	r3, r1, r2
1a00258c:	fa20 f707 	lsr.w	r7, r0, r7
1a002590:	4095      	lsls	r5, r2
1a002592:	ea47 0803 	orr.w	r8, r7, r3
1a002596:	4094      	lsls	r4, r2
1a002598:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00259c:	0c23      	lsrs	r3, r4, #16
1a00259e:	fbb8 f7fe 	udiv	r7, r8, lr
1a0025a2:	fa1f fc85 	uxth.w	ip, r5
1a0025a6:	fb0e 8817 	mls	r8, lr, r7, r8
1a0025aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0025ae:	fb07 f10c 	mul.w	r1, r7, ip
1a0025b2:	4299      	cmp	r1, r3
1a0025b4:	d909      	bls.n	1a0025ca <__udivmoddi4+0x62>
1a0025b6:	18eb      	adds	r3, r5, r3
1a0025b8:	f107 30ff 	add.w	r0, r7, #4294967295
1a0025bc:	f080 80e3 	bcs.w	1a002786 <__udivmoddi4+0x21e>
1a0025c0:	4299      	cmp	r1, r3
1a0025c2:	f240 80e0 	bls.w	1a002786 <__udivmoddi4+0x21e>
1a0025c6:	3f02      	subs	r7, #2
1a0025c8:	442b      	add	r3, r5
1a0025ca:	1a5b      	subs	r3, r3, r1
1a0025cc:	b2a4      	uxth	r4, r4
1a0025ce:	fbb3 f0fe 	udiv	r0, r3, lr
1a0025d2:	fb0e 3310 	mls	r3, lr, r0, r3
1a0025d6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0025da:	fb00 fc0c 	mul.w	ip, r0, ip
1a0025de:	45a4      	cmp	ip, r4
1a0025e0:	d909      	bls.n	1a0025f6 <__udivmoddi4+0x8e>
1a0025e2:	192c      	adds	r4, r5, r4
1a0025e4:	f100 33ff 	add.w	r3, r0, #4294967295
1a0025e8:	f080 80cb 	bcs.w	1a002782 <__udivmoddi4+0x21a>
1a0025ec:	45a4      	cmp	ip, r4
1a0025ee:	f240 80c8 	bls.w	1a002782 <__udivmoddi4+0x21a>
1a0025f2:	3802      	subs	r0, #2
1a0025f4:	442c      	add	r4, r5
1a0025f6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a0025fa:	eba4 040c 	sub.w	r4, r4, ip
1a0025fe:	2700      	movs	r7, #0
1a002600:	b11e      	cbz	r6, 1a00260a <__udivmoddi4+0xa2>
1a002602:	40d4      	lsrs	r4, r2
1a002604:	2300      	movs	r3, #0
1a002606:	e9c6 4300 	strd	r4, r3, [r6]
1a00260a:	4639      	mov	r1, r7
1a00260c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002610:	2a00      	cmp	r2, #0
1a002612:	d053      	beq.n	1a0026bc <__udivmoddi4+0x154>
1a002614:	fab2 f282 	clz	r2, r2
1a002618:	2a00      	cmp	r2, #0
1a00261a:	f040 80b6 	bne.w	1a00278a <__udivmoddi4+0x222>
1a00261e:	1b49      	subs	r1, r1, r5
1a002620:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002624:	fa1f f885 	uxth.w	r8, r5
1a002628:	2701      	movs	r7, #1
1a00262a:	fbb1 fcfe 	udiv	ip, r1, lr
1a00262e:	0c23      	lsrs	r3, r4, #16
1a002630:	fb0e 111c 	mls	r1, lr, ip, r1
1a002634:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002638:	fb08 f10c 	mul.w	r1, r8, ip
1a00263c:	4299      	cmp	r1, r3
1a00263e:	d907      	bls.n	1a002650 <__udivmoddi4+0xe8>
1a002640:	18eb      	adds	r3, r5, r3
1a002642:	f10c 30ff 	add.w	r0, ip, #4294967295
1a002646:	d202      	bcs.n	1a00264e <__udivmoddi4+0xe6>
1a002648:	4299      	cmp	r1, r3
1a00264a:	f200 80ec 	bhi.w	1a002826 <__udivmoddi4+0x2be>
1a00264e:	4684      	mov	ip, r0
1a002650:	1a59      	subs	r1, r3, r1
1a002652:	b2a3      	uxth	r3, r4
1a002654:	fbb1 f0fe 	udiv	r0, r1, lr
1a002658:	fb0e 1410 	mls	r4, lr, r0, r1
1a00265c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a002660:	fb08 f800 	mul.w	r8, r8, r0
1a002664:	45a0      	cmp	r8, r4
1a002666:	d907      	bls.n	1a002678 <__udivmoddi4+0x110>
1a002668:	192c      	adds	r4, r5, r4
1a00266a:	f100 33ff 	add.w	r3, r0, #4294967295
1a00266e:	d202      	bcs.n	1a002676 <__udivmoddi4+0x10e>
1a002670:	45a0      	cmp	r8, r4
1a002672:	f200 80dc 	bhi.w	1a00282e <__udivmoddi4+0x2c6>
1a002676:	4618      	mov	r0, r3
1a002678:	eba4 0408 	sub.w	r4, r4, r8
1a00267c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a002680:	e7be      	b.n	1a002600 <__udivmoddi4+0x98>
1a002682:	428b      	cmp	r3, r1
1a002684:	d908      	bls.n	1a002698 <__udivmoddi4+0x130>
1a002686:	2e00      	cmp	r6, #0
1a002688:	d078      	beq.n	1a00277c <__udivmoddi4+0x214>
1a00268a:	2700      	movs	r7, #0
1a00268c:	e9c6 0100 	strd	r0, r1, [r6]
1a002690:	4638      	mov	r0, r7
1a002692:	4639      	mov	r1, r7
1a002694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002698:	fab3 f783 	clz	r7, r3
1a00269c:	b97f      	cbnz	r7, 1a0026be <__udivmoddi4+0x156>
1a00269e:	428b      	cmp	r3, r1
1a0026a0:	d302      	bcc.n	1a0026a8 <__udivmoddi4+0x140>
1a0026a2:	4282      	cmp	r2, r0
1a0026a4:	f200 80bd 	bhi.w	1a002822 <__udivmoddi4+0x2ba>
1a0026a8:	1a84      	subs	r4, r0, r2
1a0026aa:	eb61 0303 	sbc.w	r3, r1, r3
1a0026ae:	2001      	movs	r0, #1
1a0026b0:	4698      	mov	r8, r3
1a0026b2:	2e00      	cmp	r6, #0
1a0026b4:	d0a9      	beq.n	1a00260a <__udivmoddi4+0xa2>
1a0026b6:	e9c6 4800 	strd	r4, r8, [r6]
1a0026ba:	e7a6      	b.n	1a00260a <__udivmoddi4+0xa2>
1a0026bc:	deff      	udf	#255	; 0xff
1a0026be:	f1c7 0520 	rsb	r5, r7, #32
1a0026c2:	40bb      	lsls	r3, r7
1a0026c4:	fa22 fc05 	lsr.w	ip, r2, r5
1a0026c8:	ea4c 0c03 	orr.w	ip, ip, r3
1a0026cc:	fa01 f407 	lsl.w	r4, r1, r7
1a0026d0:	fa20 f805 	lsr.w	r8, r0, r5
1a0026d4:	fa21 f305 	lsr.w	r3, r1, r5
1a0026d8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a0026dc:	ea48 0404 	orr.w	r4, r8, r4
1a0026e0:	fbb3 f9fe 	udiv	r9, r3, lr
1a0026e4:	0c21      	lsrs	r1, r4, #16
1a0026e6:	fb0e 3319 	mls	r3, lr, r9, r3
1a0026ea:	fa1f f88c 	uxth.w	r8, ip
1a0026ee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a0026f2:	fb09 fa08 	mul.w	sl, r9, r8
1a0026f6:	459a      	cmp	sl, r3
1a0026f8:	fa02 f207 	lsl.w	r2, r2, r7
1a0026fc:	fa00 f107 	lsl.w	r1, r0, r7
1a002700:	d90b      	bls.n	1a00271a <__udivmoddi4+0x1b2>
1a002702:	eb1c 0303 	adds.w	r3, ip, r3
1a002706:	f109 30ff 	add.w	r0, r9, #4294967295
1a00270a:	f080 8088 	bcs.w	1a00281e <__udivmoddi4+0x2b6>
1a00270e:	459a      	cmp	sl, r3
1a002710:	f240 8085 	bls.w	1a00281e <__udivmoddi4+0x2b6>
1a002714:	f1a9 0902 	sub.w	r9, r9, #2
1a002718:	4463      	add	r3, ip
1a00271a:	eba3 030a 	sub.w	r3, r3, sl
1a00271e:	b2a4      	uxth	r4, r4
1a002720:	fbb3 f0fe 	udiv	r0, r3, lr
1a002724:	fb0e 3310 	mls	r3, lr, r0, r3
1a002728:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a00272c:	fb00 f808 	mul.w	r8, r0, r8
1a002730:	45a0      	cmp	r8, r4
1a002732:	d908      	bls.n	1a002746 <__udivmoddi4+0x1de>
1a002734:	eb1c 0404 	adds.w	r4, ip, r4
1a002738:	f100 33ff 	add.w	r3, r0, #4294967295
1a00273c:	d26b      	bcs.n	1a002816 <__udivmoddi4+0x2ae>
1a00273e:	45a0      	cmp	r8, r4
1a002740:	d969      	bls.n	1a002816 <__udivmoddi4+0x2ae>
1a002742:	3802      	subs	r0, #2
1a002744:	4464      	add	r4, ip
1a002746:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a00274a:	eba4 0408 	sub.w	r4, r4, r8
1a00274e:	fba0 8902 	umull	r8, r9, r0, r2
1a002752:	454c      	cmp	r4, r9
1a002754:	46c6      	mov	lr, r8
1a002756:	464b      	mov	r3, r9
1a002758:	d354      	bcc.n	1a002804 <__udivmoddi4+0x29c>
1a00275a:	d051      	beq.n	1a002800 <__udivmoddi4+0x298>
1a00275c:	2e00      	cmp	r6, #0
1a00275e:	d069      	beq.n	1a002834 <__udivmoddi4+0x2cc>
1a002760:	ebb1 020e 	subs.w	r2, r1, lr
1a002764:	eb64 0403 	sbc.w	r4, r4, r3
1a002768:	fa04 f505 	lsl.w	r5, r4, r5
1a00276c:	fa22 f307 	lsr.w	r3, r2, r7
1a002770:	40fc      	lsrs	r4, r7
1a002772:	431d      	orrs	r5, r3
1a002774:	e9c6 5400 	strd	r5, r4, [r6]
1a002778:	2700      	movs	r7, #0
1a00277a:	e746      	b.n	1a00260a <__udivmoddi4+0xa2>
1a00277c:	4637      	mov	r7, r6
1a00277e:	4630      	mov	r0, r6
1a002780:	e743      	b.n	1a00260a <__udivmoddi4+0xa2>
1a002782:	4618      	mov	r0, r3
1a002784:	e737      	b.n	1a0025f6 <__udivmoddi4+0x8e>
1a002786:	4607      	mov	r7, r0
1a002788:	e71f      	b.n	1a0025ca <__udivmoddi4+0x62>
1a00278a:	f1c2 0320 	rsb	r3, r2, #32
1a00278e:	fa20 f703 	lsr.w	r7, r0, r3
1a002792:	4095      	lsls	r5, r2
1a002794:	fa01 f002 	lsl.w	r0, r1, r2
1a002798:	fa21 f303 	lsr.w	r3, r1, r3
1a00279c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0027a0:	4338      	orrs	r0, r7
1a0027a2:	0c01      	lsrs	r1, r0, #16
1a0027a4:	fbb3 f7fe 	udiv	r7, r3, lr
1a0027a8:	fa1f f885 	uxth.w	r8, r5
1a0027ac:	fb0e 3317 	mls	r3, lr, r7, r3
1a0027b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0027b4:	fb07 f308 	mul.w	r3, r7, r8
1a0027b8:	428b      	cmp	r3, r1
1a0027ba:	fa04 f402 	lsl.w	r4, r4, r2
1a0027be:	d907      	bls.n	1a0027d0 <__udivmoddi4+0x268>
1a0027c0:	1869      	adds	r1, r5, r1
1a0027c2:	f107 3cff 	add.w	ip, r7, #4294967295
1a0027c6:	d228      	bcs.n	1a00281a <__udivmoddi4+0x2b2>
1a0027c8:	428b      	cmp	r3, r1
1a0027ca:	d926      	bls.n	1a00281a <__udivmoddi4+0x2b2>
1a0027cc:	3f02      	subs	r7, #2
1a0027ce:	4429      	add	r1, r5
1a0027d0:	1acb      	subs	r3, r1, r3
1a0027d2:	b281      	uxth	r1, r0
1a0027d4:	fbb3 f0fe 	udiv	r0, r3, lr
1a0027d8:	fb0e 3310 	mls	r3, lr, r0, r3
1a0027dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0027e0:	fb00 f308 	mul.w	r3, r0, r8
1a0027e4:	428b      	cmp	r3, r1
1a0027e6:	d907      	bls.n	1a0027f8 <__udivmoddi4+0x290>
1a0027e8:	1869      	adds	r1, r5, r1
1a0027ea:	f100 3cff 	add.w	ip, r0, #4294967295
1a0027ee:	d210      	bcs.n	1a002812 <__udivmoddi4+0x2aa>
1a0027f0:	428b      	cmp	r3, r1
1a0027f2:	d90e      	bls.n	1a002812 <__udivmoddi4+0x2aa>
1a0027f4:	3802      	subs	r0, #2
1a0027f6:	4429      	add	r1, r5
1a0027f8:	1ac9      	subs	r1, r1, r3
1a0027fa:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a0027fe:	e714      	b.n	1a00262a <__udivmoddi4+0xc2>
1a002800:	4541      	cmp	r1, r8
1a002802:	d2ab      	bcs.n	1a00275c <__udivmoddi4+0x1f4>
1a002804:	ebb8 0e02 	subs.w	lr, r8, r2
1a002808:	eb69 020c 	sbc.w	r2, r9, ip
1a00280c:	3801      	subs	r0, #1
1a00280e:	4613      	mov	r3, r2
1a002810:	e7a4      	b.n	1a00275c <__udivmoddi4+0x1f4>
1a002812:	4660      	mov	r0, ip
1a002814:	e7f0      	b.n	1a0027f8 <__udivmoddi4+0x290>
1a002816:	4618      	mov	r0, r3
1a002818:	e795      	b.n	1a002746 <__udivmoddi4+0x1de>
1a00281a:	4667      	mov	r7, ip
1a00281c:	e7d8      	b.n	1a0027d0 <__udivmoddi4+0x268>
1a00281e:	4681      	mov	r9, r0
1a002820:	e77b      	b.n	1a00271a <__udivmoddi4+0x1b2>
1a002822:	4638      	mov	r0, r7
1a002824:	e745      	b.n	1a0026b2 <__udivmoddi4+0x14a>
1a002826:	f1ac 0c02 	sub.w	ip, ip, #2
1a00282a:	442b      	add	r3, r5
1a00282c:	e710      	b.n	1a002650 <__udivmoddi4+0xe8>
1a00282e:	3802      	subs	r0, #2
1a002830:	442c      	add	r4, r5
1a002832:	e721      	b.n	1a002678 <__udivmoddi4+0x110>
1a002834:	4637      	mov	r7, r6
1a002836:	e6e8      	b.n	1a00260a <__udivmoddi4+0xa2>

1a002838 <__aeabi_idiv0>:
1a002838:	4770      	bx	lr
1a00283a:	bf00      	nop

1a00283c <__libc_init_array>:
1a00283c:	b570      	push	{r4, r5, r6, lr}
1a00283e:	4d0d      	ldr	r5, [pc, #52]	; (1a002874 <__libc_init_array+0x38>)
1a002840:	4c0d      	ldr	r4, [pc, #52]	; (1a002878 <__libc_init_array+0x3c>)
1a002842:	1b64      	subs	r4, r4, r5
1a002844:	10a4      	asrs	r4, r4, #2
1a002846:	2600      	movs	r6, #0
1a002848:	42a6      	cmp	r6, r4
1a00284a:	d109      	bne.n	1a002860 <__libc_init_array+0x24>
1a00284c:	4d0b      	ldr	r5, [pc, #44]	; (1a00287c <__libc_init_array+0x40>)
1a00284e:	4c0c      	ldr	r4, [pc, #48]	; (1a002880 <__libc_init_array+0x44>)
1a002850:	f7fe fddf 	bl	1a001412 <_init>
1a002854:	1b64      	subs	r4, r4, r5
1a002856:	10a4      	asrs	r4, r4, #2
1a002858:	2600      	movs	r6, #0
1a00285a:	42a6      	cmp	r6, r4
1a00285c:	d105      	bne.n	1a00286a <__libc_init_array+0x2e>
1a00285e:	bd70      	pop	{r4, r5, r6, pc}
1a002860:	f855 3b04 	ldr.w	r3, [r5], #4
1a002864:	4798      	blx	r3
1a002866:	3601      	adds	r6, #1
1a002868:	e7ee      	b.n	1a002848 <__libc_init_array+0xc>
1a00286a:	f855 3b04 	ldr.w	r3, [r5], #4
1a00286e:	4798      	blx	r3
1a002870:	3601      	adds	r6, #1
1a002872:	e7f2      	b.n	1a00285a <__libc_init_array+0x1e>
1a002874:	1a002b18 	.word	0x1a002b18
1a002878:	1a002b18 	.word	0x1a002b18
1a00287c:	1a002b18 	.word	0x1a002b18
1a002880:	1a002b1c 	.word	0x1a002b1c

1a002884 <memset>:
1a002884:	4402      	add	r2, r0
1a002886:	4603      	mov	r3, r0
1a002888:	4293      	cmp	r3, r2
1a00288a:	d100      	bne.n	1a00288e <memset+0xa>
1a00288c:	4770      	bx	lr
1a00288e:	f803 1b01 	strb.w	r1, [r3], #1
1a002892:	e7f9      	b.n	1a002888 <memset+0x4>
1a002894:	64617543 	.word	0x64617543
1a002898:	61646172 	.word	0x61646172
1a00289c:	ffffff00 	.word	0xffffff00
1a0028a0:	6f6e6553 	.word	0x6f6e6553
1a0028a4:	6c616469 	.word	0x6c616469
1a0028a8:	ffffff00 	.word	0xffffff00
1a0028ac:	61697254 	.word	0x61697254
1a0028b0:	6c75676e 	.word	0x6c75676e
1a0028b4:	ff007261 	.word	0xff007261

1a0028b8 <InitClkStates>:
1a0028b8:	01010f01                                ....

1a0028bc <pinmuxing>:
1a0028bc:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a0028cc:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a0028dc:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a0028ec:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a0028fc:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a00290c:	00d50301 00d50401 00160107 00560207     ..............V.
1a00291c:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a00292c:	00570206                                ..W.

1a002930 <ExtRateIn>:
1a002930:	00000000                                ....

1a002934 <GpioButtons>:
1a002934:	08000400 09010900                       ........

1a00293c <GpioLeds>:
1a00293c:	01050005 0e000205 0c010b01              ............

1a002948 <GpioPorts>:
1a002948:	03030003 0f050403 05031005 07030603     ................
1a002958:	ffff0802                                ....

1a00295c <OscRateIn>:
1a00295c:	00b71b00                                ....

1a002960 <InitClkStates>:
1a002960:	00010100 00010909 0001090a 01010701     ................
1a002970:	00010902 00010906 0101090c 0001090d     ................
1a002980:	0001090e 0001090f 00010910 00010911     ................
1a002990:	00010912 00010913 00011114 00011119     ................
1a0029a0:	0001111a 0001111b 08040201 0f0f0f03     ................
1a0029b0:	000000ff                                ....

1a0029b4 <periph_to_base>:
1a0029b4:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0029c4:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0029d4:	000100e0 01000100 01200003 00060120     .......... . ...
1a0029e4:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a0029f4:	01820013 00120182 01a201a2 01c20011     ................
1a002a04:	001001c2 01e201e2 0202000f 000e0202     ................
1a002a14:	02220222 0223000d 001c0223              "."...#.#...

1a002a20 <UART_BClock>:
1a002a20:	01a201c2 01620182                       ......b.

1a002a28 <UART_PClock>:
1a002a28:	00820081 00a200a1                       ........

1a002a30 <gpioPinsInit>:
1a002a30:	02000104 00050701 05010d03 04080100     ................
1a002a40:	02020002 02000304 00000403 04070002     ................
1a002a50:	030c0300 09050402 05040103 04030208     ................
1a002a60:	04020305 06040504 0802000c 03000b06     ................
1a002a70:	00090607 07060503 060f0504 03030004     ................
1a002a80:	02000404 00050404 06040502 04060200     ................
1a002a90:	0c050408 05040a04 0003010e 14010a00     ................
1a002aa0:	010f0000 0d000012 00001101 0010010c     ................
1a002ab0:	07070300 000f0300 01000001 00000000     ................
1a002ac0:	000a0600 08060603 06100504 04030005     ................
1a002ad0:	03000106 04090400 04010d05 010b0000     ................
1a002ae0:	0200000f 00000001 00010104 02010800     ................
1a002af0:	01090000 09010006 05040002 04010200     ................
1a002b00:	02020105 02020504 0e00000a 01000b02     ................
1a002b10:	000c020b ffff0c01                       ........
